
STM32G050K8T6_StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08005d28  08005d28  00006d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006678  08006678  0000805c  2**0
                  CONTENTS
  4 .ARM          00000000  08006678  08006678  0000805c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006678  08006678  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800667c  0800667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006680  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2000005c  080066dc  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  080066dc  0000884c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d36  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec2  00000000  00000000  0001fdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00022c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001108  00000000  00000000  00024218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b36  00000000  00000000  00025320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a371  00000000  00000000  0003de56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c8af  00000000  00000000  000581c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4a76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a0  00000000  00000000  000f4abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f9f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000005c 	.word	0x2000005c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08005d10 	.word	0x08005d10

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000060 	.word	0x20000060
 80000f8:	08005d10 	.word	0x08005d10

080000fc <__gnu_thumb1_case_shi>:
 80000fc:	b403      	push	{r0, r1}
 80000fe:	4671      	mov	r1, lr
 8000100:	0849      	lsrs	r1, r1, #1
 8000102:	0040      	lsls	r0, r0, #1
 8000104:	0049      	lsls	r1, r1, #1
 8000106:	5e09      	ldrsh	r1, [r1, r0]
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	448e      	add	lr, r1
 800010c:	bc03      	pop	{r0, r1}
 800010e:	4770      	bx	lr

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <__aeabi_i2f>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	2800      	cmp	r0, #0
 8000400:	d013      	beq.n	800042a <__aeabi_i2f+0x2e>
 8000402:	17c3      	asrs	r3, r0, #31
 8000404:	18c5      	adds	r5, r0, r3
 8000406:	405d      	eors	r5, r3
 8000408:	0fc4      	lsrs	r4, r0, #31
 800040a:	0028      	movs	r0, r5
 800040c:	f000 f842 	bl	8000494 <__clzsi2>
 8000410:	239e      	movs	r3, #158	@ 0x9e
 8000412:	0001      	movs	r1, r0
 8000414:	1a1b      	subs	r3, r3, r0
 8000416:	2b96      	cmp	r3, #150	@ 0x96
 8000418:	dc0f      	bgt.n	800043a <__aeabi_i2f+0x3e>
 800041a:	2808      	cmp	r0, #8
 800041c:	d034      	beq.n	8000488 <__aeabi_i2f+0x8c>
 800041e:	3908      	subs	r1, #8
 8000420:	408d      	lsls	r5, r1
 8000422:	026d      	lsls	r5, r5, #9
 8000424:	0a6d      	lsrs	r5, r5, #9
 8000426:	b2d8      	uxtb	r0, r3
 8000428:	e002      	b.n	8000430 <__aeabi_i2f+0x34>
 800042a:	2400      	movs	r4, #0
 800042c:	2000      	movs	r0, #0
 800042e:	2500      	movs	r5, #0
 8000430:	05c0      	lsls	r0, r0, #23
 8000432:	4328      	orrs	r0, r5
 8000434:	07e4      	lsls	r4, r4, #31
 8000436:	4320      	orrs	r0, r4
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	2b99      	cmp	r3, #153	@ 0x99
 800043c:	dc16      	bgt.n	800046c <__aeabi_i2f+0x70>
 800043e:	1f42      	subs	r2, r0, #5
 8000440:	2805      	cmp	r0, #5
 8000442:	d000      	beq.n	8000446 <__aeabi_i2f+0x4a>
 8000444:	4095      	lsls	r5, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4811      	ldr	r0, [pc, #68]	@ (8000490 <__aeabi_i2f+0x94>)
 800044a:	4002      	ands	r2, r0
 800044c:	076e      	lsls	r6, r5, #29
 800044e:	d009      	beq.n	8000464 <__aeabi_i2f+0x68>
 8000450:	260f      	movs	r6, #15
 8000452:	4035      	ands	r5, r6
 8000454:	2d04      	cmp	r5, #4
 8000456:	d005      	beq.n	8000464 <__aeabi_i2f+0x68>
 8000458:	3204      	adds	r2, #4
 800045a:	0155      	lsls	r5, r2, #5
 800045c:	d502      	bpl.n	8000464 <__aeabi_i2f+0x68>
 800045e:	239f      	movs	r3, #159	@ 0x9f
 8000460:	4002      	ands	r2, r0
 8000462:	1a5b      	subs	r3, r3, r1
 8000464:	0192      	lsls	r2, r2, #6
 8000466:	0a55      	lsrs	r5, r2, #9
 8000468:	b2d8      	uxtb	r0, r3
 800046a:	e7e1      	b.n	8000430 <__aeabi_i2f+0x34>
 800046c:	2205      	movs	r2, #5
 800046e:	1a12      	subs	r2, r2, r0
 8000470:	0028      	movs	r0, r5
 8000472:	40d0      	lsrs	r0, r2
 8000474:	0002      	movs	r2, r0
 8000476:	0008      	movs	r0, r1
 8000478:	301b      	adds	r0, #27
 800047a:	4085      	lsls	r5, r0
 800047c:	0028      	movs	r0, r5
 800047e:	1e45      	subs	r5, r0, #1
 8000480:	41a8      	sbcs	r0, r5
 8000482:	4302      	orrs	r2, r0
 8000484:	0015      	movs	r5, r2
 8000486:	e7de      	b.n	8000446 <__aeabi_i2f+0x4a>
 8000488:	026d      	lsls	r5, r5, #9
 800048a:	2096      	movs	r0, #150	@ 0x96
 800048c:	0a6d      	lsrs	r5, r5, #9
 800048e:	e7cf      	b.n	8000430 <__aeabi_i2f+0x34>
 8000490:	fbffffff 	.word	0xfbffffff

08000494 <__clzsi2>:
 8000494:	211c      	movs	r1, #28
 8000496:	2301      	movs	r3, #1
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0xe>
 800049e:	0c00      	lsrs	r0, r0, #16
 80004a0:	3910      	subs	r1, #16
 80004a2:	0a1b      	lsrs	r3, r3, #8
 80004a4:	4298      	cmp	r0, r3
 80004a6:	d301      	bcc.n	80004ac <__clzsi2+0x18>
 80004a8:	0a00      	lsrs	r0, r0, #8
 80004aa:	3908      	subs	r1, #8
 80004ac:	091b      	lsrs	r3, r3, #4
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0x22>
 80004b2:	0900      	lsrs	r0, r0, #4
 80004b4:	3904      	subs	r1, #4
 80004b6:	a202      	add	r2, pc, #8	@ (adr r2, 80004c0 <__clzsi2+0x2c>)
 80004b8:	5c10      	ldrb	r0, [r2, r0]
 80004ba:	1840      	adds	r0, r0, r1
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	02020304 	.word	0x02020304
 80004c4:	01010101 	.word	0x01010101
	...

080004d0 <ADXL335_convert_ADCtomV>:
#include "stm32g0xx_hal.h"
#include <stdio.h>
#include <string.h>

void ADXL335_convert_ADCtomV(ADXL335_t* sensor, ADC_HandleTypeDef* hadc)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)sensor->adc_value, numberOfAxes);
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	2203      	movs	r2, #3
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fcb7 	bl	8001e54 <HAL_ADC_Start_DMA>
	for(int i = 0; i < numberOfAxes; i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	e019      	b.n	8000520 <ADXL335_convert_ADCtomV+0x50>
	{
		sensor->mV_value[i] = (sensor->adc_value[i] * V_in) / adcResolution;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	5ad3      	ldrh	r3, [r2, r3]
 80004f4:	001a      	movs	r2, r3
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <ADXL335_convert_ADCtomV+0x60>)
 80004f8:	4353      	muls	r3, r2
 80004fa:	490e      	ldr	r1, [pc, #56]	@ (8000534 <ADXL335_convert_ADCtomV+0x64>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff fe91 	bl	8000224 <__divsi3>
 8000502:	0003      	movs	r3, r0
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff79 	bl	80003fc <__aeabi_i2f>
 800050a:	1c01      	adds	r1, r0, #0
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3304      	adds	r3, #4
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	3304      	adds	r3, #4
 8000518:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < numberOfAxes; i++)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3301      	adds	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b02      	cmp	r3, #2
 8000524:	dde2      	ble.n	80004ec <ADXL335_convert_ADCtomV+0x1c>
	}
}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b004      	add	sp, #16
 800052e:	bd80      	pop	{r7, pc}
 8000530:	00000ce4 	.word	0x00000ce4
 8000534:	00000fff 	.word	0x00000fff

08000538 <ADXL335_sendSensorData>:
//    // Format acceleration values
//    len += sprintf(buffer + len, "g: X=%.2f Y=%.2f Z=%.2f\r\n",
//                   sensor->g_value[0], sensor->g_value[1], sensor->g_value[2]);
//}

void ADXL335_sendSensorData(ADXL335_t* sensor, char* buffer, uint16_t buffer_size) {
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af02      	add	r7, sp, #8
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	801a      	strh	r2, [r3, #0]
    int len = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]

    // Format as CSV: "ADC_X,ADC_Y,ADC_Z,mV_X,mV_Y,mV_Z,g_X,g_Y,g_Z"
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	18d0      	adds	r0, r2, r3
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	881a      	ldrh	r2, [r3, #0]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	001c      	movs	r4, r3
                   sensor->adc_value[0], sensor->adc_value[1], sensor->adc_value[2]);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	881b      	ldrh	r3, [r3, #0]
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 800055e:	001d      	movs	r5, r3
                   sensor->adc_value[0], sensor->adc_value[1], sensor->adc_value[2]);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	885b      	ldrh	r3, [r3, #2]
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 8000564:	0019      	movs	r1, r3
                   sensor->adc_value[0], sensor->adc_value[1], sensor->adc_value[2]);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	889b      	ldrh	r3, [r3, #4]
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <ADXL335_sendSensorData+0x60>)
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	9100      	str	r1, [sp, #0]
 8000570:	002b      	movs	r3, r5
 8000572:	0021      	movs	r1, r4
 8000574:	f004 ff1a 	bl	80053ac <sniprintf>
 8000578:	0002      	movs	r2, r0
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	189b      	adds	r3, r3, r2
 800057e:	617b      	str	r3, [r7, #20]
//
//    len += snprintf(buffer + len, buffer_size - len, "%.3f,%.3f,%.3f\r\n",
//                   sensor->g_value[0], sensor->g_value[1], sensor->g_value[2]);

    // Ensure null termination
    buffer[buffer_size - 1] = '\0';
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b006      	add	sp, #24
 8000594:	bdb0      	pop	{r4, r5, r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	08005d3c 	.word	0x08005d3c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b090      	sub	sp, #64	@ 0x40
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f001 f8bd 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f87f 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fa85 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 fa65 	bl	8000a7c <MX_DMA_Init>
  MX_ADC1_Init();
 80005b2:	f000 f8c1 	bl	8000738 <MX_ADC1_Init>
  MX_I2C2_Init();
 80005b6:	f000 f94d 	bl	8000854 <MX_I2C2_Init>
  MX_SPI2_Init();
 80005ba:	f000 f98b 	bl	80008d4 <MX_SPI2_Init>
  MX_TIM3_Init();
 80005be:	f000 f9c7 	bl	8000950 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fa27 	bl	8000a14 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// ADXL Code to get data + send data via Bluetooth
	ADXL335_convert_ADCtomV(&ADXL335, &hadc1);
 80005c6:	4a32      	ldr	r2, [pc, #200]	@ (8000690 <main+0xf4>)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff7f 	bl	80004d0 <ADXL335_convert_ADCtomV>
	//ADXL335_convert_mVtog(&ADXL335); // Let Matlab do the calculations passing adc via bluetooth
	ADXL335_sendSensorData(&ADXL335, data, sizeof(data));
 80005d2:	4930      	ldr	r1, [pc, #192]	@ (8000694 <main+0xf8>)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2214      	movs	r2, #20
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff ffad 	bl	8000538 <ADXL335_sendSensorData>

	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	492c      	ldr	r1, [pc, #176]	@ (8000694 <main+0xf8>)
 80005e4:	482c      	ldr	r0, [pc, #176]	@ (8000698 <main+0xfc>)
 80005e6:	2214      	movs	r2, #20
 80005e8:	f004 fa9e 	bl	8004b28 <HAL_UART_Transmit>

	// Set High/Low signal from PA0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005ec:	23a0      	movs	r3, #160	@ 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 fc8e 	bl	8002f14 <HAL_GPIO_TogglePin>

	HAL_Delay(50); // f = 1/t, t = 50ms, f = 20Hz
 80005f8:	2032      	movs	r0, #50	@ 0x32
 80005fa:	f001 f917 	bl	800182c <HAL_Delay>

	// Encoder Code to check button press
	button_val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80005fe:	23a0      	movs	r3, #160	@ 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2110      	movs	r1, #16
 8000604:	0018      	movs	r0, r3
 8000606:	f002 fc4b 	bl	8002ea0 <HAL_GPIO_ReadPin>
 800060a:	0003      	movs	r3, r0
 800060c:	001a      	movs	r2, r3
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <main+0x100>)
 8000610:	701a      	strb	r2, [r3, #0]

	if(!button_val)
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <main+0x100>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d111      	bne.n	800063e <main+0xa2>
	{
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800061a:	2380      	movs	r3, #128	@ 0x80
 800061c:	005a      	lsls	r2, r3, #1
 800061e:	23a0      	movs	r3, #160	@ 0xa0
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	0011      	movs	r1, r2
 8000624:	0018      	movs	r0, r3
 8000626:	f002 fc75 	bl	8002f14 <HAL_GPIO_TogglePin>
	 HAL_Delay(250);
 800062a:	20fa      	movs	r0, #250	@ 0xfa
 800062c:	f001 f8fe 	bl	800182c <HAL_Delay>

	 // If button is pressed, it goes to home page (help(1/2))
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <main+0x104>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	@ 0x24
	  encoder_val = 0;
 8000638:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <main+0x108>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	}

	// Encoder Code to navigate between screens
	  if (encoder_val >= 0 && encoder_val < 10)
 800063e:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <main+0x108>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b09      	cmp	r3, #9
 8000644:	d802      	bhi.n	800064c <main+0xb0>
	  {
	      screen0();
 8000646:	f000 fadf 	bl	8000c08 <screen0>
 800064a:	e7bc      	b.n	80005c6 <main+0x2a>
	  }
	  else if (encoder_val >= 10 && encoder_val < 20)
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <main+0x108>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b09      	cmp	r3, #9
 8000652:	d906      	bls.n	8000662 <main+0xc6>
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <main+0x108>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b13      	cmp	r3, #19
 800065a:	d802      	bhi.n	8000662 <main+0xc6>
	  {
	      screen1();
 800065c:	f000 fb2c 	bl	8000cb8 <screen1>
 8000660:	e015      	b.n	800068e <main+0xf2>
	  }
	  else if (encoder_val >= 20 && encoder_val < 30)
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <main+0x108>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b13      	cmp	r3, #19
 8000668:	d906      	bls.n	8000678 <main+0xdc>
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <main+0x108>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b1d      	cmp	r3, #29
 8000670:	d802      	bhi.n	8000678 <main+0xdc>
	  {
	      screen2();
 8000672:	f000 fb79 	bl	8000d68 <screen2>
 8000676:	e00a      	b.n	800068e <main+0xf2>
	  }
	  else if (encoder_val > 30) // Reset back counter to 0 if it goes past encoder_value of 30
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <main+0x108>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b1e      	cmp	r3, #30
 800067e:	d9a2      	bls.n	80005c6 <main+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <main+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
		  encoder_val = 0;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <main+0x108>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
	ADXL335_convert_ADCtomV(&ADXL335, &hadc1);
 800068e:	e79a      	b.n	80005c6 <main+0x2a>
 8000690:	20000078 	.word	0x20000078
 8000694:	200002d0 	.word	0x200002d0
 8000698:	2000023c 	.word	0x2000023c
 800069c:	200002f0 	.word	0x200002f0
 80006a0:	200001f0 	.word	0x200001f0
 80006a4:	200002e8 	.word	0x200002e8

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b093      	sub	sp, #76	@ 0x4c
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	2414      	movs	r4, #20
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	2334      	movs	r3, #52	@ 0x34
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f004 feab 	bl	8005414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	0018      	movs	r0, r3
 80006c2:	2310      	movs	r3, #16
 80006c4:	001a      	movs	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f004 fea4 	bl	8005414 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f003 f941 	bl	8003958 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2240      	movs	r2, #64	@ 0x40
 80006ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 f979 	bl	80039f0 <HAL_RCC_OscConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000702:	f000 fbc1 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f003 fc74 	bl	8004010 <HAL_RCC_ClockConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800072c:	f000 fbac 	bl	8000e88 <Error_Handler>
  }
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b013      	add	sp, #76	@ 0x4c
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	0018      	movs	r0, r3
 8000742:	230c      	movs	r3, #12
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f004 fe64 	bl	8005414 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074c:	4b3c      	ldr	r3, [pc, #240]	@ (8000840 <MX_ADC1_Init+0x108>)
 800074e:	4a3d      	ldr	r2, [pc, #244]	@ (8000844 <MX_ADC1_Init+0x10c>)
 8000750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000752:	4b3b      	ldr	r3, [pc, #236]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	05d2      	lsls	r2, r2, #23
 8000758:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075a:	4b39      	ldr	r3, [pc, #228]	@ (8000840 <MX_ADC1_Init+0x108>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000766:	4b36      	ldr	r3, [pc, #216]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	0392      	lsls	r2, r2, #14
 800076c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800076e:	4b34      	ldr	r3, [pc, #208]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000770:	2208      	movs	r2, #8
 8000772:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000774:	4b32      	ldr	r3, [pc, #200]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000776:	2200      	movs	r2, #0
 8000778:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800077a:	4b31      	ldr	r3, [pc, #196]	@ (8000840 <MX_ADC1_Init+0x108>)
 800077c:	2200      	movs	r2, #0
 800077e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000780:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000782:	2201      	movs	r2, #1
 8000784:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000786:	4b2e      	ldr	r3, [pc, #184]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000788:	2203      	movs	r2, #3
 800078a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <MX_ADC1_Init+0x108>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000792:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000798:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <MX_ADC1_Init+0x108>)
 800079a:	222c      	movs	r2, #44	@ 0x2c
 800079c:	2100      	movs	r1, #0
 800079e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007b4:	223c      	movs	r2, #60	@ 0x3c
 80007b6:	2100      	movs	r1, #0
 80007b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007bc:	2200      	movs	r2, #0
 80007be:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 f99e 	bl	8001b04 <HAL_ADC_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 fb5c 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000848 <MX_ADC1_Init+0x110>)
 80007d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_ADC1_Init+0x108>)
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fbd9 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80007f2:	f000 fb49 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4a14      	ldr	r2, [pc, #80]	@ (800084c <MX_ADC1_Init+0x114>)
 80007fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2204      	movs	r2, #4
 8000800:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fbc9 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000812:	f000 fb39 	bl	8000e88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4a0d      	ldr	r2, [pc, #52]	@ (8000850 <MX_ADC1_Init+0x118>)
 800081a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2208      	movs	r2, #8
 8000820:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_ADC1_Init+0x108>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f001 fbb9 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000832:	f000 fb29 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b004      	add	sp, #16
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000078 	.word	0x20000078
 8000844:	40012400 	.word	0x40012400
 8000848:	14000020 	.word	0x14000020
 800084c:	18000040 	.word	0x18000040
 8000850:	1c000080 	.word	0x1c000080

08000854 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <MX_I2C2_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300617;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <MX_I2C2_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fb5b 	bl	8002f4c <HAL_I2C_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 faf5 	bl	8000e88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 ffc0 	bl	8003828 <HAL_I2CEx_ConfigAnalogFilter>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 faec 	bl	8000e88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f003 f803 	bl	80038c0 <HAL_I2CEx_ConfigDigitalFilter>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fae3 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000138 	.word	0x20000138
 80008cc:	40005800 	.word	0x40005800
 80008d0:	00300617 	.word	0x00300617

080008d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_SPI2_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_SPI2_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_SPI2_Init+0x74>)
 80008e0:	2282      	movs	r2, #130	@ 0x82
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_SPI2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_SPI2_Init+0x74>)
 80008ee:	22e0      	movs	r2, #224	@ 0xe0
 80008f0:	00d2      	lsls	r2, r2, #3
 80008f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_SPI2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_SPI2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_SPI2_Init+0x74>)
 8000902:	2280      	movs	r2, #128	@ 0x80
 8000904:	0092      	lsls	r2, r2, #2
 8000906:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_SPI2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_SPI2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_SPI2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_SPI2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_SPI2_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_SPI2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_SPI2_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000932:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <MX_SPI2_Init+0x74>)
 8000934:	0018      	movs	r0, r3
 8000936:	f003 fd15 	bl	8004364 <HAL_SPI_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 faa3 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000018c 	.word	0x2000018c
 800094c:	40003800 	.word	0x40003800

08000950 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b08d      	sub	sp, #52	@ 0x34
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000956:	240c      	movs	r4, #12
 8000958:	193b      	adds	r3, r7, r4
 800095a:	0018      	movs	r0, r3
 800095c:	2324      	movs	r3, #36	@ 0x24
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f004 fd57 	bl	8005414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	003b      	movs	r3, r7
 8000968:	0018      	movs	r0, r3
 800096a:	230c      	movs	r3, #12
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f004 fd50 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 8000976:	4a26      	ldr	r2, [pc, #152]	@ (8000a10 <MX_TIM3_Init+0xc0>)
 8000978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 8000988:	22ff      	movs	r2, #255	@ 0xff
 800098a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000998:	0021      	movs	r1, r4
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2203      	movs	r2, #3
 800099e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2202      	movs	r2, #2
 80009a4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2201      	movs	r2, #1
 80009aa:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2202      	movs	r2, #2
 80009bc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f003 fd7c 	bl	80044d4 <HAL_TIM_Encoder_Init>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009e0:	f000 fa52 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	003b      	movs	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ea:	003b      	movs	r3, r7
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f0:	003a      	movs	r2, r7
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_TIM3_Init+0xbc>)
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 ffc0 	bl	800497c <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a00:	f000 fa42 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b00d      	add	sp, #52	@ 0x34
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	200001f0 	.word	0x200001f0
 8000a10:	40000400 	.word	0x40000400

08000a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a1a:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <MX_USART2_UART_Init+0x64>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a20:	22e1      	movs	r2, #225	@ 0xe1
 8000a22:	0252      	lsls	r2, r2, #9
 8000a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x60>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f004 f80c 	bl	8004a7c <HAL_UART_Init>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 fa0e 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	2000023c 	.word	0x2000023c
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_DMA_Init+0x38>)
 8000a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f001 fe16 	bl	80026d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa4:	2009      	movs	r0, #9
 8000aa6:	f001 fe28 	bl	80026fa <HAL_NVIC_EnableIRQ>

}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	240c      	movs	r4, #12
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 fca3 	bl	8005414 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b42      	ldr	r3, [pc, #264]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ada:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aea:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af2:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b02:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000b04:	2104      	movs	r1, #4
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0a:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <MX_GPIO_Init+0x120>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0e:	2204      	movs	r2, #4
 8000b10:	4013      	ands	r3, r2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b16:	2381      	movs	r3, #129	@ 0x81
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4830      	ldr	r0, [pc, #192]	@ (8000bdc <MX_GPIO_Init+0x124>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	0019      	movs	r1, r3
 8000b20:	f002 f9db 	bl	8002eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000b24:	492e      	ldr	r1, [pc, #184]	@ (8000be0 <MX_GPIO_Init+0x128>)
 8000b26:	23a0      	movs	r3, #160	@ 0xa0
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f002 f9d4 	bl	8002eda <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b32:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <MX_GPIO_Init+0x12c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	@ 0x40
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 f9ce 	bl	8002eda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2281      	movs	r2, #129	@ 0x81
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2201      	movs	r2, #1
 8000b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <MX_GPIO_Init+0x124>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0010      	movs	r0, r2
 8000b60:	f002 f83a 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	4a1e      	ldr	r2, [pc, #120]	@ (8000be0 <MX_GPIO_Init+0x128>)
 8000b68:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	193a      	adds	r2, r7, r4
 8000b7e:	23a0      	movs	r3, #160	@ 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f002 f827 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2240      	movs	r2, #64	@ 0x40
 8000b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2201      	movs	r2, #1
 8000b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <MX_GPIO_Init+0x12c>)
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	0010      	movs	r0, r2
 8000baa:	f002 f815 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bae:	0021      	movs	r1, r4
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2288      	movs	r2, #136	@ 0x88
 8000bba:	0352      	lsls	r2, r2, #13
 8000bbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <MX_GPIO_Init+0x124>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f002 f804 	bl	8002bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b009      	add	sp, #36	@ 0x24
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	50000400 	.word	0x50000400
 8000be0:	00008713 	.word	0x00008713
 8000be4:	50000800 	.word	0x50000800

08000be8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	encoder_val = __HAL_TIM_GET_COUNTER(htim);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b02      	ldr	r3, [pc, #8]	@ (8000c04 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200002e8 	.word	0x200002e8

08000c08 <screen0>:

void screen0()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af02      	add	r7, sp, #8
	  ssd1306_Fill(Black);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f974 	bl	8000efc <ssd1306_Fill>
	  ssd1306_SetCursor(2, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2002      	movs	r0, #2
 8000c18:	f000 faf0 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Help Menu (1/2): ", fontsize, fontcolor);
 8000c1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <screen0+0x98>)
 8000c1e:	4821      	ldr	r0, [pc, #132]	@ (8000ca4 <screen0+0x9c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	6819      	ldr	r1, [r3, #0]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f000 fabb 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 12);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 fae3 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Twist encoder knob", fontsize, fontcolor);
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <screen0+0x98>)
 8000c38:	481b      	ldr	r0, [pc, #108]	@ (8000ca8 <screen0+0xa0>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	6819      	ldr	r1, [r3, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f000 faae 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 24);
 8000c48:	2118      	movs	r1, #24
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 fad6 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("to navigate this", fontsize, fontcolor);
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <screen0+0x98>)
 8000c52:	4816      	ldr	r0, [pc, #88]	@ (8000cac <screen0+0xa4>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	6819      	ldr	r1, [r3, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f000 faa1 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,36);
 8000c62:	2124      	movs	r1, #36	@ 0x24
 8000c64:	2002      	movs	r0, #2
 8000c66:	f000 fac9 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("device's different", fontsize, fontcolor);
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <screen0+0x98>)
 8000c6c:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <screen0+0xa8>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	9200      	str	r2, [sp, #0]
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f000 fa94 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,48);
 8000c7c:	2130      	movs	r1, #48	@ 0x30
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f000 fabc 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("functionalities", fontsize, fontcolor);
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <screen0+0x98>)
 8000c86:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <screen0+0xac>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	9200      	str	r2, [sp, #0]
 8000c8c:	6819      	ldr	r1, [r3, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f000 fa87 	bl	80011a4 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8000c96:	f000 f94b 	bl	8000f30 <ssd1306_UpdateScreen>
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	080065c0 	.word	0x080065c0
 8000ca4:	08005d48 	.word	0x08005d48
 8000ca8:	08005d5c 	.word	0x08005d5c
 8000cac:	08005d70 	.word	0x08005d70
 8000cb0:	08005d84 	.word	0x08005d84
 8000cb4:	08005d98 	.word	0x08005d98

08000cb8 <screen1>:

void screen1()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af02      	add	r7, sp, #8
	  ssd1306_Fill(Black);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f91c 	bl	8000efc <ssd1306_Fill>
	  ssd1306_SetCursor(2, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f000 fa98 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Help Menu (2/2): ", fontsize, fontcolor);
 8000ccc:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <screen1+0x98>)
 8000cce:	4821      	ldr	r0, [pc, #132]	@ (8000d54 <screen1+0x9c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f000 fa63 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 12);
 8000cde:	210c      	movs	r1, #12
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 fa8b 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("The encoder knob", fontsize, fontcolor);
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <screen1+0x98>)
 8000ce8:	481b      	ldr	r0, [pc, #108]	@ (8000d58 <screen1+0xa0>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	9200      	str	r2, [sp, #0]
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f000 fa56 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 24);
 8000cf8:	2118      	movs	r1, #24
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f000 fa7e 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("can be pressed to", fontsize, fontcolor);
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <screen1+0x98>)
 8000d02:	4816      	ldr	r0, [pc, #88]	@ (8000d5c <screen1+0xa4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	6819      	ldr	r1, [r3, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f000 fa49 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,36);
 8000d12:	2124      	movs	r1, #36	@ 0x24
 8000d14:	2002      	movs	r0, #2
 8000d16:	f000 fa71 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("select the current", fontsize, fontcolor);
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <screen1+0x98>)
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <screen1+0xa8>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	9200      	str	r2, [sp, #0]
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f000 fa3c 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,48);
 8000d2c:	2130      	movs	r1, #48	@ 0x30
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 fa64 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("functionality", fontsize, fontcolor);
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <screen1+0x98>)
 8000d36:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <screen1+0xac>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f000 fa2f 	bl	80011a4 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8000d46:	f000 f8f3 	bl	8000f30 <ssd1306_UpdateScreen>
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	080065c0 	.word	0x080065c0
 8000d54:	08005da8 	.word	0x08005da8
 8000d58:	08005dbc 	.word	0x08005dbc
 8000d5c:	08005dd0 	.word	0x08005dd0
 8000d60:	08005de4 	.word	0x08005de4
 8000d64:	08005df8 	.word	0x08005df8

08000d68 <screen2>:


void screen2()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af02      	add	r7, sp, #8
	  ssd1306_Fill(Black);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f8c4 	bl	8000efc <ssd1306_Fill>
	  ssd1306_SetCursor(2, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2002      	movs	r0, #2
 8000d78:	f000 fa40 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Lab 2 Group 9", fontsize, fontcolor);
 8000d7c:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <screen2+0xf0>)
 8000d7e:	4837      	ldr	r0, [pc, #220]	@ (8000e5c <screen2+0xf4>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	9200      	str	r2, [sp, #0]
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f000 fa0b 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 12);
 8000d8e:	210c      	movs	r1, #12
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 fa33 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Hello From ", fontsize, fontcolor);
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <screen2+0xf0>)
 8000d98:	4831      	ldr	r0, [pc, #196]	@ (8000e60 <screen2+0xf8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	9200      	str	r2, [sp, #0]
 8000d9e:	6819      	ldr	r1, [r3, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f000 f9fe 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(2, 24);
 8000da8:	2118      	movs	r1, #24
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fa26 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("STM32G050F6 :P ", fontsize, fontcolor);
 8000db0:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <screen2+0xf0>)
 8000db2:	482c      	ldr	r0, [pc, #176]	@ (8000e64 <screen2+0xfc>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f000 f9f1 	bl	80011a4 <ssd1306_WriteString>

	  snprintf((char *)encoder_char, sizeof(encoder_char), "%2u", encoder_val); // Cast char* type to change encoder_char
 8000dc2:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <screen2+0x100>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4a29      	ldr	r2, [pc, #164]	@ (8000e6c <screen2+0x104>)
 8000dc8:	4829      	ldr	r0, [pc, #164]	@ (8000e70 <screen2+0x108>)
 8000dca:	2104      	movs	r1, #4
 8000dcc:	f004 faee 	bl	80053ac <sniprintf>

	  ssd1306_SetCursor(2,36);
 8000dd0:	2124      	movs	r1, #36	@ 0x24
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 fa12 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Encoder: ", fontsize, fontcolor);
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <screen2+0xf0>)
 8000dda:	4826      	ldr	r0, [pc, #152]	@ (8000e74 <screen2+0x10c>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	6819      	ldr	r1, [r3, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f000 f9dd 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(92,36);
 8000dea:	2124      	movs	r1, #36	@ 0x24
 8000dec:	205c      	movs	r0, #92	@ 0x5c
 8000dee:	f000 fa05 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString((char *)encoder_char, fontsize, fontcolor); // Cast char* type to change encoder_char
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <screen2+0xf0>)
 8000df4:	481e      	ldr	r0, [pc, #120]	@ (8000e70 <screen2+0x108>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f000 f9d0 	bl	80011a4 <ssd1306_WriteString>

	  snprintf(button_char, sizeof(button_char), "%d", !button_val);
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <screen2+0x110>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	425a      	negs	r2, r3
 8000e0a:	4153      	adcs	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <screen2+0x114>)
 8000e10:	481b      	ldr	r0, [pc, #108]	@ (8000e80 <screen2+0x118>)
 8000e12:	2104      	movs	r1, #4
 8000e14:	f004 faca 	bl	80053ac <sniprintf>

	  ssd1306_SetCursor(2,48);
 8000e18:	2130      	movs	r1, #48	@ 0x30
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f000 f9ee 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString("Button: ", fontsize, fontcolor);
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <screen2+0xf0>)
 8000e22:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <screen2+0x11c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	9200      	str	r2, [sp, #0]
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f000 f9b9 	bl	80011a4 <ssd1306_WriteString>
	  ssd1306_SetCursor(120,48);
 8000e32:	2130      	movs	r1, #48	@ 0x30
 8000e34:	2078      	movs	r0, #120	@ 0x78
 8000e36:	f000 f9e1 	bl	80011fc <ssd1306_SetCursor>
	  ssd1306_WriteString(button_char, fontsize, fontcolor);
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <screen2+0xf0>)
 8000e3c:	4810      	ldr	r0, [pc, #64]	@ (8000e80 <screen2+0x118>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	9200      	str	r2, [sp, #0]
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f000 f9ac 	bl	80011a4 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 8000e4c:	f000 f870 	bl	8000f30 <ssd1306_UpdateScreen>
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	080065c0 	.word	0x080065c0
 8000e5c:	08005e08 	.word	0x08005e08
 8000e60:	08005e18 	.word	0x08005e18
 8000e64:	08005e24 	.word	0x08005e24
 8000e68:	200002e8 	.word	0x200002e8
 8000e6c:	08005e34 	.word	0x08005e34
 8000e70:	200002e4 	.word	0x200002e4
 8000e74:	08005e38 	.word	0x08005e38
 8000e78:	200002f0 	.word	0x200002f0
 8000e7c:	08005e44 	.word	0x08005e44
 8000e80:	200002ec 	.word	0x200002ec
 8000e84:	08005e48 	.word	0x08005e48

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <ssd1306_WriteCommand+0x30>)
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	425b      	negs	r3, r3
 8000ea6:	9302      	str	r3, [sp, #8]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2178      	movs	r1, #120	@ 0x78
 8000eb6:	f002 f8ef 	bl	8003098 <HAL_I2C_Mem_Write>
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20000138 	.word	0x20000138

08000ec8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	4808      	ldr	r0, [pc, #32]	@ (8000ef8 <ssd1306_WriteData+0x30>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4252      	negs	r2, r2
 8000edc:	9202      	str	r2, [sp, #8]
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	2240      	movs	r2, #64	@ 0x40
 8000ee8:	2178      	movs	r1, #120	@ 0x78
 8000eea:	f002 f8d5 	bl	8003098 <HAL_I2C_Mem_Write>
}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	20000138 	.word	0x20000138

08000efc <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	0002      	movs	r2, r0
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <ssd1306_Fill+0x18>
 8000f10:	2300      	movs	r3, #0
 8000f12:	e000      	b.n	8000f16 <ssd1306_Fill+0x1a>
 8000f14:	23ff      	movs	r3, #255	@ 0xff
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <ssd1306_Fill+0x30>)
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	f004 fa79 	bl	8005414 <memset>
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	200002f4 	.word	0x200002f4

08000f30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e01a      	b.n	8000f74 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3b50      	subs	r3, #80	@ 0x50
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff ffa4 	bl	8000e94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ffa1 	bl	8000e94 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f52:	2010      	movs	r0, #16
 8000f54:	f7ff ff9e 	bl	8000e94 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	01da      	lsls	r2, r3, #7
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <ssd1306_UpdateScreen+0x58>)
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffaf 	bl	8000ec8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	3201      	adds	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d9e0      	bls.n	8000f3e <ssd1306_UpdateScreen+0xe>
    }
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	200002f4 	.word	0x200002f4

08000f8c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0004      	movs	r4, r0
 8000f94:	0008      	movs	r0, r1
 8000f96:	0011      	movs	r1, r2
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	1c22      	adds	r2, r4, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	1c02      	adds	r2, r0, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	1d7b      	adds	r3, r7, #5
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db47      	blt.n	8001044 <ssd1306_DrawPixel+0xb8>
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fba:	d843      	bhi.n	8001044 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000fbc:	1d7b      	adds	r3, r7, #5
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d11e      	bne.n	8001002 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781a      	ldrb	r2, [r3, #0]
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	b2d8      	uxtb	r0, r3
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	01db      	lsls	r3, r3, #7
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <ssd1306_DrawPixel+0xc0>)
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	b25a      	sxtb	r2, r3
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4099      	lsls	r1, r3
 8000fe8:	000b      	movs	r3, r1
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b259      	sxtb	r1, r3
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	01db      	lsls	r3, r3, #7
 8000ff8:	18d3      	adds	r3, r2, r3
 8000ffa:	b2c9      	uxtb	r1, r1
 8000ffc:	4a13      	ldr	r2, [pc, #76]	@ (800104c <ssd1306_DrawPixel+0xc0>)
 8000ffe:	54d1      	strb	r1, [r2, r3]
 8001000:	e021      	b.n	8001046 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	1dbb      	adds	r3, r7, #6
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	b2d8      	uxtb	r0, r3
 800100e:	0003      	movs	r3, r0
 8001010:	01db      	lsls	r3, r3, #7
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <ssd1306_DrawPixel+0xc0>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	1dba      	adds	r2, r7, #6
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	2107      	movs	r1, #7
 8001020:	400a      	ands	r2, r1
 8001022:	2101      	movs	r1, #1
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	b252      	sxtb	r2, r2
 800102a:	43d2      	mvns	r2, r2
 800102c:	b252      	sxtb	r2, r2
 800102e:	4013      	ands	r3, r2
 8001030:	b259      	sxtb	r1, r3
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	0003      	movs	r3, r0
 8001038:	01db      	lsls	r3, r3, #7
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	b2c9      	uxtb	r1, r1
 800103e:	4a03      	ldr	r2, [pc, #12]	@ (800104c <ssd1306_DrawPixel+0xc0>)
 8001040:	54d1      	strb	r1, [r2, r3]
 8001042:	e000      	b.n	8001046 <ssd1306_DrawPixel+0xba>
        return;
 8001044:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001046:	46bd      	mov	sp, r7
 8001048:	b003      	add	sp, #12
 800104a:	bd90      	pop	{r4, r7, pc}
 800104c:	200002f4 	.word	0x200002f4

08001050 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	0004      	movs	r4, r0
 8001058:	0038      	movs	r0, r7
 800105a:	6001      	str	r1, [r0, #0]
 800105c:	6042      	str	r2, [r0, #4]
 800105e:	6083      	str	r3, [r0, #8]
 8001060:	210f      	movs	r1, #15
 8001062:	187b      	adds	r3, r7, r1
 8001064:	1c22      	adds	r2, r4, #0
 8001066:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001068:	000a      	movs	r2, r1
 800106a:	18bb      	adds	r3, r7, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b1f      	cmp	r3, #31
 8001070:	d903      	bls.n	800107a <ssd1306_WriteChar+0x2a>
 8001072:	18bb      	adds	r3, r7, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b7e      	cmp	r3, #126	@ 0x7e
 8001078:	d901      	bls.n	800107e <ssd1306_WriteChar+0x2e>
        return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e08b      	b.n	8001196 <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800107e:	003b      	movs	r3, r7
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <ssd1306_WriteChar+0x48>
 8001086:	003b      	movs	r3, r7
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3b20      	subs	r3, #32
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	e001      	b.n	800109c <ssd1306_WriteChar+0x4c>
 8001098:	003b      	movs	r3, r7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2117      	movs	r1, #23
 800109e:	187a      	adds	r2, r7, r1
 80010a0:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80010a2:	4b3f      	ldr	r3, [pc, #252]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	001a      	movs	r2, r3
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	18d3      	adds	r3, r2, r3
 80010ae:	2b80      	cmp	r3, #128	@ 0x80
 80010b0:	dc07      	bgt.n	80010c2 <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 80010b4:	885b      	ldrh	r3, [r3, #2]
 80010b6:	001a      	movs	r2, r3
 80010b8:	003b      	movs	r3, r7
 80010ba:	785b      	ldrb	r3, [r3, #1]
 80010bc:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80010be:	2b40      	cmp	r3, #64	@ 0x40
 80010c0:	dd01      	ble.n	80010c6 <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e067      	b.n	8001196 <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e051      	b.n	8001170 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 80010cc:	003b      	movs	r3, r7
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	230f      	movs	r3, #15
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3b20      	subs	r3, #32
 80010d8:	0039      	movs	r1, r7
 80010da:	7849      	ldrb	r1, [r1, #1]
 80010dc:	434b      	muls	r3, r1
 80010de:	0019      	movs	r1, r3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	18cb      	adds	r3, r1, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	e035      	b.n	800115e <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	409a      	lsls	r2, r3
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	4013      	ands	r3, r2
 80010fe:	d014      	beq.n	800112a <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	18d3      	adds	r3, r2, r3
 800110c:	b2d8      	uxtb	r0, r3
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 8001110:	885b      	ldrh	r3, [r3, #2]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	2330      	movs	r3, #48	@ 0x30
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	001a      	movs	r2, r3
 8001124:	f7ff ff32 	bl	8000f8c <ssd1306_DrawPixel>
 8001128:	e016      	b.n	8001158 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	b2d8      	uxtb	r0, r3
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 800113a:	885b      	ldrh	r3, [r3, #2]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	18d3      	adds	r3, r2, r3
 8001144:	b2d9      	uxtb	r1, r3
 8001146:	2330      	movs	r3, #48	@ 0x30
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	425a      	negs	r2, r3
 800114e:	4153      	adcs	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	001a      	movs	r2, r3
 8001154:	f7ff ff1a 	bl	8000f8c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	3301      	adds	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	2317      	movs	r3, #23
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3c3      	bcc.n	80010f2 <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	003b      	movs	r3, r7
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	001a      	movs	r2, r3
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	4293      	cmp	r3, r2
 800117a:	d3a7      	bcc.n	80010cc <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	2317      	movs	r3, #23
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <ssd1306_WriteChar+0x150>)
 800118e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	781b      	ldrb	r3, [r3, #0]
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b009      	add	sp, #36	@ 0x24
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	200006f4 	.word	0x200006f4

080011a4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	0038      	movs	r0, r7
 80011ae:	6001      	str	r1, [r0, #0]
 80011b0:	6042      	str	r2, [r0, #4]
 80011b2:	6083      	str	r3, [r0, #8]
    while (*str) {
 80011b4:	e017      	b.n	80011e6 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	7818      	ldrb	r0, [r3, #0]
 80011ba:	003b      	movs	r3, r7
 80011bc:	2218      	movs	r2, #24
 80011be:	18ba      	adds	r2, r7, r2
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	9200      	str	r2, [sp, #0]
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f7ff ff41 	bl	8001050 <ssd1306_WriteChar>
 80011ce:	0003      	movs	r3, r0
 80011d0:	001a      	movs	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d002      	beq.n	80011e0 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	e008      	b.n	80011f2 <ssd1306_WriteString+0x4e>
        }
        str++;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1e3      	bne.n	80011b6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	781b      	ldrb	r3, [r3, #0]
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	1dbb      	adds	r3, r7, #6
 800120a:	1c0a      	adds	r2, r1, #0
 800120c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <ssd1306_SetCursor+0x30>)
 8001216:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001218:	1dbb      	adds	r3, r7, #6
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b03      	ldr	r3, [pc, #12]	@ (800122c <ssd1306_SetCursor+0x30>)
 8001220:	805a      	strh	r2, [r3, #2]
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	200006f4 	.word	0x200006f4

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_MspInit+0x44>)
 8001238:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_MspInit+0x44>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <HAL_MspInit+0x44>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <HAL_MspInit+0x44>)
 8001250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <HAL_MspInit+0x44>)
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	0549      	lsls	r1, r1, #21
 8001258:	430a      	orrs	r2, r1
 800125a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_MspInit+0x44>)
 800125e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	055b      	lsls	r3, r3, #21
 8001264:	4013      	ands	r3, r2
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b08b      	sub	sp, #44	@ 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	2414      	movs	r4, #20
 8001282:	193b      	adds	r3, r7, r4
 8001284:	0018      	movs	r0, r3
 8001286:	2314      	movs	r3, #20
 8001288:	001a      	movs	r2, r3
 800128a:	2100      	movs	r1, #0
 800128c:	f004 f8c2 	bl	8005414 <memset>
  if(hadc->Instance==ADC1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2d      	ldr	r2, [pc, #180]	@ (800134c <HAL_ADC_MspInit+0xd4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d154      	bne.n	8001344 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800129a:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <HAL_ADC_MspInit+0xd8>)
 800129c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800129e:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <HAL_ADC_MspInit+0xd8>)
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	0349      	lsls	r1, r1, #13
 80012a4:	430a      	orrs	r2, r1
 80012a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_ADC_MspInit+0xd8>)
 80012aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	035b      	lsls	r3, r3, #13
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_ADC_MspInit+0xd8>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_ADC_MspInit+0xd8>)
 80012bc:	2101      	movs	r1, #1
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_ADC_MspInit+0xd8>)
 80012c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c6:	2201      	movs	r2, #1
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	22e0      	movs	r2, #224	@ 0xe0
 80012d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	2203      	movs	r2, #3
 80012d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	193a      	adds	r2, r7, r4
 80012e2:	23a0      	movs	r3, #160	@ 0xa0
 80012e4:	05db      	lsls	r3, r3, #23
 80012e6:	0011      	movs	r1, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 fc75 	bl	8002bd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 80012f0:	4a19      	ldr	r2, [pc, #100]	@ (8001358 <HAL_ADC_MspInit+0xe0>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	0052      	lsls	r2, r2, #1
 8001312:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 800131e:	2220      	movs	r2, #32
 8001320:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fa02 	bl	8002734 <HAL_DMA_Init>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d001      	beq.n	8001338 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001334:	f7ff fda8 	bl	8000e88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 800133c:	651a      	str	r2, [r3, #80]	@ 0x50
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_ADC_MspInit+0xdc>)
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b00b      	add	sp, #44	@ 0x2c
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	40012400 	.word	0x40012400
 8001350:	40021000 	.word	0x40021000
 8001354:	200000dc 	.word	0x200000dc
 8001358:	40020008 	.word	0x40020008

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08b      	sub	sp, #44	@ 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	2414      	movs	r4, #20
 8001366:	193b      	adds	r3, r7, r4
 8001368:	0018      	movs	r0, r3
 800136a:	2314      	movs	r3, #20
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f004 f850 	bl	8005414 <memset>
  if(hi2c->Instance==I2C2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <HAL_I2C_MspInit+0x90>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d131      	bne.n	80013e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_I2C_MspInit+0x94>)
 8001380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_I2C_MspInit+0x94>)
 8001384:	2101      	movs	r1, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	635a      	str	r2, [r3, #52]	@ 0x34
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_I2C_MspInit+0x94>)
 800138c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001396:	193b      	adds	r3, r7, r4
 8001398:	22c0      	movs	r2, #192	@ 0xc0
 800139a:	0152      	lsls	r2, r2, #5
 800139c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	0021      	movs	r1, r4
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2212      	movs	r2, #18
 80013a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2206      	movs	r2, #6
 80013b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	187a      	adds	r2, r7, r1
 80013ba:	23a0      	movs	r3, #160	@ 0xa0
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 fc09 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_I2C_MspInit+0x94>)
 80013c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_I2C_MspInit+0x94>)
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	03c9      	lsls	r1, r1, #15
 80013d0:	430a      	orrs	r2, r1
 80013d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_I2C_MspInit+0x94>)
 80013d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	03db      	lsls	r3, r3, #15
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b00b      	add	sp, #44	@ 0x2c
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	40005800 	.word	0x40005800
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	@ 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	2414      	movs	r4, #20
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	0018      	movs	r0, r3
 8001402:	2314      	movs	r3, #20
 8001404:	001a      	movs	r2, r3
 8001406:	2100      	movs	r1, #0
 8001408:	f004 f804 	bl	8005414 <memset>
  if(hspi->Instance==SPI2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a26      	ldr	r2, [pc, #152]	@ (80014ac <HAL_SPI_MspInit+0xb8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d145      	bne.n	80014a2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <HAL_SPI_MspInit+0xbc>)
 8001418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800141a:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <HAL_SPI_MspInit+0xbc>)
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	01c9      	lsls	r1, r1, #7
 8001420:	430a      	orrs	r2, r1
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <HAL_SPI_MspInit+0xbc>)
 8001426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <HAL_SPI_MspInit+0xbc>)
 8001434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_SPI_MspInit+0xbc>)
 8001438:	2102      	movs	r1, #2
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <HAL_SPI_MspInit+0xbc>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800144a:	193b      	adds	r3, r7, r4
 800144c:	2240      	movs	r2, #64	@ 0x40
 800144e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2202      	movs	r2, #2
 8001454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	193b      	adds	r3, r7, r4
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8001462:	193b      	adds	r3, r7, r4
 8001464:	2204      	movs	r2, #4
 8001466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	193b      	adds	r3, r7, r4
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <HAL_SPI_MspInit+0xc0>)
 800146c:	0019      	movs	r1, r3
 800146e:	0010      	movs	r0, r2
 8001470:	f001 fbb2 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001474:	0021      	movs	r1, r4
 8001476:	187b      	adds	r3, r7, r1
 8001478:	22c0      	movs	r2, #192	@ 0xc0
 800147a:	0052      	lsls	r2, r2, #1
 800147c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2202      	movs	r2, #2
 8001482:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2201      	movs	r2, #1
 8001494:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	187b      	adds	r3, r7, r1
 8001498:	4a06      	ldr	r2, [pc, #24]	@ (80014b4 <HAL_SPI_MspInit+0xc0>)
 800149a:	0019      	movs	r1, r3
 800149c:	0010      	movs	r0, r2
 800149e:	f001 fb9b 	bl	8002bd8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b00b      	add	sp, #44	@ 0x2c
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	40003800 	.word	0x40003800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	50000400 	.word	0x50000400

080014b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	@ 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	2414      	movs	r4, #20
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f003 ffa2 	bl	8005414 <memset>
  if(htim_encoder->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <HAL_TIM_Encoder_MspInit+0x98>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d135      	bne.n	8001546 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014e0:	2102      	movs	r1, #2
 80014e2:	430a      	orrs	r2, r1
 80014e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x9c>)
 80014f8:	2102      	movs	r1, #2
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150a:	0021      	movs	r1, r4
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2230      	movs	r2, #48	@ 0x30
 8001510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2202      	movs	r2, #2
 8001516:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2201      	movs	r2, #1
 8001528:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	187b      	adds	r3, r7, r1
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_TIM_Encoder_MspInit+0xa0>)
 800152e:	0019      	movs	r1, r3
 8001530:	0010      	movs	r0, r2
 8001532:	f001 fb51 	bl	8002bd8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2010      	movs	r0, #16
 800153c:	f001 f8c8 	bl	80026d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001540:	2010      	movs	r0, #16
 8001542:	f001 f8da 	bl	80026fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b00b      	add	sp, #44	@ 0x2c
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	40000400 	.word	0x40000400
 8001554:	40021000 	.word	0x40021000
 8001558:	50000400 	.word	0x50000400

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	@ 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2414      	movs	r4, #20
 8001566:	193b      	adds	r3, r7, r4
 8001568:	0018      	movs	r0, r3
 800156a:	2314      	movs	r3, #20
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f003 ff50 	bl	8005414 <memset>
  if(huart->Instance==USART2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <HAL_UART_MspInit+0x8c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d130      	bne.n	80015e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <HAL_UART_MspInit+0x90>)
 8001580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_UART_MspInit+0x90>)
 8001584:	2180      	movs	r1, #128	@ 0x80
 8001586:	0289      	lsls	r1, r1, #10
 8001588:	430a      	orrs	r2, r1
 800158a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_UART_MspInit+0x90>)
 800158e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	029b      	lsls	r3, r3, #10
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_UART_MspInit+0x90>)
 800159c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_UART_MspInit+0x90>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	430a      	orrs	r2, r1
 80015a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_UART_MspInit+0x90>)
 80015a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015aa:	2201      	movs	r2, #1
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b2:	0021      	movs	r1, r4
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2202      	movs	r2, #2
 80015be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2201      	movs	r2, #1
 80015d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	187a      	adds	r2, r7, r1
 80015d4:	23a0      	movs	r3, #160	@ 0xa0
 80015d6:	05db      	lsls	r3, r3, #23
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 fafc 	bl	8002bd8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b00b      	add	sp, #44	@ 0x2c
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	e7fd      	b.n	80015f4 <NMI_Handler+0x4>

080015f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	e7fd      	b.n	80015fc <HardFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001604:	46c0      	nop			@ (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 f8ec 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <DMA1_Channel1_IRQHandler+0x14>)
 800162a:	0018      	movs	r0, r3
 800162c:	f001 f992 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	200000dc 	.word	0x200000dc

0800163c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global Interrupt.
  */
void TIM3_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <TIM3_IRQHandler+0x14>)
 8001642:	0018      	movs	r0, r3
 8001644:	f002 ffee 	bl	8004624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	200001f0 	.word	0x200001f0

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f003 fece 	bl	8005424 <__errno>
 8001688:	0003      	movs	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	2301      	movs	r3, #1
 8001690:	425b      	negs	r3, r3
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	18d2      	adds	r2, r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b006      	add	sp, #24
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20004800 	.word	0x20004800
 80016b4:	00000400 	.word	0x00000400
 80016b8:	200006fc 	.word	0x200006fc
 80016bc:	20000850 	.word	0x20000850

080016c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d0:	f7ff fff6 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016fa:	f003 fe99 	bl	8005430 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016fe:	f7fe ff4d 	bl	800059c <main>

08001702 <LoopForever>:

LoopForever:
  b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   r0, =_estack
 8001704:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001710:	08006680 	.word	0x08006680
  ldr r2, =_sbss
 8001714:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001718:	2000084c 	.word	0x2000084c

0800171c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_IRQHandler>
	...

08001720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_Init+0x3c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Init+0x3c>)
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	0049      	lsls	r1, r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	2003      	movs	r0, #3
 800173c:	f000 f810 	bl	8001760 <HAL_InitTick>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d003      	beq.n	800174c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001744:	1dfb      	adds	r3, r7, #7
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e001      	b.n	8001750 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fd70 	bl	8001230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001750:	1dfb      	adds	r3, r7, #7
 8001752:	781b      	ldrb	r3, [r3, #0]
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	230f      	movs	r3, #15
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <HAL_InitTick+0x88>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d02b      	beq.n	80017d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <HAL_InitTick+0x8c>)
 800177a:	681c      	ldr	r4, [r3, #0]
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_InitTick+0x88>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	0019      	movs	r1, r3
 8001782:	23fa      	movs	r3, #250	@ 0xfa
 8001784:	0098      	lsls	r0, r3, #2
 8001786:	f7fe fcc3 	bl	8000110 <__udivsi3>
 800178a:	0003      	movs	r3, r0
 800178c:	0019      	movs	r1, r3
 800178e:	0020      	movs	r0, r4
 8001790:	f7fe fcbe 	bl	8000110 <__udivsi3>
 8001794:	0003      	movs	r3, r0
 8001796:	0018      	movs	r0, r3
 8001798:	f000 ffbf 	bl	800271a <HAL_SYSTICK_Config>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d112      	bne.n	80017c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d80a      	bhi.n	80017bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	2301      	movs	r3, #1
 80017aa:	425b      	negs	r3, r3
 80017ac:	2200      	movs	r2, #0
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 ff8e 	bl	80026d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_InitTick+0x90>)
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e00d      	b.n	80017d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80017bc:	230f      	movs	r3, #15
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e008      	b.n	80017d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c6:	230f      	movs	r3, #15
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e003      	b.n	80017d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d0:	230f      	movs	r3, #15
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017d8:	230f      	movs	r3, #15
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b005      	add	sp, #20
 80017e4:	bd90      	pop	{r4, r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_IncTick+0x1c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	001a      	movs	r2, r3
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_IncTick+0x20>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	18d2      	adds	r2, r2, r3
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_IncTick+0x20>)
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	20000008 	.word	0x20000008
 8001814:	20000700 	.word	0x20000700

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b02      	ldr	r3, [pc, #8]	@ (8001828 <HAL_GetTick+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	20000700 	.word	0x20000700

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fff0 	bl	8001818 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	001a      	movs	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	189b      	adds	r3, r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	f7ff ffe0 	bl	8001818 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	20000008 	.word	0x20000008

08001874 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001884:	401a      	ands	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	fe3fffff 	.word	0xfe3fffff

0800189c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	23e0      	movs	r3, #224	@ 0xe0
 80018aa:	045b      	lsls	r3, r3, #17
 80018ac:	4013      	ands	r3, r2
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	2104      	movs	r1, #4
 80018ca:	400a      	ands	r2, r1
 80018cc:	2107      	movs	r1, #7
 80018ce:	4091      	lsls	r1, r2
 80018d0:	000a      	movs	r2, r1
 80018d2:	43d2      	mvns	r2, r2
 80018d4:	401a      	ands	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2104      	movs	r1, #4
 80018da:	400b      	ands	r3, r1
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4099      	lsls	r1, r3
 80018e0:	000b      	movs	r3, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b004      	add	sp, #16
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	2104      	movs	r1, #4
 8001902:	400a      	ands	r2, r1
 8001904:	2107      	movs	r1, #7
 8001906:	4091      	lsls	r1, r2
 8001908:	000a      	movs	r2, r1
 800190a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2104      	movs	r1, #4
 8001910:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001912:	40da      	lsrs	r2, r3
 8001914:	0013      	movs	r3, r2
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}

0800191e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	23c0      	movs	r3, #192	@ 0xc0
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4013      	ands	r3, r2
 8001930:	d101      	bne.n	8001936 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	211f      	movs	r1, #31
 8001954:	400a      	ands	r2, r1
 8001956:	210f      	movs	r1, #15
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	210f      	movs	r1, #15
 8001966:	4019      	ands	r1, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	201f      	movs	r0, #31
 800196c:	4003      	ands	r3, r0
 800196e:	4099      	lsls	r1, r3
 8001970:	000b      	movs	r3, r1
 8001972:	431a      	orrs	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	035b      	lsls	r3, r3, #13
 8001992:	0b5b      	lsrs	r3, r3, #13
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	0352      	lsls	r2, r2, #13
 80019b4:	0b52      	lsrs	r2, r2, #13
 80019b6:	43d2      	mvns	r2, r2
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	0212      	lsls	r2, r2, #8
 80019dc:	43d2      	mvns	r2, r2
 80019de:	401a      	ands	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	400b      	ands	r3, r1
 80019e8:	4904      	ldr	r1, [pc, #16]	@ (80019fc <LL_ADC_SetChannelSamplingTime+0x34>)
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	07ffff00 	.word	0x07ffff00

08001a00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2280      	movs	r2, #128	@ 0x80
 8001a12:	0552      	lsls	r2, r2, #21
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	6fffffe8 	.word	0x6fffffe8

08001a28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	401a      	ands	r2, r3
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	055b      	lsls	r3, r3, #21
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <LL_ADC_Enable+0x20>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2201      	movs	r2, #1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a68:	46c0      	nop			@ (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	7fffffe8 	.word	0x7fffffe8

08001a74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <LL_ADC_Disable+0x20>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	2202      	movs	r2, #2
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a8c:	46c0      	nop			@ (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	7fffffe8 	.word	0x7fffffe8

08001a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <LL_ADC_IsEnabled+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_ADC_IsEnabled+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <LL_ADC_REG_StartConversion+0x20>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	2204      	movs	r2, #4
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	7fffffe8 	.word	0x7fffffe8

08001ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2204      	movs	r2, #4
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	231f      	movs	r3, #31
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e17f      	b.n	8001e2a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff fb9f 	bl	8001278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2254      	movs	r2, #84	@ 0x54
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff ff6b 	bl	8001a28 <LL_ADC_IsInternalRegulatorEnabled>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d115      	bne.n	8001b82 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7ff ff50 	bl	8001a00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b60:	4bb4      	ldr	r3, [pc, #720]	@ (8001e34 <HAL_ADC_Init+0x330>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	49b4      	ldr	r1, [pc, #720]	@ (8001e38 <HAL_ADC_Init+0x334>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe fad2 	bl	8000110 <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff ff4e 	bl	8001a28 <LL_ADC_IsInternalRegulatorEnabled>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	2210      	movs	r2, #16
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ba8:	231f      	movs	r3, #31
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff ff93 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d000      	beq.n	8001bca <HAL_ADC_Init+0xc6>
 8001bc8:	e122      	b.n	8001e10 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d000      	beq.n	8001bd2 <HAL_ADC_Init+0xce>
 8001bd0:	e11e      	b.n	8001e10 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	4a99      	ldr	r2, [pc, #612]	@ (8001e3c <HAL_ADC_Init+0x338>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2202      	movs	r2, #2
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff ff56 	bl	8001a98 <LL_ADC_IsEnabled>
 8001bec:	1e03      	subs	r3, r0, #0
 8001bee:	d000      	beq.n	8001bf2 <HAL_ADC_Init+0xee>
 8001bf0:	e0ad      	b.n	8001d4e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
 8001bfa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001bfc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7e5b      	ldrb	r3, [r3, #25]
 8001c02:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c04:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7e9b      	ldrb	r3, [r3, #26]
 8001c0a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c0c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_ADC_Init+0x118>
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	e000      	b.n	8001c1e <HAL_ADC_Init+0x11a>
 8001c1c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c1e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c24:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da04      	bge.n	8001c38 <HAL_ADC_Init+0x134>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	e001      	b.n	8001c3c <HAL_ADC_Init+0x138>
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001c3c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	212c      	movs	r1, #44	@ 0x2c
 8001c42:	5c5b      	ldrb	r3, [r3, r1]
 8001c44:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c46:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2220      	movs	r2, #32
 8001c52:	5c9b      	ldrb	r3, [r3, r2]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d115      	bne.n	8001c84 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e9b      	ldrb	r3, [r3, #26]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2280      	movs	r2, #128	@ 0x80
 8001c64:	0252      	lsls	r2, r2, #9
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e00b      	b.n	8001c84 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	2220      	movs	r2, #32
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c90:	23e0      	movs	r3, #224	@ 0xe0
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a65      	ldr	r2, [pc, #404]	@ (8001e40 <HAL_ADC_Init+0x33c>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0f9b      	lsrs	r3, r3, #30
 8001cbe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223c      	movs	r2, #60	@ 0x3c
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0f9b      	lsrs	r3, r3, #30
 8001cdc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ce2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001ce8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001cee:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4a50      	ldr	r2, [pc, #320]	@ (8001e44 <HAL_ADC_Init+0x340>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	23c0      	movs	r3, #192	@ 0xc0
 8001d16:	061b      	lsls	r3, r3, #24
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d018      	beq.n	8001d4e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	05db      	lsls	r3, r3, #23
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d012      	beq.n	8001d4e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	061b      	lsls	r3, r3, #24
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d00c      	beq.n	8001d4e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d34:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_ADC_Init+0x344>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a44      	ldr	r2, [pc, #272]	@ (8001e4c <HAL_ADC_Init+0x348>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	23f0      	movs	r3, #240	@ 0xf0
 8001d44:	039b      	lsls	r3, r3, #14
 8001d46:	401a      	ands	r2, r3
 8001d48:	4b3f      	ldr	r3, [pc, #252]	@ (8001e48 <HAL_ADC_Init+0x344>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d56:	001a      	movs	r2, r3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f7ff fdac 	bl	80018b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d66:	493a      	ldr	r1, [pc, #232]	@ (8001e50 <HAL_ADC_Init+0x34c>)
 8001d68:	001a      	movs	r2, r3
 8001d6a:	f7ff fda4 	bl	80018b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2110      	movs	r1, #16
 8001d82:	4249      	negs	r1, r1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d88:	e018      	b.n	8001dbc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	039b      	lsls	r3, r3, #14
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d112      	bne.n	8001dbc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	221c      	movs	r2, #28
 8001da6:	4013      	ands	r3, r2
 8001da8:	2210      	movs	r2, #16
 8001daa:	4252      	negs	r2, r2
 8001dac:	409a      	lsls	r2, r3
 8001dae:	0011      	movs	r1, r2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fd94 	bl	80018f0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001dc8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10b      	bne.n	8001dea <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4393      	bics	r3, r2
 8001de0:	2201      	movs	r2, #1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001de8:	e01c      	b.n	8001e24 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	2212      	movs	r2, #18
 8001df0:	4393      	bics	r3, r2
 8001df2:	2210      	movs	r2, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfe:	2201      	movs	r2, #1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e0e:	e009      	b.n	8001e24 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	2210      	movs	r2, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e1c:	231f      	movs	r3, #31
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e24:	231f      	movs	r3, #31
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b008      	add	sp, #32
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	20000000 	.word	0x20000000
 8001e38:	00030d40 	.word	0x00030d40
 8001e3c:	fffffefd 	.word	0xfffffefd
 8001e40:	ffde0201 	.word	0xffde0201
 8001e44:	1ffffc02 	.word	0x1ffffc02
 8001e48:	40012708 	.word	0x40012708
 8001e4c:	ffc3ffff 	.word	0xffc3ffff
 8001e50:	07ffff04 	.word	0x07ffff04

08001e54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff fe3b 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d16c      	bne.n	8001f48 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2254      	movs	r2, #84	@ 0x54
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_Start_DMA+0x28>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e06c      	b.n	8001f56 <HAL_ADC_Start_DMA+0x102>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2254      	movs	r2, #84	@ 0x54
 8001e80:	2101      	movs	r1, #1
 8001e82:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d113      	bne.n	8001eb8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fdff 	bl	8001a98 <LL_ADC_IsEnabled>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff fde6 	bl	8001a74 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001eb8:	2517      	movs	r5, #23
 8001eba:	197c      	adds	r4, r7, r5
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 fa46 	bl	8002350 <ADC_Enable>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ec8:	002c      	movs	r4, r5
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d13e      	bne.n	8001f50 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <HAL_ADC_Start_DMA+0x10c>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2280      	movs	r2, #128	@ 0x80
 8001edc:	0052      	lsls	r2, r2, #1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eee:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <HAL_ADC_Start_DMA+0x110>)
 8001ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f68 <HAL_ADC_Start_DMA+0x114>)
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_ADC_Start_DMA+0x118>)
 8001f00:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	221c      	movs	r2, #28
 8001f08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2254      	movs	r2, #84	@ 0x54
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3340      	adds	r3, #64	@ 0x40
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	193c      	adds	r4, r7, r4
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f000 fc88 	bl	8002848 <HAL_DMA_Start_IT>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff fdbb 	bl	8001abc <LL_ADC_REG_StartConversion>
 8001f46:	e003      	b.n	8001f50 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f48:	2317      	movs	r3, #23
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b006      	add	sp, #24
 8001f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	fffff0fe 	.word	0xfffff0fe
 8001f64:	0800245d 	.word	0x0800245d
 8001f68:	08002525 	.word	0x08002525
 8001f6c:	08002543 	.word	0x08002543

08001f70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f78:	46c0      	nop			@ (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001faa:	2317      	movs	r3, #23
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2254      	movs	r2, #84	@ 0x54
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x24>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e1c0      	b.n	8002346 <HAL_ADC_ConfigChannel+0x3a6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2254      	movs	r2, #84	@ 0x54
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff fd85 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d000      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x3c>
 8001fda:	e1a3      	b.n	8002324 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x46>
 8001fe4:	e143      	b.n	800226e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d004      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ff6:	4ac1      	ldr	r2, [pc, #772]	@ (80022fc <HAL_ADC_ConfigChannel+0x35c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d108      	bne.n	800200e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0019      	movs	r1, r3
 8002006:	0010      	movs	r0, r2
 8002008:	f7ff fcba 	bl	8001980 <LL_ADC_REG_SetSequencerChAdd>
 800200c:	e0c9      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	211f      	movs	r1, #31
 8002018:	400b      	ands	r3, r1
 800201a:	210f      	movs	r1, #15
 800201c:	4099      	lsls	r1, r3
 800201e:	000b      	movs	r3, r1
 8002020:	43db      	mvns	r3, r3
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	035b      	lsls	r3, r3, #13
 800202c:	0b5b      	lsrs	r3, r3, #13
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x9c>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	221f      	movs	r2, #31
 8002038:	4013      	ands	r3, r2
 800203a:	e098      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d000      	beq.n	8002048 <HAL_ADC_ConfigChannel+0xa8>
 8002046:	e091      	b.n	800216c <HAL_ADC_ConfigChannel+0x1cc>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d000      	beq.n	8002054 <HAL_ADC_ConfigChannel+0xb4>
 8002052:	e089      	b.n	8002168 <HAL_ADC_ConfigChannel+0x1c8>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d000      	beq.n	8002060 <HAL_ADC_ConfigChannel+0xc0>
 800205e:	e081      	b.n	8002164 <HAL_ADC_ConfigChannel+0x1c4>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2208      	movs	r2, #8
 8002066:	4013      	ands	r3, r2
 8002068:	d000      	beq.n	800206c <HAL_ADC_ConfigChannel+0xcc>
 800206a:	e079      	b.n	8002160 <HAL_ADC_ConfigChannel+0x1c0>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	4013      	ands	r3, r2
 8002074:	d000      	beq.n	8002078 <HAL_ADC_ConfigChannel+0xd8>
 8002076:	e071      	b.n	800215c <HAL_ADC_ConfigChannel+0x1bc>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	4013      	ands	r3, r2
 8002080:	d000      	beq.n	8002084 <HAL_ADC_ConfigChannel+0xe4>
 8002082:	e069      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1b8>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2240      	movs	r2, #64	@ 0x40
 800208a:	4013      	ands	r3, r2
 800208c:	d000      	beq.n	8002090 <HAL_ADC_ConfigChannel+0xf0>
 800208e:	e061      	b.n	8002154 <HAL_ADC_ConfigChannel+0x1b4>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2280      	movs	r2, #128	@ 0x80
 8002096:	4013      	ands	r3, r2
 8002098:	d000      	beq.n	800209c <HAL_ADC_ConfigChannel+0xfc>
 800209a:	e059      	b.n	8002150 <HAL_ADC_ConfigChannel+0x1b0>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d151      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1ac>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d149      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1a8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	d141      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1a4>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4013      	ands	r3, r2
 80020ca:	d139      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1a0>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	4013      	ands	r3, r2
 80020d6:	d131      	bne.n	800213c <HAL_ADC_ConfigChannel+0x19c>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	019b      	lsls	r3, r3, #6
 80020e0:	4013      	ands	r3, r2
 80020e2:	d129      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x198>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	01db      	lsls	r3, r3, #7
 80020ec:	4013      	ands	r3, r2
 80020ee:	d121      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x194>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4013      	ands	r3, r2
 80020fa:	d119      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x190>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	025b      	lsls	r3, r3, #9
 8002104:	4013      	ands	r3, r2
 8002106:	d111      	bne.n	800212c <HAL_ADC_ConfigChannel+0x18c>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	d109      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x188>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	02db      	lsls	r3, r3, #11
 800211c:	4013      	ands	r3, r2
 800211e:	d001      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x184>
 8002120:	2312      	movs	r3, #18
 8002122:	e024      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002124:	2300      	movs	r3, #0
 8002126:	e022      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002128:	2311      	movs	r3, #17
 800212a:	e020      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 800212c:	2310      	movs	r3, #16
 800212e:	e01e      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002130:	230f      	movs	r3, #15
 8002132:	e01c      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002134:	230e      	movs	r3, #14
 8002136:	e01a      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002138:	230d      	movs	r3, #13
 800213a:	e018      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 800213c:	230c      	movs	r3, #12
 800213e:	e016      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002140:	230b      	movs	r3, #11
 8002142:	e014      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002144:	230a      	movs	r3, #10
 8002146:	e012      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002148:	2309      	movs	r3, #9
 800214a:	e010      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 800214c:	2308      	movs	r3, #8
 800214e:	e00e      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002150:	2307      	movs	r3, #7
 8002152:	e00c      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002154:	2306      	movs	r3, #6
 8002156:	e00a      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002158:	2305      	movs	r3, #5
 800215a:	e008      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 800215c:	2304      	movs	r3, #4
 800215e:	e006      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002160:	2303      	movs	r3, #3
 8002162:	e004      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002164:	2302      	movs	r3, #2
 8002166:	e002      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	2300      	movs	r3, #0
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	6852      	ldr	r2, [r2, #4]
 8002172:	201f      	movs	r0, #31
 8002174:	4002      	ands	r2, r0
 8002176:	4093      	lsls	r3, r2
 8002178:	000a      	movs	r2, r1
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d808      	bhi.n	80021a2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	001a      	movs	r2, r3
 800219e:	f7ff fbcf 	bl	8001940 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	001a      	movs	r2, r3
 80021b0:	f7ff fc0a 	bl	80019c8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db00      	blt.n	80021be <HAL_ADC_ConfigChannel+0x21e>
 80021bc:	e0bc      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021be:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff fb6b 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80021c6:	0003      	movs	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002304 <HAL_ADC_ConfigChannel+0x364>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d122      	bne.n	800221a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021dc:	d11d      	bne.n	800221a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	0412      	lsls	r2, r2, #16
 80021e4:	4313      	orrs	r3, r2
 80021e6:	4a46      	ldr	r2, [pc, #280]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 80021e8:	0019      	movs	r1, r3
 80021ea:	0010      	movs	r0, r2
 80021ec:	f7ff fb42 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f0:	4b45      	ldr	r3, [pc, #276]	@ (8002308 <HAL_ADC_ConfigChannel+0x368>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4945      	ldr	r1, [pc, #276]	@ (800230c <HAL_ADC_ConfigChannel+0x36c>)
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fd ff8a 	bl	8000110 <__udivsi3>
 80021fc:	0003      	movs	r3, r0
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	0013      	movs	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	189b      	adds	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800220a:	e002      	b.n	8002212 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3b01      	subs	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002218:	e08e      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HAL_ADC_ConfigChannel+0x370>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10e      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	045b      	lsls	r3, r3, #17
 800222a:	4013      	ands	r3, r2
 800222c:	d109      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	0452      	lsls	r2, r2, #17
 8002234:	4313      	orrs	r3, r2
 8002236:	4a32      	ldr	r2, [pc, #200]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 8002238:	0019      	movs	r1, r3
 800223a:	0010      	movs	r0, r2
 800223c:	f7ff fb1a 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 8002240:	e07a      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a33      	ldr	r2, [pc, #204]	@ (8002314 <HAL_ADC_ConfigChannel+0x374>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d000      	beq.n	800224e <HAL_ADC_ConfigChannel+0x2ae>
 800224c:	e074      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	03db      	lsls	r3, r3, #15
 8002254:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002256:	d000      	beq.n	800225a <HAL_ADC_ConfigChannel+0x2ba>
 8002258:	e06e      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	03d2      	lsls	r2, r2, #15
 8002260:	4313      	orrs	r3, r2
 8002262:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 8002264:	0019      	movs	r1, r3
 8002266:	0010      	movs	r0, r2
 8002268:	f7ff fb04 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 800226c:	e064      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	429a      	cmp	r2, r3
 8002278:	d004      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800227e:	4a1f      	ldr	r2, [pc, #124]	@ (80022fc <HAL_ADC_ConfigChannel+0x35c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d107      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0019      	movs	r1, r3
 800228e:	0010      	movs	r0, r2
 8002290:	f7ff fb87 	bl	80019a2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	da4d      	bge.n	8002338 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff fafc 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80022a4:	0003      	movs	r3, r0
 80022a6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a15      	ldr	r2, [pc, #84]	@ (8002304 <HAL_ADC_ConfigChannel+0x364>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d108      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <HAL_ADC_ConfigChannel+0x378>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 80022ba:	0019      	movs	r1, r3
 80022bc:	0010      	movs	r0, r2
 80022be:	f7ff fad9 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 80022c2:	e039      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_ADC_ConfigChannel+0x370>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4a12      	ldr	r2, [pc, #72]	@ (800231c <HAL_ADC_ConfigChannel+0x37c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 80022d6:	0019      	movs	r1, r3
 80022d8:	0010      	movs	r0, r2
 80022da:	f7ff facb 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 80022de:	e02b      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002314 <HAL_ADC_ConfigChannel+0x374>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d126      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <HAL_ADC_ConfigChannel+0x380>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	4a03      	ldr	r2, [pc, #12]	@ (8002300 <HAL_ADC_ConfigChannel+0x360>)
 80022f2:	0019      	movs	r1, r3
 80022f4:	0010      	movs	r0, r2
 80022f6:	f7ff fabd 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 80022fa:	e01d      	b.n	8002338 <HAL_ADC_ConfigChannel+0x398>
 80022fc:	80000004 	.word	0x80000004
 8002300:	40012708 	.word	0x40012708
 8002304:	b0001000 	.word	0xb0001000
 8002308:	20000000 	.word	0x20000000
 800230c:	00030d40 	.word	0x00030d40
 8002310:	b8004000 	.word	0xb8004000
 8002314:	b4002000 	.word	0xb4002000
 8002318:	ff7fffff 	.word	0xff7fffff
 800231c:	feffffff 	.word	0xfeffffff
 8002320:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	2220      	movs	r2, #32
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002330:	2317      	movs	r3, #23
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2254      	movs	r2, #84	@ 0x54
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002340:	2317      	movs	r3, #23
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b006      	add	sp, #24
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)

08002350 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff fb99 	bl	8001a98 <LL_ADC_IsEnabled>
 8002366:	1e03      	subs	r3, r0, #0
 8002368:	d000      	beq.n	800236c <ADC_Enable+0x1c>
 800236a:	e069      	b.n	8002440 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4a36      	ldr	r2, [pc, #216]	@ (800244c <ADC_Enable+0xfc>)
 8002374:	4013      	ands	r3, r2
 8002376:	d00d      	beq.n	8002394 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	2210      	movs	r2, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	2201      	movs	r2, #1
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e056      	b.n	8002442 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fb59 	bl	8001a50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800239e:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <ADC_Enable+0x100>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff fa7b 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80023a6:	0002      	movs	r2, r0
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	4013      	ands	r3, r2
 80023ae:	d00f      	beq.n	80023d0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <ADC_Enable+0x104>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4928      	ldr	r1, [pc, #160]	@ (8002458 <ADC_Enable+0x108>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7fd feaa 	bl	8000110 <__udivsi3>
 80023bc:	0003      	movs	r3, r0
 80023be:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80023c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023c2:	e002      	b.n	80023ca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f9      	bne.n	80023c4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e5b      	ldrb	r3, [r3, #25]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d033      	beq.n	8002440 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fa1e 	bl	8001818 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e0:	e027      	b.n	8002432 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7ff fb56 	bl	8001a98 <LL_ADC_IsEnabled>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d104      	bne.n	80023fa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff fb2b 	bl	8001a50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fa:	f7ff fa0d 	bl	8001818 <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d914      	bls.n	8002432 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	2b01      	cmp	r3, #1
 8002414:	d00d      	beq.n	8002432 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	2210      	movs	r2, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	2201      	movs	r2, #1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2201      	movs	r2, #1
 800243a:	4013      	ands	r3, r2
 800243c:	2b01      	cmp	r3, #1
 800243e:	d1d0      	bne.n	80023e2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	80000017 	.word	0x80000017
 8002450:	40012708 	.word	0x40012708
 8002454:	20000000 	.word	0x20000000
 8002458:	00030d40 	.word	0x00030d40

0800245c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	2250      	movs	r2, #80	@ 0x50
 8002470:	4013      	ands	r3, r2
 8002472:	d141      	bne.n	80024f8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff fa49 	bl	800191e <LL_ADC_REG_IsTriggerSourceSWStart>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d02e      	beq.n	80024ee <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	7e9b      	ldrb	r3, [r3, #26]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12a      	bne.n	80024ee <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2208      	movs	r2, #8
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d123      	bne.n	80024ee <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff fb18 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d110      	bne.n	80024d6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	210c      	movs	r1, #12
 80024c0:	438a      	bics	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <ADC_DMAConvCplt+0xc4>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	2201      	movs	r2, #1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024d4:	e00b      	b.n	80024ee <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	2220      	movs	r2, #32
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	2201      	movs	r2, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7ff fd3d 	bl	8001f70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024f6:	e00f      	b.n	8002518 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	2210      	movs	r2, #16
 80024fe:	4013      	ands	r3, r2
 8002500:	d004      	beq.n	800250c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff fd43 	bl	8001f90 <HAL_ADC_ErrorCallback>
}
 800250a:	e005      	b.n	8002518 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	0010      	movs	r0, r2
 8002516:	4798      	blx	r3
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b004      	add	sp, #16
 800251e:	bd80      	pop	{r7, pc}
 8002520:	fffffefe 	.word	0xfffffefe

08002524 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff fd23 	bl	8001f80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}

08002542 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002554:	2240      	movs	r2, #64	@ 0x40
 8002556:	431a      	orrs	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002560:	2204      	movs	r2, #4
 8002562:	431a      	orrs	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff fd10 	bl	8001f90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002570:	46c0      	nop			@ (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b004      	add	sp, #16
 8002576:	bd80      	pop	{r7, pc}

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	0002      	movs	r2, r0
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b7f      	cmp	r3, #127	@ 0x7f
 800258a:	d809      	bhi.n	80025a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	001a      	movs	r2, r3
 8002592:	231f      	movs	r3, #31
 8002594:	401a      	ands	r2, r3
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <__NVIC_EnableIRQ+0x30>)
 8002598:	2101      	movs	r1, #1
 800259a:	4091      	lsls	r1, r2
 800259c:	000a      	movs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	0002      	movs	r2, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b7f      	cmp	r3, #127	@ 0x7f
 80025c0:	d828      	bhi.n	8002614 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002680 <__NVIC_SetPriority+0xd4>)
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	33c0      	adds	r3, #192	@ 0xc0
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	589b      	ldr	r3, [r3, r2]
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	0011      	movs	r1, r2
 80025d8:	2203      	movs	r2, #3
 80025da:	400a      	ands	r2, r1
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	21ff      	movs	r1, #255	@ 0xff
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	43d2      	mvns	r2, r2
 80025e6:	401a      	ands	r2, r3
 80025e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	22ff      	movs	r2, #255	@ 0xff
 80025f0:	401a      	ands	r2, r3
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	2303      	movs	r3, #3
 80025fa:	4003      	ands	r3, r0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002600:	481f      	ldr	r0, [pc, #124]	@ (8002680 <__NVIC_SetPriority+0xd4>)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b25b      	sxtb	r3, r3
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	430a      	orrs	r2, r1
 800260c:	33c0      	adds	r3, #192	@ 0xc0
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002612:	e031      	b.n	8002678 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002614:	4a1b      	ldr	r2, [pc, #108]	@ (8002684 <__NVIC_SetPriority+0xd8>)
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	0019      	movs	r1, r3
 800261c:	230f      	movs	r3, #15
 800261e:	400b      	ands	r3, r1
 8002620:	3b08      	subs	r3, #8
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3306      	adds	r3, #6
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	18d3      	adds	r3, r2, r3
 800262a:	3304      	adds	r3, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1dfa      	adds	r2, r7, #7
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	0011      	movs	r1, r2
 8002634:	2203      	movs	r2, #3
 8002636:	400a      	ands	r2, r1
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	21ff      	movs	r1, #255	@ 0xff
 800263c:	4091      	lsls	r1, r2
 800263e:	000a      	movs	r2, r1
 8002640:	43d2      	mvns	r2, r2
 8002642:	401a      	ands	r2, r3
 8002644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	22ff      	movs	r2, #255	@ 0xff
 800264c:	401a      	ands	r2, r3
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	0018      	movs	r0, r3
 8002654:	2303      	movs	r3, #3
 8002656:	4003      	ands	r3, r0
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800265c:	4809      	ldr	r0, [pc, #36]	@ (8002684 <__NVIC_SetPriority+0xd8>)
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	001c      	movs	r4, r3
 8002664:	230f      	movs	r3, #15
 8002666:	4023      	ands	r3, r4
 8002668:	3b08      	subs	r3, #8
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	430a      	orrs	r2, r1
 800266e:	3306      	adds	r3, #6
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	18c3      	adds	r3, r0, r3
 8002674:	3304      	adds	r3, #4
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b003      	add	sp, #12
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	045b      	lsls	r3, r3, #17
 8002698:	429a      	cmp	r2, r3
 800269a:	d301      	bcc.n	80026a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269c:	2301      	movs	r3, #1
 800269e:	e010      	b.n	80026c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a0:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <SysTick_Config+0x44>)
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	3a01      	subs	r2, #1
 80026a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a8:	2301      	movs	r3, #1
 80026aa:	425b      	negs	r3, r3
 80026ac:	2103      	movs	r1, #3
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff ff7c 	bl	80025ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <SysTick_Config+0x44>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <SysTick_Config+0x44>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	210f      	movs	r1, #15
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	0011      	movs	r1, r2
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff ff5d 	bl	80025ac <__NVIC_SetPriority>
}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	0002      	movs	r2, r0
 8002702:	1dfb      	adds	r3, r7, #7
 8002704:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b25b      	sxtb	r3, r3
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ff33 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff ffaf 	bl	8002688 <SysTick_Config>
 800272a:	0003      	movs	r3, r0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e077      	b.n	8002836 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3d      	ldr	r2, [pc, #244]	@ (8002840 <HAL_DMA_Init+0x10c>)
 800274c:	4694      	mov	ip, r2
 800274e:	4463      	add	r3, ip
 8002750:	2114      	movs	r1, #20
 8002752:	0018      	movs	r0, r3
 8002754:	f7fd fcdc 	bl	8000110 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2225      	movs	r2, #37	@ 0x25
 8002764:	2102      	movs	r1, #2
 8002766:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4934      	ldr	r1, [pc, #208]	@ (8002844 <HAL_DMA_Init+0x110>)
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 f9c1 	bl	8002b38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	01db      	lsls	r3, r3, #7
 80027be:	429a      	cmp	r2, r3
 80027c0:	d102      	bne.n	80027c8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d0:	213f      	movs	r1, #63	@ 0x3f
 80027d2:	400a      	ands	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d011      	beq.n	800280c <HAL_DMA_Init+0xd8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d80d      	bhi.n	800280c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f9cc 	bl	8002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	e008      	b.n	800281e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2225      	movs	r2, #37	@ 0x25
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2224      	movs	r2, #36	@ 0x24
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	bffdfff8 	.word	0xbffdfff8
 8002844:	ffff800f 	.word	0xffff800f

08002848 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2317      	movs	r3, #23
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2224      	movs	r2, #36	@ 0x24
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_DMA_Start_IT+0x24>
 8002868:	2302      	movs	r3, #2
 800286a:	e06f      	b.n	800294c <HAL_DMA_Start_IT+0x104>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	2101      	movs	r1, #1
 8002872:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2225      	movs	r2, #37	@ 0x25
 8002878:	5c9b      	ldrb	r3, [r3, r2]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d157      	bne.n	8002930 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2225      	movs	r2, #37	@ 0x25
 8002884:	2102      	movs	r1, #2
 8002886:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	438a      	bics	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f907 	bl	8002ab8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	210e      	movs	r1, #14
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e00f      	b.n	80028e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2104      	movs	r1, #4
 80028d0:	438a      	bics	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	210a      	movs	r1, #10
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	4013      	ands	r3, r2
 80028f0:	d008      	beq.n	8002904 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0049      	lsls	r1, r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002916:	2180      	movs	r1, #128	@ 0x80
 8002918:	0049      	lsls	r1, r1, #1
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e00a      	b.n	8002946 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2280      	movs	r2, #128	@ 0x80
 8002934:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2224      	movs	r2, #36	@ 0x24
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800293e:	2317      	movs	r3, #23
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002946:	2317      	movs	r3, #23
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800295c:	4b55      	ldr	r3, [pc, #340]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	221c      	movs	r2, #28
 8002970:	4013      	ands	r3, r2
 8002972:	2204      	movs	r2, #4
 8002974:	409a      	lsls	r2, r3
 8002976:	0013      	movs	r3, r2
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4013      	ands	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_IRQHandler+0x7a>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2204      	movs	r2, #4
 8002982:	4013      	ands	r3, r2
 8002984:	d023      	beq.n	80029ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	d107      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2104      	movs	r1, #4
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80029a2:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	221c      	movs	r2, #28
 80029ac:	4013      	ands	r3, r2
 80029ae:	2204      	movs	r2, #4
 80029b0:	409a      	lsls	r2, r3
 80029b2:	4b40      	ldr	r3, [pc, #256]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d100      	bne.n	80029c2 <HAL_DMA_IRQHandler+0x6e>
 80029c0:	e073      	b.n	8002aaa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	0010      	movs	r0, r2
 80029ca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80029cc:	e06d      	b.n	8002aaa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	221c      	movs	r2, #28
 80029d4:	4013      	ands	r3, r2
 80029d6:	2202      	movs	r2, #2
 80029d8:	409a      	lsls	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	d02e      	beq.n	8002a40 <HAL_DMA_IRQHandler+0xec>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2202      	movs	r2, #2
 80029e6:	4013      	ands	r3, r2
 80029e8:	d02a      	beq.n	8002a40 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2220      	movs	r2, #32
 80029f2:	4013      	ands	r3, r2
 80029f4:	d10b      	bne.n	8002a0e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	210a      	movs	r1, #10
 8002a02:	438a      	bics	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2225      	movs	r2, #37	@ 0x25
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a0e:	4b29      	ldr	r3, [pc, #164]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	221c      	movs	r2, #28
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	4b25      	ldr	r3, [pc, #148]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	@ 0x24
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03a      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002a3e:	e034      	b.n	8002aaa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	221c      	movs	r2, #28
 8002a46:	4013      	ands	r3, r2
 8002a48:	2208      	movs	r2, #8
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	d02b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x158>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2208      	movs	r2, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d027      	beq.n	8002aac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	210e      	movs	r1, #14
 8002a68:	438a      	bics	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	221c      	movs	r2, #28
 8002a76:	4013      	ands	r3, r2
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <HAL_DMA_IRQHandler+0x160>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2225      	movs	r2, #37	@ 0x25
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2224      	movs	r2, #36	@ 0x24
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	46c0      	nop			@ (mov r8, r8)
}
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40020000 	.word	0x40020000

08002ab8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ace:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <DMA_SetConfig+0x7c>)
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	221c      	movs	r2, #28
 8002aec:	4013      	ands	r3, r2
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <DMA_SetConfig+0x7c>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d108      	bne.n	8002b1a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b18:	e007      	b.n	8002b2a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	60da      	str	r2, [r3, #12]
}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	40020000 	.word	0x40020000

08002b38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	4a10      	ldr	r2, [pc, #64]	@ (8002b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002b48:	4694      	mov	ip, r2
 8002b4a:	4463      	add	r3, ip
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	001a      	movs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	001a      	movs	r2, r3
 8002b5a:	23ff      	movs	r3, #255	@ 0xff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	3b08      	subs	r3, #8
 8002b60:	2114      	movs	r1, #20
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7fd fad4 	bl	8000110 <__udivsi3>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a07      	ldr	r2, [pc, #28]	@ (8002b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	221f      	movs	r2, #31
 8002b76:	4013      	ands	r3, r2
 8002b78:	2201      	movs	r2, #1
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	10008200 	.word	0x10008200
 8002b8c:	40020880 	.word	0x40020880

08002b90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	223f      	movs	r2, #63	@ 0x3f
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ba6:	4694      	mov	ip, r2
 8002ba8:	4463      	add	r3, ip
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	001a      	movs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002bb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	1000823f 	.word	0x1000823f
 8002bd4:	40020940 	.word	0x40020940

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be6:	e147      	b.n	8002e78 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4091      	lsls	r1, r2
 8002bf2:	000a      	movs	r2, r1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d100      	bne.n	8002c00 <HAL_GPIO_Init+0x28>
 8002bfe:	e138      	b.n	8002e72 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d005      	beq.n	8002c18 <HAL_GPIO_Init+0x40>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2203      	movs	r2, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d130      	bne.n	8002c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	409a      	lsls	r2, r3
 8002c26:	0013      	movs	r3, r2
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c4e:	2201      	movs	r2, #1
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	409a      	lsls	r2, r3
 8002c54:	0013      	movs	r3, r2
 8002c56:	43da      	mvns	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	2201      	movs	r2, #1
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d017      	beq.n	8002cb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	409a      	lsls	r2, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	43da      	mvns	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	0013      	movs	r3, r2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2203      	movs	r2, #3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d123      	bne.n	8002d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	58d3      	ldr	r3, [r2, r3]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	0013      	movs	r3, r2
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2107      	movs	r1, #7
 8002cee:	400b      	ands	r3, r1
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	0092      	lsls	r2, r2, #2
 8002d06:	6939      	ldr	r1, [r7, #16]
 8002d08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	409a      	lsls	r2, r3
 8002d18:	0013      	movs	r3, r2
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2203      	movs	r2, #3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	0013      	movs	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	23c0      	movs	r3, #192	@ 0xc0
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	4013      	ands	r3, r2
 8002d48:	d100      	bne.n	8002d4c <HAL_GPIO_Init+0x174>
 8002d4a:	e092      	b.n	8002e72 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d4c:	4a50      	ldr	r2, [pc, #320]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3318      	adds	r3, #24
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	589b      	ldr	r3, [r3, r2]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4013      	ands	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	220f      	movs	r2, #15
 8002d64:	409a      	lsls	r2, r3
 8002d66:	0013      	movs	r3, r2
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	23a0      	movs	r3, #160	@ 0xa0
 8002d74:	05db      	lsls	r3, r3, #23
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0x1ca>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a45      	ldr	r2, [pc, #276]	@ (8002e94 <HAL_GPIO_Init+0x2bc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_GPIO_Init+0x1c6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a44      	ldr	r2, [pc, #272]	@ (8002e98 <HAL_GPIO_Init+0x2c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <HAL_GPIO_Init+0x1c2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a43      	ldr	r2, [pc, #268]	@ (8002e9c <HAL_GPIO_Init+0x2c4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_GPIO_Init+0x1be>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x1cc>
 8002d96:	2305      	movs	r3, #5
 8002d98:	e004      	b.n	8002da4 <HAL_GPIO_Init+0x1cc>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e002      	b.n	8002da4 <HAL_GPIO_Init+0x1cc>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_GPIO_Init+0x1cc>
 8002da2:	2300      	movs	r3, #0
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	2103      	movs	r1, #3
 8002da8:	400a      	ands	r2, r1
 8002daa:	00d2      	lsls	r2, r2, #3
 8002dac:	4093      	lsls	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002db4:	4936      	ldr	r1, [pc, #216]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3318      	adds	r3, #24
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc2:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	035b      	lsls	r3, r3, #13
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	039b      	lsls	r3, r3, #14
 8002e04:	4013      	ands	r3, r2
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e16:	4a1e      	ldr	r2, [pc, #120]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002e18:	2384      	movs	r3, #132	@ 0x84
 8002e1a:	58d3      	ldr	r3, [r2, r3]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	029b      	lsls	r3, r3, #10
 8002e30:	4013      	ands	r3, r2
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e3c:	4914      	ldr	r1, [pc, #80]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002e3e:	2284      	movs	r2, #132	@ 0x84
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e44:	4a12      	ldr	r2, [pc, #72]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	58d3      	ldr	r3, [r2, r3]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e6a:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <HAL_GPIO_Init+0x2b8>)
 8002e6c:	2280      	movs	r2, #128	@ 0x80
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	40da      	lsrs	r2, r3
 8002e80:	1e13      	subs	r3, r2, #0
 8002e82:	d000      	beq.n	8002e86 <HAL_GPIO_Init+0x2ae>
 8002e84:	e6b0      	b.n	8002be8 <HAL_GPIO_Init+0x10>
  }
}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	46c0      	nop			@ (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b006      	add	sp, #24
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021800 	.word	0x40021800
 8002e94:	50000400 	.word	0x50000400
 8002e98:	50000800 	.word	0x50000800
 8002e9c:	50000c00 	.word	0x50000c00

08002ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	1cbb      	adds	r3, r7, #2
 8002eac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	1cba      	adds	r2, r7, #2
 8002eb4:	8812      	ldrh	r2, [r2, #0]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002eba:	230f      	movs	r3, #15
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	e003      	b.n	8002ecc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	0008      	movs	r0, r1
 8002ee4:	0011      	movs	r1, r2
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	1c02      	adds	r2, r0, #0
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	1c7b      	adds	r3, r7, #1
 8002eee:	1c0a      	adds	r2, r1, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef2:	1c7b      	adds	r3, r7, #1
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002efa:	1cbb      	adds	r3, r7, #2
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f02:	e003      	b.n	8002f0c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f04:	1cbb      	adds	r3, r7, #2
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	000a      	movs	r2, r1
 8002f1e:	1cbb      	adds	r3, r7, #2
 8002f20:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f28:	1cbb      	adds	r3, r7, #2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	1cb9      	adds	r1, r7, #2
 8002f38:	8809      	ldrh	r1, [r1, #0]
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e08f      	b.n	800307e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2241      	movs	r2, #65	@ 0x41
 8002f62:	5c9b      	ldrb	r3, [r3, r2]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7fe f9f1 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2241      	movs	r2, #65	@ 0x41
 8002f7e:	2124      	movs	r1, #36	@ 0x24
 8002f80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	438a      	bics	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	493b      	ldr	r1, [pc, #236]	@ (8003088 <HAL_I2C_Init+0x13c>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4938      	ldr	r1, [pc, #224]	@ (800308c <HAL_I2C_Init+0x140>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2180      	movs	r1, #128	@ 0x80
 8002fc2:	0209      	lsls	r1, r1, #8
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e007      	b.n	8002fda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2184      	movs	r1, #132	@ 0x84
 8002fd4:	0209      	lsls	r1, r1, #8
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d109      	bne.n	8002ff6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	0109      	lsls	r1, r1, #4
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	e007      	b.n	8003006 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4923      	ldr	r1, [pc, #140]	@ (8003090 <HAL_I2C_Init+0x144>)
 8003002:	400a      	ands	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4920      	ldr	r1, [pc, #128]	@ (8003094 <HAL_I2C_Init+0x148>)
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	491a      	ldr	r1, [pc, #104]	@ (800308c <HAL_I2C_Init+0x140>)
 8003022:	400a      	ands	r2, r1
 8003024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69d9      	ldr	r1, [r3, #28]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2241      	movs	r2, #65	@ 0x41
 800306a:	2120      	movs	r1, #32
 800306c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2242      	movs	r2, #66	@ 0x42
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b002      	add	sp, #8
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	f0ffffff 	.word	0xf0ffffff
 800308c:	ffff7fff 	.word	0xffff7fff
 8003090:	fffff7ff 	.word	0xfffff7ff
 8003094:	02008000 	.word	0x02008000

08003098 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b089      	sub	sp, #36	@ 0x24
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	000c      	movs	r4, r1
 80030a2:	0010      	movs	r0, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	230a      	movs	r3, #10
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	1c22      	adds	r2, r4, #0
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	2308      	movs	r3, #8
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	1c02      	adds	r2, r0, #0
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	1dbb      	adds	r3, r7, #6
 80030b8:	1c0a      	adds	r2, r1, #0
 80030ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2241      	movs	r2, #65	@ 0x41
 80030c0:	5c9b      	ldrb	r3, [r3, r2]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d000      	beq.n	80030ca <HAL_I2C_Mem_Write+0x32>
 80030c8:	e10c      	b.n	80032e4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_I2C_Mem_Write+0x42>
 80030d0:	232c      	movs	r3, #44	@ 0x2c
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	0092      	lsls	r2, r2, #2
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0ff      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2240      	movs	r2, #64	@ 0x40
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_I2C_Mem_Write+0x5c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0f8      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2240      	movs	r2, #64	@ 0x40
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe fb8c 	bl	8001818 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	0219      	lsls	r1, r3, #8
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2319      	movs	r3, #25
 8003110:	2201      	movs	r2, #1
 8003112:	f000 f975 	bl	8003400 <I2C_WaitOnFlagUntilTimeout>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0e3      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2241      	movs	r2, #65	@ 0x41
 8003122:	2121      	movs	r1, #33	@ 0x21
 8003124:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2242      	movs	r2, #66	@ 0x42
 800312a:	2140      	movs	r1, #64	@ 0x40
 800312c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	222c      	movs	r2, #44	@ 0x2c
 800313e:	18ba      	adds	r2, r7, r2
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800314a:	1dbb      	adds	r3, r7, #6
 800314c:	881c      	ldrh	r4, [r3, #0]
 800314e:	2308      	movs	r3, #8
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	881a      	ldrh	r2, [r3, #0]
 8003154:	230a      	movs	r3, #10
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	8819      	ldrh	r1, [r3, #0]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	0023      	movs	r3, r4
 8003166:	f000 f8c5 	bl	80032f4 <I2C_RequestMemoryWrite>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d005      	beq.n	800317a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2240      	movs	r2, #64	@ 0x40
 8003172:	2100      	movs	r1, #0
 8003174:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0b5      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2bff      	cmp	r3, #255	@ 0xff
 8003182:	d911      	bls.n	80031a8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	22ff      	movs	r2, #255	@ 0xff
 8003188:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	b2da      	uxtb	r2, r3
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	045c      	lsls	r4, r3, #17
 8003194:	230a      	movs	r3, #10
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	8819      	ldrh	r1, [r3, #0]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	0023      	movs	r3, r4
 80031a2:	f000 fb07 	bl	80037b4 <I2C_TransferConfig>
 80031a6:	e012      	b.n	80031ce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	049c      	lsls	r4, r3, #18
 80031bc:	230a      	movs	r3, #10
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	8819      	ldrh	r1, [r3, #0]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	0023      	movs	r3, r4
 80031ca:	f000 faf3 	bl	80037b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 f96b 	bl	80034b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80031da:	1e03      	subs	r3, r0, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e081      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d03a      	beq.n	8003292 <HAL_I2C_Mem_Write+0x1fa>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d136      	bne.n	8003292 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	0013      	movs	r3, r2
 800322e:	2200      	movs	r2, #0
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	f000 f8e5 	bl	8003400 <I2C_WaitOnFlagUntilTimeout>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e053      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	@ 0xff
 8003246:	d911      	bls.n	800326c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	045c      	lsls	r4, r3, #17
 8003258:	230a      	movs	r3, #10
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	8819      	ldrh	r1, [r3, #0]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	2300      	movs	r3, #0
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	0023      	movs	r3, r4
 8003266:	f000 faa5 	bl	80037b4 <I2C_TransferConfig>
 800326a:	e012      	b.n	8003292 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	b2da      	uxtb	r2, r3
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	049c      	lsls	r4, r3, #18
 8003280:	230a      	movs	r3, #10
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	8819      	ldrh	r1, [r3, #0]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	2300      	movs	r3, #0
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	0023      	movs	r3, r4
 800328e:	f000 fa91 	bl	80037b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d198      	bne.n	80031ce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 f94a 	bl	800353c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e01a      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	490b      	ldr	r1, [pc, #44]	@ (80032f0 <HAL_I2C_Mem_Write+0x258>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2241      	movs	r2, #65	@ 0x41
 80032cc:	2120      	movs	r1, #32
 80032ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2242      	movs	r2, #66	@ 0x42
 80032d4:	2100      	movs	r1, #0
 80032d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2240      	movs	r2, #64	@ 0x40
 80032dc:	2100      	movs	r1, #0
 80032de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b007      	add	sp, #28
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	fe00e800 	.word	0xfe00e800

080032f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	000c      	movs	r4, r1
 80032fe:	0010      	movs	r0, r2
 8003300:	0019      	movs	r1, r3
 8003302:	250a      	movs	r5, #10
 8003304:	197b      	adds	r3, r7, r5
 8003306:	1c22      	adds	r2, r4, #0
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	2308      	movs	r3, #8
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	1c02      	adds	r2, r0, #0
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	1c0a      	adds	r2, r1, #0
 8003316:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	045c      	lsls	r4, r3, #17
 8003322:	197b      	adds	r3, r7, r5
 8003324:	8819      	ldrh	r1, [r3, #0]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <I2C_RequestMemoryWrite+0xc4>)
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	0023      	movs	r3, r4
 800332e:	f000 fa41 	bl	80037b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003334:	6a39      	ldr	r1, [r7, #32]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 f8b9 	bl	80034b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e033      	b.n	80033ae <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003346:	1dbb      	adds	r3, r7, #6
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800334e:	2308      	movs	r3, #8
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
 800335c:	e019      	b.n	8003392 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800335e:	2308      	movs	r3, #8
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	b29b      	uxth	r3, r3
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003372:	6a39      	ldr	r1, [r7, #32]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f89a 	bl	80034b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e014      	b.n	80033ae <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003384:	2308      	movs	r3, #8
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	0013      	movs	r3, r2
 800339c:	2200      	movs	r2, #0
 800339e:	2180      	movs	r1, #128	@ 0x80
 80033a0:	f000 f82e 	bl	8003400 <I2C_WaitOnFlagUntilTimeout>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	80002000 	.word	0x80002000

080033bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2202      	movs	r2, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d103      	bne.n	80033da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2201      	movs	r2, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d007      	beq.n	80033f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]
  }
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	1dfb      	adds	r3, r7, #7
 800340e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003410:	e03a      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 f8d3 	bl	80035c4 <I2C_IsErrorOccurred>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d001      	beq.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e040      	b.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	d02d      	beq.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342c:	f7fe f9f4 	bl	8001818 <HAL_GetTick>
 8003430:	0002      	movs	r2, r0
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x42>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d122      	bne.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	425a      	negs	r2, r3
 8003452:	4153      	adcs	r3, r2
 8003454:	b2db      	uxtb	r3, r3
 8003456:	001a      	movs	r2, r3
 8003458:	1dfb      	adds	r3, r7, #7
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d113      	bne.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	2220      	movs	r2, #32
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2241      	movs	r2, #65	@ 0x41
 8003470:	2120      	movs	r1, #32
 8003472:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2242      	movs	r2, #66	@ 0x42
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2240      	movs	r2, #64	@ 0x40
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e00f      	b.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	425a      	negs	r2, r3
 8003498:	4153      	adcs	r3, r2
 800349a:	b2db      	uxtb	r3, r3
 800349c:	001a      	movs	r2, r3
 800349e:	1dfb      	adds	r3, r7, #7
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d0b5      	beq.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034bc:	e032      	b.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 f87d 	bl	80035c4 <I2C_IsErrorOccurred>
 80034ca:	1e03      	subs	r3, r0, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e030      	b.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3301      	adds	r3, #1
 80034d6:	d025      	beq.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d8:	f7fe f99e 	bl	8001818 <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11a      	bne.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2202      	movs	r2, #2
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d013      	beq.n	8003524 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	2220      	movs	r2, #32
 8003502:	431a      	orrs	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2241      	movs	r2, #65	@ 0x41
 800350c:	2120      	movs	r1, #32
 800350e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2242      	movs	r2, #66	@ 0x42
 8003514:	2100      	movs	r1, #0
 8003516:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2240      	movs	r2, #64	@ 0x40
 800351c:	2100      	movs	r1, #0
 800351e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e007      	b.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2202      	movs	r2, #2
 800352c:	4013      	ands	r3, r2
 800352e:	2b02      	cmp	r3, #2
 8003530:	d1c5      	bne.n	80034be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003548:	e02f      	b.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0018      	movs	r0, r3
 8003552:	f000 f837 	bl	80035c4 <I2C_IsErrorOccurred>
 8003556:	1e03      	subs	r3, r0, #0
 8003558:	d001      	beq.n	800355e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e02d      	b.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe f95b 	bl	8001818 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11a      	bne.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2220      	movs	r2, #32
 800357c:	4013      	ands	r3, r2
 800357e:	2b20      	cmp	r3, #32
 8003580:	d013      	beq.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	2220      	movs	r2, #32
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2241      	movs	r2, #65	@ 0x41
 8003592:	2120      	movs	r1, #32
 8003594:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2242      	movs	r2, #66	@ 0x42
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2240      	movs	r2, #64	@ 0x40
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e007      	b.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2220      	movs	r2, #32
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d1c8      	bne.n	800354a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	@ 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2327      	movs	r3, #39	@ 0x27
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2210      	movs	r2, #16
 80035ec:	4013      	ands	r3, r2
 80035ee:	d100      	bne.n	80035f2 <I2C_IsErrorOccurred+0x2e>
 80035f0:	e079      	b.n	80036e6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2210      	movs	r2, #16
 80035f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035fa:	e057      	b.n	80036ac <I2C_IsErrorOccurred+0xe8>
 80035fc:	2227      	movs	r2, #39	@ 0x27
 80035fe:	18bb      	adds	r3, r7, r2
 8003600:	18ba      	adds	r2, r7, r2
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3301      	adds	r3, #1
 800360a:	d04f      	beq.n	80036ac <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe f904 	bl	8001818 <HAL_GetTick>
 8003610:	0002      	movs	r2, r0
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_IsErrorOccurred+0x5e>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d144      	bne.n	80036ac <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003630:	2013      	movs	r0, #19
 8003632:	183b      	adds	r3, r7, r0
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	2142      	movs	r1, #66	@ 0x42
 8003638:	5c52      	ldrb	r2, [r2, r1]
 800363a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	401a      	ands	r2, r3
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	429a      	cmp	r2, r3
 800364e:	d126      	bne.n	800369e <I2C_IsErrorOccurred+0xda>
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	01db      	lsls	r3, r3, #7
 8003656:	429a      	cmp	r2, r3
 8003658:	d021      	beq.n	800369e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800365a:	183b      	adds	r3, r7, r0
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b20      	cmp	r3, #32
 8003660:	d01d      	beq.n	800369e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2180      	movs	r1, #128	@ 0x80
 800366e:	01c9      	lsls	r1, r1, #7
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003674:	f7fe f8d0 	bl	8001818 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800367c:	e00f      	b.n	800369e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800367e:	f7fe f8cb 	bl	8001818 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b19      	cmp	r3, #25
 800368a:	d908      	bls.n	800369e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2220      	movs	r2, #32
 8003690:	4313      	orrs	r3, r2
 8003692:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003694:	2327      	movs	r3, #39	@ 0x27
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]

              break;
 800369c:	e006      	b.n	80036ac <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d1e8      	bne.n	800367e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d004      	beq.n	80036c4 <I2C_IsErrorOccurred+0x100>
 80036ba:	2327      	movs	r3, #39	@ 0x27
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d09b      	beq.n	80035fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036c4:	2327      	movs	r3, #39	@ 0x27
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2220      	movs	r2, #32
 80036d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2204      	movs	r2, #4
 80036da:	4313      	orrs	r3, r2
 80036dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036de:	2327      	movs	r3, #39	@ 0x27
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2201      	movs	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	2380      	movs	r3, #128	@ 0x80
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d00c      	beq.n	8003712 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2201      	movs	r2, #1
 80036fc:	4313      	orrs	r3, r2
 80036fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2280      	movs	r2, #128	@ 0x80
 8003706:	0052      	lsls	r2, r2, #1
 8003708:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800370a:	2327      	movs	r3, #39	@ 0x27
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4013      	ands	r3, r2
 800371a:	d00c      	beq.n	8003736 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2208      	movs	r2, #8
 8003720:	4313      	orrs	r3, r2
 8003722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2280      	movs	r2, #128	@ 0x80
 800372a:	00d2      	lsls	r2, r2, #3
 800372c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800372e:	2327      	movs	r3, #39	@ 0x27
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4013      	ands	r3, r2
 800373e:	d00c      	beq.n	800375a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	2202      	movs	r2, #2
 8003744:	4313      	orrs	r3, r2
 8003746:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2280      	movs	r2, #128	@ 0x80
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003752:	2327      	movs	r3, #39	@ 0x27
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800375a:	2327      	movs	r3, #39	@ 0x27
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01d      	beq.n	80037a0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	0018      	movs	r0, r3
 8003768:	f7ff fe28 	bl	80033bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	490e      	ldr	r1, [pc, #56]	@ (80037b0 <I2C_IsErrorOccurred+0x1ec>)
 8003778:	400a      	ands	r2, r1
 800377a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2241      	movs	r2, #65	@ 0x41
 800378c:	2120      	movs	r1, #32
 800378e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2242      	movs	r2, #66	@ 0x42
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2240      	movs	r2, #64	@ 0x40
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037a0:	2327      	movs	r3, #39	@ 0x27
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	781b      	ldrb	r3, [r3, #0]
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b00a      	add	sp, #40	@ 0x28
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	fe00e800 	.word	0xfe00e800

080037b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	0008      	movs	r0, r1
 80037be:	0011      	movs	r1, r2
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	240a      	movs	r4, #10
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	1c02      	adds	r2, r0, #0
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	2009      	movs	r0, #9
 80037cc:	183b      	adds	r3, r7, r0
 80037ce:	1c0a      	adds	r2, r1, #0
 80037d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	059b      	lsls	r3, r3, #22
 80037d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037da:	183b      	adds	r3, r7, r0
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0419      	lsls	r1, r3, #16
 80037e0:	23ff      	movs	r3, #255	@ 0xff
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	4313      	orrs	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037fe:	0d51      	lsrs	r1, r2, #21
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	400a      	ands	r2, r1
 8003806:	4907      	ldr	r1, [pc, #28]	@ (8003824 <I2C_TransferConfig+0x70>)
 8003808:	430a      	orrs	r2, r1
 800380a:	43d2      	mvns	r2, r2
 800380c:	401a      	ands	r2, r3
 800380e:	0011      	movs	r1, r2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b007      	add	sp, #28
 8003820:	bd90      	pop	{r4, r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	03ff63ff 	.word	0x03ff63ff

08003828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2241      	movs	r2, #65	@ 0x41
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	d138      	bne.n	80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2240      	movs	r2, #64	@ 0x40
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003848:	2302      	movs	r3, #2
 800384a:	e032      	b.n	80038b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2240      	movs	r2, #64	@ 0x40
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2241      	movs	r2, #65	@ 0x41
 8003858:	2124      	movs	r1, #36	@ 0x24
 800385a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2101      	movs	r1, #1
 8003868:	438a      	bics	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4911      	ldr	r1, [pc, #68]	@ (80038bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003878:	400a      	ands	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2101      	movs	r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2241      	movs	r2, #65	@ 0x41
 80038a0:	2120      	movs	r1, #32
 80038a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e000      	b.n	80038b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
  }
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	ffffefff 	.word	0xffffefff

080038c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2241      	movs	r2, #65	@ 0x41
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d139      	bne.n	800394a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2240      	movs	r2, #64	@ 0x40
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e033      	b.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2240      	movs	r2, #64	@ 0x40
 80038e8:	2101      	movs	r1, #1
 80038ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2241      	movs	r2, #65	@ 0x41
 80038f0:	2124      	movs	r1, #36	@ 0x24
 80038f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a11      	ldr	r2, [pc, #68]	@ (8003954 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003910:	4013      	ands	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2241      	movs	r2, #65	@ 0x41
 800393a:	2120      	movs	r1, #32
 800393c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	2100      	movs	r1, #0
 8003944:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b004      	add	sp, #16
 8003952:	bd80      	pop	{r7, pc}
 8003954:	fffff0ff 	.word	0xfffff0ff

08003958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003960:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	429a      	cmp	r2, r3
 800397a:	d11f      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800397c:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	0013      	movs	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	189b      	adds	r3, r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4912      	ldr	r1, [pc, #72]	@ (80039d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800398a:	0018      	movs	r0, r3
 800398c:	f7fc fbc0 	bl	8000110 <__udivsi3>
 8003990:	0003      	movs	r3, r0
 8003992:	3301      	adds	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003996:	e008      	b.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e001      	b.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e009      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039aa:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	2380      	movs	r3, #128	@ 0x80
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	401a      	ands	r2, r3
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d0ed      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b004      	add	sp, #16
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	40007000 	.word	0x40007000
 80039cc:	fffff9ff 	.word	0xfffff9ff
 80039d0:	20000000 	.word	0x20000000
 80039d4:	000f4240 	.word	0x000f4240

080039d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80039dc:	4b03      	ldr	r3, [pc, #12]	@ (80039ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	23e0      	movs	r3, #224	@ 0xe0
 80039e2:	01db      	lsls	r3, r3, #7
 80039e4:	4013      	ands	r3, r2
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000

080039f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e2f3      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <HAL_RCC_OscConfig+0x1e>
 8003a0c:	e07c      	b.n	8003b08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4bc3      	ldr	r3, [pc, #780]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2238      	movs	r2, #56	@ 0x38
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a18:	4bc0      	ldr	r3, [pc, #768]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	4013      	ands	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3e>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d002      	beq.n	8003a34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	4bb9      	ldr	r3, [pc, #740]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	@ 0x80
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d062      	beq.n	8003b06 <HAL_RCC_OscConfig+0x116>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d15e      	bne.n	8003b06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e2ce      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	025b      	lsls	r3, r3, #9
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x78>
 8003a58:	4bb0      	ldr	r3, [pc, #704]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4baf      	ldr	r3, [pc, #700]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a5e:	2180      	movs	r1, #128	@ 0x80
 8003a60:	0249      	lsls	r1, r1, #9
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e020      	b.n	8003aaa <HAL_RCC_OscConfig+0xba>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	23a0      	movs	r3, #160	@ 0xa0
 8003a6e:	02db      	lsls	r3, r3, #11
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d10e      	bne.n	8003a92 <HAL_RCC_OscConfig+0xa2>
 8003a74:	4ba9      	ldr	r3, [pc, #676]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4ba8      	ldr	r3, [pc, #672]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	2180      	movs	r1, #128	@ 0x80
 8003a7c:	02c9      	lsls	r1, r1, #11
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	4ba6      	ldr	r3, [pc, #664]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4ba5      	ldr	r3, [pc, #660]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	0249      	lsls	r1, r1, #9
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0xba>
 8003a92:	4ba2      	ldr	r3, [pc, #648]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4ba1      	ldr	r3, [pc, #644]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003a98:	49a1      	ldr	r1, [pc, #644]	@ (8003d20 <HAL_RCC_OscConfig+0x330>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	4b9f      	ldr	r3, [pc, #636]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b9e      	ldr	r3, [pc, #632]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	499f      	ldr	r1, [pc, #636]	@ (8003d24 <HAL_RCC_OscConfig+0x334>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d014      	beq.n	8003adc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd feb1 	bl	8001818 <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fd feac 	bl	8001818 <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e28d      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ace:	4b93      	ldr	r3, [pc, #588]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	029b      	lsls	r3, r3, #10
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xcc>
 8003ada:	e015      	b.n	8003b08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fe9c 	bl	8001818 <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fe97 	bl	8001818 <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	@ 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e278      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af8:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	4013      	ands	r3, r2
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xf6>
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b06:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d100      	bne.n	8003b14 <HAL_RCC_OscConfig+0x124>
 8003b12:	e099      	b.n	8003c48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b14:	4b81      	ldr	r3, [pc, #516]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2238      	movs	r2, #56	@ 0x38
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0x144>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d002      	beq.n	8003b3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d135      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3a:	4b78      	ldr	r3, [pc, #480]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4013      	ands	r3, r2
 8003b44:	d005      	beq.n	8003b52 <HAL_RCC_OscConfig+0x162>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e24b      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b72      	ldr	r3, [pc, #456]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a74      	ldr	r2, [pc, #464]	@ (8003d28 <HAL_RCC_OscConfig+0x338>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	4b6e      	ldr	r3, [pc, #440]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6e      	ldr	r2, [pc, #440]	@ (8003d2c <HAL_RCC_OscConfig+0x33c>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	4b67      	ldr	r3, [pc, #412]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b82:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	2207      	movs	r2, #7
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	4a68      	ldr	r2, [pc, #416]	@ (8003d30 <HAL_RCC_OscConfig+0x340>)
 8003b8e:	40da      	lsrs	r2, r3
 8003b90:	4b68      	ldr	r3, [pc, #416]	@ (8003d34 <HAL_RCC_OscConfig+0x344>)
 8003b92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b94:	4b68      	ldr	r3, [pc, #416]	@ (8003d38 <HAL_RCC_OscConfig+0x348>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fd fde1 	bl	8001760 <HAL_InitTick>
 8003b9e:	1e03      	subs	r3, r0, #0
 8003ba0:	d051      	beq.n	8003c46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e221      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d030      	beq.n	8003c10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bae:	4b5b      	ldr	r3, [pc, #364]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x33c>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	4b57      	ldr	r3, [pc, #348]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bc2:	4b56      	ldr	r3, [pc, #344]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bc8:	2180      	movs	r1, #128	@ 0x80
 8003bca:	0049      	lsls	r1, r1, #1
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fe22 	bl	8001818 <HAL_GetTick>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fd fe1d 	bl	8001818 <HAL_GetTick>
 8003bde:	0002      	movs	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1fe      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bec:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003d28 <HAL_RCC_OscConfig+0x338>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	021a      	lsls	r2, r3, #8
 8003c08:	4b44      	ldr	r3, [pc, #272]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e01b      	b.n	8003c48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c10:	4b42      	ldr	r3, [pc, #264]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c16:	4949      	ldr	r1, [pc, #292]	@ (8003d3c <HAL_RCC_OscConfig+0x34c>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fdfc 	bl	8001818 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fd fdf7 	bl	8001818 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e1d8      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c38:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	2380      	movs	r3, #128	@ 0x80
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4013      	ands	r3, r2
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x236>
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c46:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c52:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2238      	movs	r2, #56	@ 0x38
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b18      	cmp	r3, #24
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d03c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d138      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e1ba      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d019      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c7c:	4b27      	ldr	r3, [pc, #156]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c80:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003c82:	2101      	movs	r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fdc6 	bl	8001818 <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fd fdc1 	bl	8001818 <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e1a2      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	2202      	movs	r2, #2
 8003caa:	4013      	ands	r3, r2
 8003cac:	d0f1      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2a2>
 8003cae:	e018      	b.n	8003ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003cb4:	4b19      	ldr	r3, [pc, #100]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fdac 	bl	8001818 <HAL_GetTick>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fd fda7 	bl	8001818 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e188      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cdc:	2202      	movs	r2, #2
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d1f1      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d100      	bne.n	8003cee <HAL_RCC_OscConfig+0x2fe>
 8003cec:	e0c6      	b.n	8003e7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cee:	231f      	movs	r3, #31
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cf6:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2238      	movs	r2, #56	@ 0x38
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d11e      	bne.n	8003d40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_OscConfig+0x32c>)
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <HAL_RCC_OscConfig+0x31e>
 8003d0c:	e0b6      	b.n	8003e7c <HAL_RCC_OscConfig+0x48c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d000      	beq.n	8003d18 <HAL_RCC_OscConfig+0x328>
 8003d16:	e0b1      	b.n	8003e7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e166      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	fffeffff 	.word	0xfffeffff
 8003d24:	fffbffff 	.word	0xfffbffff
 8003d28:	ffff80ff 	.word	0xffff80ff
 8003d2c:	ffffc7ff 	.word	0xffffc7ff
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004
 8003d3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d40:	4bac      	ldr	r3, [pc, #688]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	055b      	lsls	r3, r3, #21
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x360>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x362>
 8003d50:	2300      	movs	r3, #0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d011      	beq.n	8003d7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4ba7      	ldr	r3, [pc, #668]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d5a:	4ba6      	ldr	r3, [pc, #664]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d5c:	2180      	movs	r1, #128	@ 0x80
 8003d5e:	0549      	lsls	r1, r1, #21
 8003d60:	430a      	orrs	r2, r1
 8003d62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d64:	4ba3      	ldr	r3, [pc, #652]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003d66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	055b      	lsls	r3, r3, #21
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d72:	231f      	movs	r3, #31
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4013      	ands	r3, r2
 8003d84:	d11a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d86:	4b9c      	ldr	r3, [pc, #624]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b9b      	ldr	r3, [pc, #620]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003d8c:	2180      	movs	r1, #128	@ 0x80
 8003d8e:	0049      	lsls	r1, r1, #1
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d94:	f7fd fd40 	bl	8001818 <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fd fd3b 	bl	8001818 <HAL_GetTick>
 8003da2:	0002      	movs	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e11c      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b91      	ldr	r3, [pc, #580]	@ (8003ff8 <HAL_RCC_OscConfig+0x608>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3e2>
 8003dc4:	4b8b      	ldr	r3, [pc, #556]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dc8:	4b8a      	ldr	r3, [pc, #552]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x41c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x404>
 8003dda:	4b86      	ldr	r3, [pc, #536]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ddc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dde:	4b85      	ldr	r3, [pc, #532]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003de0:	2104      	movs	r1, #4
 8003de2:	430a      	orrs	r2, r1
 8003de4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003de6:	4b83      	ldr	r3, [pc, #524]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003de8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dea:	4b82      	ldr	r3, [pc, #520]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0x41c>
 8003df4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003df6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003df8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e00:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e04:	4b7b      	ldr	r3, [pc, #492]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e06:	2104      	movs	r1, #4
 8003e08:	438a      	bics	r2, r1
 8003e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd fd00 	bl	8001818 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1c:	e009      	b.n	8003e32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fd fcfb 	bl	8001818 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	4a74      	ldr	r2, [pc, #464]	@ (8003ffc <HAL_RCC_OscConfig+0x60c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0db      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e32:	4b70      	ldr	r3, [pc, #448]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x42e>
 8003e3c:	e013      	b.n	8003e66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fceb 	bl	8001818 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e46:	e009      	b.n	8003e5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fd fce6 	bl	8001818 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a6a      	ldr	r2, [pc, #424]	@ (8003ffc <HAL_RCC_OscConfig+0x60c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0c6      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e5c:	4b65      	ldr	r3, [pc, #404]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e66:	231f      	movs	r3, #31
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b60      	ldr	r3, [pc, #384]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e74:	4b5f      	ldr	r3, [pc, #380]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e76:	4962      	ldr	r1, [pc, #392]	@ (8004000 <HAL_RCC_OscConfig+0x610>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d100      	bne.n	8003e86 <HAL_RCC_OscConfig+0x496>
 8003e84:	e0b0      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e86:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2238      	movs	r2, #56	@ 0x38
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d100      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4a4>
 8003e92:	e078      	b.n	8003f86 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d153      	bne.n	8003f44 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b55      	ldr	r3, [pc, #340]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b54      	ldr	r3, [pc, #336]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ea2:	4958      	ldr	r1, [pc, #352]	@ (8004004 <HAL_RCC_OscConfig+0x614>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd fcb6 	bl	8001818 <HAL_GetTick>
 8003eac:	0003      	movs	r3, r0
 8003eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fd fcb1 	bl	8001818 <HAL_GetTick>
 8003eb6:	0002      	movs	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e092      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	049b      	lsls	r3, r3, #18
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed0:	4b48      	ldr	r3, [pc, #288]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8004008 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b3c      	ldr	r3, [pc, #240]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f04:	2180      	movs	r1, #128	@ 0x80
 8003f06:	0449      	lsls	r1, r1, #17
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b38      	ldr	r3, [pc, #224]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f12:	2180      	movs	r1, #128	@ 0x80
 8003f14:	0549      	lsls	r1, r1, #21
 8003f16:	430a      	orrs	r2, r1
 8003f18:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fc7d 	bl	8001818 <HAL_GetTick>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd fc78 	bl	8001818 <HAL_GetTick>
 8003f28:	0002      	movs	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e059      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f36:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	049b      	lsls	r3, r3, #18
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x534>
 8003f42:	e051      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f4a:	492e      	ldr	r1, [pc, #184]	@ (8004004 <HAL_RCC_OscConfig+0x614>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd fc62 	bl	8001818 <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fc5d 	bl	8001818 <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e03e      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	049b      	lsls	r3, r3, #18
 8003f74:	4013      	ands	r3, r2
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003f78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f7e:	4923      	ldr	r1, [pc, #140]	@ (800400c <HAL_RCC_OscConfig+0x61c>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e030      	b.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e02b      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f92:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <HAL_RCC_OscConfig+0x604>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2270      	movs	r2, #112	@ 0x70
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d117      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	23fe      	movs	r3, #254	@ 0xfe
 8003fb8:	01db      	lsls	r3, r3, #7
 8003fba:	401a      	ands	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	23f8      	movs	r3, #248	@ 0xf8
 8003fca:	039b      	lsls	r3, r3, #14
 8003fcc:	401a      	ands	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	0f5b      	lsrs	r3, r3, #29
 8003fda:	075a      	lsls	r2, r3, #29
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b008      	add	sp, #32
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	00001388 	.word	0x00001388
 8004000:	efffffff 	.word	0xefffffff
 8004004:	feffffff 	.word	0xfeffffff
 8004008:	1fc1808c 	.word	0x1fc1808c
 800400c:	effefffc 	.word	0xeffefffc

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0e9      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b76      	ldr	r3, [pc, #472]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2207      	movs	r2, #7
 800402a:	4013      	ands	r3, r2
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d91e      	bls.n	8004070 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b73      	ldr	r3, [pc, #460]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2207      	movs	r2, #7
 8004038:	4393      	bics	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	4b70      	ldr	r3, [pc, #448]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004044:	f7fd fbe8 	bl	8001818 <HAL_GetTick>
 8004048:	0003      	movs	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800404c:	e009      	b.n	8004062 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404e:	f7fd fbe3 	bl	8001818 <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	4a6a      	ldr	r2, [pc, #424]	@ (8004204 <HAL_RCC_ClockConfig+0x1f4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0ca      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004062:	4b67      	ldr	r3, [pc, #412]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2207      	movs	r2, #7
 8004068:	4013      	ands	r3, r2
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d1ee      	bne.n	800404e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d015      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2204      	movs	r2, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d006      	beq.n	8004092 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004084:	4b60      	ldr	r3, [pc, #384]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b5f      	ldr	r3, [pc, #380]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 800408a:	21e0      	movs	r1, #224	@ 0xe0
 800408c:	01c9      	lsls	r1, r1, #7
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004092:	4b5d      	ldr	r3, [pc, #372]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4a5d      	ldr	r2, [pc, #372]	@ (800420c <HAL_RCC_ClockConfig+0x1fc>)
 8004098:	4013      	ands	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	d057      	beq.n	8004160 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b8:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	4013      	ands	r3, r2
 80040c2:	d12b      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e097      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	049b      	lsls	r3, r3, #18
 80040d8:	4013      	ands	r3, r2
 80040da:	d11f      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e08b      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e8:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4013      	ands	r3, r2
 80040f2:	d113      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e07f      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d106      	bne.n	800410e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004100:	4b41      	ldr	r3, [pc, #260]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d108      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e074      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410e:	4b3e      	ldr	r3, [pc, #248]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	2202      	movs	r2, #2
 8004114:	4013      	ands	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e06d      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800411c:	4b3a      	ldr	r3, [pc, #232]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2207      	movs	r2, #7
 8004122:	4393      	bics	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004130:	f7fd fb72 	bl	8001818 <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004138:	e009      	b.n	800414e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413a:	f7fd fb6d 	bl	8001818 <HAL_GetTick>
 800413e:	0002      	movs	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	4a2f      	ldr	r2, [pc, #188]	@ (8004204 <HAL_RCC_ClockConfig+0x1f4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e054      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	4b2e      	ldr	r3, [pc, #184]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2238      	movs	r2, #56	@ 0x38
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	429a      	cmp	r2, r3
 800415e:	d1ec      	bne.n	800413a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004160:	4b27      	ldr	r3, [pc, #156]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2207      	movs	r2, #7
 8004166:	4013      	ands	r3, r2
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d21e      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2207      	movs	r2, #7
 8004174:	4393      	bics	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004180:	f7fd fb4a 	bl	8001818 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004188:	e009      	b.n	800419e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418a:	f7fd fb45 	bl	8001818 <HAL_GetTick>
 800418e:	0002      	movs	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	4a1b      	ldr	r2, [pc, #108]	@ (8004204 <HAL_RCC_ClockConfig+0x1f4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e02c      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800419e:	4b18      	ldr	r3, [pc, #96]	@ (8004200 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2207      	movs	r2, #7
 80041a4:	4013      	ands	r3, r2
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1ee      	bne.n	800418a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2204      	movs	r2, #4
 80041b2:	4013      	ands	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041b6:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_RCC_ClockConfig+0x200>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	430a      	orrs	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041ca:	f000 f829 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041ce:	0001      	movs	r1, r0
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <HAL_RCC_ClockConfig+0x1f8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	220f      	movs	r2, #15
 80041d8:	401a      	ands	r2, r3
 80041da:	4b0e      	ldr	r3, [pc, #56]	@ (8004214 <HAL_RCC_ClockConfig+0x204>)
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	58d3      	ldr	r3, [r2, r3]
 80041e0:	221f      	movs	r2, #31
 80041e2:	4013      	ands	r3, r2
 80041e4:	000a      	movs	r2, r1
 80041e6:	40da      	lsrs	r2, r3
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_ClockConfig+0x208>)
 80041ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_ClockConfig+0x20c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fd fab5 	bl	8001760 <HAL_InitTick>
 80041f6:	0003      	movs	r3, r0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b004      	add	sp, #16
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40022000 	.word	0x40022000
 8004204:	00001388 	.word	0x00001388
 8004208:	40021000 	.word	0x40021000
 800420c:	fffff0ff 	.word	0xfffff0ff
 8004210:	ffff8fff 	.word	0xffff8fff
 8004214:	080065cc 	.word	0x080065cc
 8004218:	20000000 	.word	0x20000000
 800421c:	20000004 	.word	0x20000004

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004226:	4b3c      	ldr	r3, [pc, #240]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2238      	movs	r2, #56	@ 0x38
 800422c:	4013      	ands	r3, r2
 800422e:	d10f      	bne.n	8004250 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004230:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0adb      	lsrs	r3, r3, #11
 8004236:	2207      	movs	r2, #7
 8004238:	4013      	ands	r3, r2
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	0013      	movs	r3, r2
 8004240:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	4835      	ldr	r0, [pc, #212]	@ (800431c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004246:	f7fb ff63 	bl	8000110 <__udivsi3>
 800424a:	0003      	movs	r3, r0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e05d      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004250:	4b31      	ldr	r3, [pc, #196]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2238      	movs	r2, #56	@ 0x38
 8004256:	4013      	ands	r3, r2
 8004258:	2b08      	cmp	r3, #8
 800425a:	d102      	bne.n	8004262 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800425c:	4b30      	ldr	r3, [pc, #192]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x100>)
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e054      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004262:	4b2d      	ldr	r3, [pc, #180]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2238      	movs	r2, #56	@ 0x38
 8004268:	4013      	ands	r3, r2
 800426a:	2b10      	cmp	r3, #16
 800426c:	d138      	bne.n	80042e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800426e:	4b2a      	ldr	r3, [pc, #168]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2203      	movs	r2, #3
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004278:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	2207      	movs	r2, #7
 8004280:	4013      	ands	r3, r2
 8004282:	3301      	adds	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d10d      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4824      	ldr	r0, [pc, #144]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x100>)
 8004290:	f7fb ff3e 	bl	8000110 <__udivsi3>
 8004294:	0003      	movs	r3, r0
 8004296:	0019      	movs	r1, r3
 8004298:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	227f      	movs	r2, #127	@ 0x7f
 80042a0:	4013      	ands	r3, r2
 80042a2:	434b      	muls	r3, r1
 80042a4:	617b      	str	r3, [r7, #20]
        break;
 80042a6:	e00d      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	481c      	ldr	r0, [pc, #112]	@ (800431c <HAL_RCC_GetSysClockFreq+0xfc>)
 80042ac:	f7fb ff30 	bl	8000110 <__udivsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	0019      	movs	r1, r3
 80042b4:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	227f      	movs	r2, #127	@ 0x7f
 80042bc:	4013      	ands	r3, r2
 80042be:	434b      	muls	r3, r1
 80042c0:	617b      	str	r3, [r7, #20]
        break;
 80042c2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0f5b      	lsrs	r3, r3, #29
 80042ca:	2207      	movs	r2, #7
 80042cc:	4013      	ands	r3, r2
 80042ce:	3301      	adds	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	6978      	ldr	r0, [r7, #20]
 80042d6:	f7fb ff1b 	bl	8000110 <__udivsi3>
 80042da:	0003      	movs	r3, r0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	e015      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2238      	movs	r2, #56	@ 0x38
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d103      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042f4:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2238      	movs	r2, #56	@ 0x38
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b18      	cmp	r3, #24
 80042fe:	d103      	bne.n	8004308 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004300:	23fa      	movs	r3, #250	@ 0xfa
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e001      	b.n	800430c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800430c:	693b      	ldr	r3, [r7, #16]
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	40021000 	.word	0x40021000
 800431c:	00f42400 	.word	0x00f42400
 8004320:	007a1200 	.word	0x007a1200

08004324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b02      	ldr	r3, [pc, #8]	@ (8004334 <HAL_RCC_GetHCLKFreq+0x10>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	20000000 	.word	0x20000000

08004338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800433c:	f7ff fff2 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004340:	0004      	movs	r4, r0
 8004342:	f7ff fb49 	bl	80039d8 <LL_RCC_GetAPB1Prescaler>
 8004346:	0003      	movs	r3, r0
 8004348:	0b1a      	lsrs	r2, r3, #12
 800434a:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800434c:	0092      	lsls	r2, r2, #2
 800434e:	58d3      	ldr	r3, [r2, r3]
 8004350:	221f      	movs	r2, #31
 8004352:	4013      	ands	r3, r2
 8004354:	40dc      	lsrs	r4, r3
 8004356:	0023      	movs	r3, r4
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bdb0      	pop	{r4, r5, r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	0800660c 	.word	0x0800660c

08004364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0a8      	b.n	80044c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	2382      	movs	r3, #130	@ 0x82
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	429a      	cmp	r2, r3
 8004388:	d009      	beq.n	800439e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	61da      	str	r2, [r3, #28]
 8004390:	e005      	b.n	800439e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	225d      	movs	r2, #93	@ 0x5d
 80043a8:	5c9b      	ldrb	r3, [r3, r2]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	225c      	movs	r2, #92	@ 0x5c
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fd f81a 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	225d      	movs	r2, #93	@ 0x5d
 80043c4:	2102      	movs	r1, #2
 80043c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2140      	movs	r1, #64	@ 0x40
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	23e0      	movs	r3, #224	@ 0xe0
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d902      	bls.n	80043ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e002      	b.n	80043f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	015b      	lsls	r3, r3, #5
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	23f0      	movs	r3, #240	@ 0xf0
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d008      	beq.n	800440e <HAL_SPI_Init+0xaa>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	23e0      	movs	r3, #224	@ 0xe0
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	429a      	cmp	r2, r3
 8004406:	d002      	beq.n	800440e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	2382      	movs	r3, #130	@ 0x82
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	401a      	ands	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	2384      	movs	r3, #132	@ 0x84
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	400b      	ands	r3, r1
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2102      	movs	r1, #2
 800442a:	400b      	ands	r3, r1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2101      	movs	r1, #1
 8004434:	400b      	ands	r3, r1
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6999      	ldr	r1, [r3, #24]
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	400b      	ands	r3, r1
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2138      	movs	r1, #56	@ 0x38
 800444a:	400b      	ands	r3, r1
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	400b      	ands	r3, r1
 8004456:	431a      	orrs	r2, r3
 8004458:	0011      	movs	r1, r2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800445e:	2380      	movs	r3, #128	@ 0x80
 8004460:	019b      	lsls	r3, r3, #6
 8004462:	401a      	ands	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	2204      	movs	r2, #4
 8004474:	401a      	ands	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	2110      	movs	r1, #16
 800447c:	400b      	ands	r3, r1
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004484:	2108      	movs	r1, #8
 8004486:	400b      	ands	r3, r1
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68d9      	ldr	r1, [r3, #12]
 800448e:	23f0      	movs	r3, #240	@ 0xf0
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	400b      	ands	r3, r1
 8004494:	431a      	orrs	r2, r3
 8004496:	0011      	movs	r1, r2
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	015b      	lsls	r3, r3, #5
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4907      	ldr	r1, [pc, #28]	@ (80044d0 <HAL_SPI_Init+0x16c>)
 80044b4:	400a      	ands	r2, r1
 80044b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	225d      	movs	r2, #93	@ 0x5d
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b004      	add	sp, #16
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	fffff7ff 	.word	0xfffff7ff

080044d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e090      	b.n	800460a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	223d      	movs	r2, #61	@ 0x3d
 80044ec:	5c9b      	ldrb	r3, [r3, r2]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	223c      	movs	r2, #60	@ 0x3c
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0018      	movs	r0, r3
 8004500:	f7fc ffda 	bl	80014b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	223d      	movs	r2, #61	@ 0x3d
 8004508:	2102      	movs	r1, #2
 800450a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	493f      	ldr	r1, [pc, #252]	@ (8004614 <HAL_TIM_Encoder_Init+0x140>)
 8004518:	400a      	ands	r2, r1
 800451a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	0019      	movs	r1, r3
 8004526:	0010      	movs	r0, r2
 8004528:	f000 f9a4 	bl	8004874 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4a31      	ldr	r2, [pc, #196]	@ (8004618 <HAL_TIM_Encoder_Init+0x144>)
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	4313      	orrs	r3, r2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4a2c      	ldr	r2, [pc, #176]	@ (800461c <HAL_TIM_Encoder_Init+0x148>)
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4a2b      	ldr	r2, [pc, #172]	@ (8004620 <HAL_TIM_Encoder_Init+0x14c>)
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	4313      	orrs	r3, r2
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	011a      	lsls	r2, r3, #4
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	4313      	orrs	r3, r2
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2222      	movs	r2, #34	@ 0x22
 80045a2:	4393      	bics	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2288      	movs	r2, #136	@ 0x88
 80045aa:	4393      	bics	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4313      	orrs	r3, r2
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2248      	movs	r2, #72	@ 0x48
 80045dc:	2101      	movs	r1, #1
 80045de:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	223e      	movs	r2, #62	@ 0x3e
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223f      	movs	r2, #63	@ 0x3f
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2244      	movs	r2, #68	@ 0x44
 80045f4:	2101      	movs	r1, #1
 80045f6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2245      	movs	r2, #69	@ 0x45
 80045fc:	2101      	movs	r1, #1
 80045fe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	223d      	movs	r2, #61	@ 0x3d
 8004604:	2101      	movs	r1, #1
 8004606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b006      	add	sp, #24
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	fffebff8 	.word	0xfffebff8
 8004618:	fffffcfc 	.word	0xfffffcfc
 800461c:	fffff3f3 	.word	0xfffff3f3
 8004620:	ffff0f0f 	.word	0xffff0f0f

08004624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2202      	movs	r2, #2
 8004640:	4013      	ands	r3, r2
 8004642:	d021      	beq.n	8004688 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2203      	movs	r2, #3
 8004652:	4252      	negs	r2, r2
 8004654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2203      	movs	r2, #3
 8004664:	4013      	ands	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	0018      	movs	r0, r3
 800466c:	f7fc fabc 	bl	8000be8 <HAL_TIM_IC_CaptureCallback>
 8004670:	e007      	b.n	8004682 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 f8e5 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f8e9 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2204      	movs	r2, #4
 800468c:	4013      	ands	r3, r2
 800468e:	d022      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2204      	movs	r2, #4
 8004694:	4013      	ands	r3, r2
 8004696:	d01e      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2205      	movs	r2, #5
 800469e:	4252      	negs	r2, r2
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	23c0      	movs	r3, #192	@ 0xc0
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4013      	ands	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7fc fa95 	bl	8000be8 <HAL_TIM_IC_CaptureCallback>
 80046be:	e007      	b.n	80046d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 f8be 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 f8c2 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2208      	movs	r2, #8
 80046da:	4013      	ands	r3, r2
 80046dc:	d021      	beq.n	8004722 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4013      	ands	r3, r2
 80046e4:	d01d      	beq.n	8004722 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2209      	movs	r2, #9
 80046ec:	4252      	negs	r2, r2
 80046ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2204      	movs	r2, #4
 80046f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2203      	movs	r2, #3
 80046fe:	4013      	ands	r3, r2
 8004700:	d004      	beq.n	800470c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	0018      	movs	r0, r3
 8004706:	f7fc fa6f 	bl	8000be8 <HAL_TIM_IC_CaptureCallback>
 800470a:	e007      	b.n	800471c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 f898 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f89c 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2210      	movs	r2, #16
 8004726:	4013      	ands	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2210      	movs	r2, #16
 800472e:	4013      	ands	r3, r2
 8004730:	d01e      	beq.n	8004770 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2211      	movs	r2, #17
 8004738:	4252      	negs	r2, r2
 800473a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2208      	movs	r2, #8
 8004740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	23c0      	movs	r3, #192	@ 0xc0
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4013      	ands	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	0018      	movs	r0, r3
 8004754:	f7fc fa48 	bl	8000be8 <HAL_TIM_IC_CaptureCallback>
 8004758:	e007      	b.n	800476a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f871 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f875 	bl	8004854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2201      	movs	r2, #1
 8004774:	4013      	ands	r3, r2
 8004776:	d00c      	beq.n	8004792 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	d008      	beq.n	8004792 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2202      	movs	r2, #2
 8004786:	4252      	negs	r2, r2
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 f851 	bl	8004834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2280      	movs	r2, #128	@ 0x80
 8004796:	4013      	ands	r3, r2
 8004798:	d104      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047a2:	d00b      	beq.n	80047bc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	4013      	ands	r3, r2
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <HAL_TIM_IRQHandler+0x208>)
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 f950 	bl	8004a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	2380      	movs	r3, #128	@ 0x80
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00b      	beq.n	80047de <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2280      	movs	r2, #128	@ 0x80
 80047ca:	4013      	ands	r3, r2
 80047cc:	d007      	beq.n	80047de <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <HAL_TIM_IRQHandler+0x20c>)
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f947 	bl	8004a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2240      	movs	r2, #64	@ 0x40
 80047e2:	4013      	ands	r3, r2
 80047e4:	d00c      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2240      	movs	r2, #64	@ 0x40
 80047ea:	4013      	ands	r3, r2
 80047ec:	d008      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2241      	movs	r2, #65	@ 0x41
 80047f4:	4252      	negs	r2, r2
 80047f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f832 	bl	8004864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2220      	movs	r2, #32
 8004804:	4013      	ands	r3, r2
 8004806:	d00c      	beq.n	8004822 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	4013      	ands	r3, r2
 800480e:	d008      	beq.n	8004822 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2221      	movs	r2, #33	@ 0x21
 8004816:	4252      	negs	r2, r2
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 f915 	bl	8004a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	ffffdf7f 	.word	0xffffdf7f
 8004830:	fffffeff 	.word	0xfffffeff

08004834 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800483c:	46c0      	nop			@ (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b002      	add	sp, #8
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484c:	46c0      	nop			@ (mov r8, r8)
 800484e:	46bd      	mov	sp, r7
 8004850:	b002      	add	sp, #8
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485c:	46c0      	nop			@ (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a36      	ldr	r2, [pc, #216]	@ (8004960 <TIM_Base_SetConfig+0xec>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x20>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a35      	ldr	r2, [pc, #212]	@ (8004964 <TIM_Base_SetConfig+0xf0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2270      	movs	r2, #112	@ 0x70
 8004898:	4393      	bics	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <TIM_Base_SetConfig+0xec>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0x62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004964 <TIM_Base_SetConfig+0xf0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0x62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <TIM_Base_SetConfig+0xf4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0x62>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	@ (800496c <TIM_Base_SetConfig+0xf8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0x62>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0x62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	@ (8004974 <TIM_Base_SetConfig+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a27      	ldr	r2, [pc, #156]	@ (8004978 <TIM_Base_SetConfig+0x104>)
 80048da:	4013      	ands	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2280      	movs	r2, #128	@ 0x80
 80048ec:	4393      	bics	r3, r2
 80048ee:	001a      	movs	r2, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a13      	ldr	r2, [pc, #76]	@ (8004960 <TIM_Base_SetConfig+0xec>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <TIM_Base_SetConfig+0xba>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a14      	ldr	r2, [pc, #80]	@ (800496c <TIM_Base_SetConfig+0xf8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <TIM_Base_SetConfig+0xba>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a13      	ldr	r2, [pc, #76]	@ (8004970 <TIM_Base_SetConfig+0xfc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <TIM_Base_SetConfig+0xba>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <TIM_Base_SetConfig+0x100>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d103      	bne.n	8004936 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2201      	movs	r2, #1
 8004942:	4013      	ands	r3, r2
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2201      	movs	r2, #1
 800494e:	4393      	bics	r3, r2
 8004950:	001a      	movs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	611a      	str	r2, [r3, #16]
  }
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	b004      	add	sp, #16
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40000400 	.word	0x40000400
 8004968:	40002000 	.word	0x40002000
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800
 8004978:	fffffcff 	.word	0xfffffcff

0800497c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	223c      	movs	r2, #60	@ 0x3c
 800498a:	5c9b      	ldrb	r3, [r3, r2]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004990:	2302      	movs	r3, #2
 8004992:	e04f      	b.n	8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	223c      	movs	r2, #60	@ 0x3c
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	223d      	movs	r2, #61	@ 0x3d
 80049a0:	2102      	movs	r1, #2
 80049a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a20      	ldr	r2, [pc, #128]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d108      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2270      	movs	r2, #112	@ 0x70
 80049d4:	4393      	bics	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a13      	ldr	r2, [pc, #76]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a12      	ldr	r2, [pc, #72]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a11      	ldr	r2, [pc, #68]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10c      	bne.n	8004a22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2280      	movs	r2, #128	@ 0x80
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	223d      	movs	r2, #61	@ 0x3d
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223c      	movs	r2, #60	@ 0x3c
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	0018      	movs	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b004      	add	sp, #16
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	ff0fffff 	.word	0xff0fffff
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40014000 	.word	0x40014000

08004a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a64:	46c0      	nop			@ (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e046      	b.n	8004b1c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2288      	movs	r2, #136	@ 0x88
 8004a92:	589b      	ldr	r3, [r3, r2]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2284      	movs	r2, #132	@ 0x84
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7fc fd5a 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2288      	movs	r2, #136	@ 0x88
 8004aac:	2124      	movs	r1, #36	@ 0x24
 8004aae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2101      	movs	r1, #1
 8004abc:	438a      	bics	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fa3a 	bl	8004f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 f8cc 	bl	8004c70 <UART_SetConfig>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01c      	b.n	8004b1c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	490d      	ldr	r1, [pc, #52]	@ (8004b24 <HAL_UART_Init+0xa8>)
 8004aee:	400a      	ands	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	212a      	movs	r1, #42	@ 0x2a
 8004afe:	438a      	bics	r2, r1
 8004b00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 fac9 	bl	80050ac <UART_CheckIdleState>
 8004b1a:	0003      	movs	r3, r0
}
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	ffffb7ff 	.word	0xffffb7ff

08004b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	@ 0x28
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2288      	movs	r2, #136	@ 0x88
 8004b3c:	589b      	ldr	r3, [r3, r2]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d000      	beq.n	8004b44 <HAL_UART_Transmit+0x1c>
 8004b42:	e090      	b.n	8004c66 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_Transmit+0x2a>
 8004b4a:	1dbb      	adds	r3, r7, #6
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e088      	b.n	8004c68 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	2380      	movs	r3, #128	@ 0x80
 8004b5c:	015b      	lsls	r3, r3, #5
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d109      	bne.n	8004b76 <HAL_UART_Transmit+0x4e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d001      	beq.n	8004b76 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e078      	b.n	8004c68 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2290      	movs	r2, #144	@ 0x90
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2288      	movs	r2, #136	@ 0x88
 8004b82:	2121      	movs	r1, #33	@ 0x21
 8004b84:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b86:	f7fc fe47 	bl	8001818 <HAL_GetTick>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1dba      	adds	r2, r7, #6
 8004b92:	2154      	movs	r1, #84	@ 0x54
 8004b94:	8812      	ldrh	r2, [r2, #0]
 8004b96:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1dba      	adds	r2, r7, #6
 8004b9c:	2156      	movs	r1, #86	@ 0x56
 8004b9e:	8812      	ldrh	r2, [r2, #0]
 8004ba0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	2380      	movs	r3, #128	@ 0x80
 8004ba8:	015b      	lsls	r3, r3, #5
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d108      	bne.n	8004bc0 <HAL_UART_Transmit+0x98>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	e003      	b.n	8004bc8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bc8:	e030      	b.n	8004c2c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	0013      	movs	r3, r2
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2180      	movs	r1, #128	@ 0x80
 8004bd8:	f000 fb12 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d005      	beq.n	8004bec <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2288      	movs	r2, #136	@ 0x88
 8004be4:	2120      	movs	r1, #32
 8004be6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e03d      	b.n	8004c68 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	05d2      	lsls	r2, r2, #23
 8004bfe:	0dd2      	lsrs	r2, r2, #23
 8004c00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	3302      	adds	r3, #2
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	e007      	b.n	8004c1a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	3301      	adds	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2256      	movs	r2, #86	@ 0x56
 8004c1e:	5a9b      	ldrh	r3, [r3, r2]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b299      	uxth	r1, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2256      	movs	r2, #86	@ 0x56
 8004c2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2256      	movs	r2, #86	@ 0x56
 8004c30:	5a9b      	ldrh	r3, [r3, r2]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1c8      	bne.n	8004bca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	0013      	movs	r3, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	2140      	movs	r1, #64	@ 0x40
 8004c46:	f000 fadb 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8004c4a:	1e03      	subs	r3, r0, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2288      	movs	r2, #136	@ 0x88
 8004c52:	2120      	movs	r1, #32
 8004c54:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e006      	b.n	8004c68 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2288      	movs	r2, #136	@ 0x88
 8004c5e:	2120      	movs	r1, #32
 8004c60:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e000      	b.n	8004c68 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004c66:	2302      	movs	r3, #2
  }
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b008      	add	sp, #32
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c78:	231a      	movs	r3, #26
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4aa1      	ldr	r2, [pc, #644]	@ (8004f24 <UART_SetConfig+0x2b4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a9c      	ldr	r2, [pc, #624]	@ (8004f28 <UART_SetConfig+0x2b8>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a93      	ldr	r2, [pc, #588]	@ (8004f2c <UART_SetConfig+0x2bc>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a89      	ldr	r2, [pc, #548]	@ (8004f30 <UART_SetConfig+0x2c0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d127      	bne.n	8004d5e <UART_SetConfig+0xee>
 8004d0e:	4b89      	ldr	r3, [pc, #548]	@ (8004f34 <UART_SetConfig+0x2c4>)
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	2203      	movs	r2, #3
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d017      	beq.n	8004d4a <UART_SetConfig+0xda>
 8004d1a:	d81b      	bhi.n	8004d54 <UART_SetConfig+0xe4>
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d00a      	beq.n	8004d36 <UART_SetConfig+0xc6>
 8004d20:	d818      	bhi.n	8004d54 <UART_SetConfig+0xe4>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <UART_SetConfig+0xbc>
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d00a      	beq.n	8004d40 <UART_SetConfig+0xd0>
 8004d2a:	e013      	b.n	8004d54 <UART_SetConfig+0xe4>
 8004d2c:	231b      	movs	r3, #27
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e021      	b.n	8004d7a <UART_SetConfig+0x10a>
 8004d36:	231b      	movs	r3, #27
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	e01c      	b.n	8004d7a <UART_SetConfig+0x10a>
 8004d40:	231b      	movs	r3, #27
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2204      	movs	r2, #4
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e017      	b.n	8004d7a <UART_SetConfig+0x10a>
 8004d4a:	231b      	movs	r3, #27
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	2208      	movs	r2, #8
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e012      	b.n	8004d7a <UART_SetConfig+0x10a>
 8004d54:	231b      	movs	r3, #27
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	2210      	movs	r2, #16
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e00d      	b.n	8004d7a <UART_SetConfig+0x10a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a75      	ldr	r2, [pc, #468]	@ (8004f38 <UART_SetConfig+0x2c8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d104      	bne.n	8004d72 <UART_SetConfig+0x102>
 8004d68:	231b      	movs	r3, #27
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e003      	b.n	8004d7a <UART_SetConfig+0x10a>
 8004d72:	231b      	movs	r3, #27
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2210      	movs	r2, #16
 8004d78:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	2380      	movs	r3, #128	@ 0x80
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d000      	beq.n	8004d88 <UART_SetConfig+0x118>
 8004d86:	e065      	b.n	8004e54 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004d88:	231b      	movs	r3, #27
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d015      	beq.n	8004dbe <UART_SetConfig+0x14e>
 8004d92:	dc18      	bgt.n	8004dc6 <UART_SetConfig+0x156>
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d00d      	beq.n	8004db4 <UART_SetConfig+0x144>
 8004d98:	dc15      	bgt.n	8004dc6 <UART_SetConfig+0x156>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <UART_SetConfig+0x134>
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d005      	beq.n	8004dae <UART_SetConfig+0x13e>
 8004da2:	e010      	b.n	8004dc6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da4:	f7ff fac8 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8004da8:	0003      	movs	r3, r0
 8004daa:	617b      	str	r3, [r7, #20]
        break;
 8004dac:	e012      	b.n	8004dd4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dae:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004db0:	617b      	str	r3, [r7, #20]
        break;
 8004db2:	e00f      	b.n	8004dd4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db4:	f7ff fa34 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8004db8:	0003      	movs	r3, r0
 8004dba:	617b      	str	r3, [r7, #20]
        break;
 8004dbc:	e00a      	b.n	8004dd4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	617b      	str	r3, [r7, #20]
        break;
 8004dc4:	e006      	b.n	8004dd4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dca:	231a      	movs	r3, #26
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
        break;
 8004dd2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d100      	bne.n	8004ddc <UART_SetConfig+0x16c>
 8004dda:	e08d      	b.n	8004ef8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004de0:	4b57      	ldr	r3, [pc, #348]	@ (8004f40 <UART_SetConfig+0x2d0>)
 8004de2:	0052      	lsls	r2, r2, #1
 8004de4:	5ad3      	ldrh	r3, [r2, r3]
 8004de6:	0019      	movs	r1, r3
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f7fb f991 	bl	8000110 <__udivsi3>
 8004dee:	0003      	movs	r3, r0
 8004df0:	005a      	lsls	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	18d2      	adds	r2, r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	0019      	movs	r1, r3
 8004e00:	0010      	movs	r0, r2
 8004e02:	f7fb f985 	bl	8000110 <__udivsi3>
 8004e06:	0003      	movs	r3, r0
 8004e08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b0f      	cmp	r3, #15
 8004e0e:	d91c      	bls.n	8004e4a <UART_SetConfig+0x1da>
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	025b      	lsls	r3, r3, #9
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d217      	bcs.n	8004e4a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	200e      	movs	r0, #14
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	210f      	movs	r1, #15
 8004e24:	438a      	bics	r2, r1
 8004e26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2207      	movs	r2, #7
 8004e30:	4013      	ands	r3, r2
 8004e32:	b299      	uxth	r1, r3
 8004e34:	183b      	adds	r3, r7, r0
 8004e36:	183a      	adds	r2, r7, r0
 8004e38:	8812      	ldrh	r2, [r2, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	183a      	adds	r2, r7, r0
 8004e44:	8812      	ldrh	r2, [r2, #0]
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	e056      	b.n	8004ef8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4a:	231a      	movs	r3, #26
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e051      	b.n	8004ef8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e54:	231b      	movs	r3, #27
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d015      	beq.n	8004e8a <UART_SetConfig+0x21a>
 8004e5e:	dc18      	bgt.n	8004e92 <UART_SetConfig+0x222>
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d00d      	beq.n	8004e80 <UART_SetConfig+0x210>
 8004e64:	dc15      	bgt.n	8004e92 <UART_SetConfig+0x222>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <UART_SetConfig+0x200>
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d005      	beq.n	8004e7a <UART_SetConfig+0x20a>
 8004e6e:	e010      	b.n	8004e92 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7ff fa62 	bl	8004338 <HAL_RCC_GetPCLK1Freq>
 8004e74:	0003      	movs	r3, r0
 8004e76:	617b      	str	r3, [r7, #20]
        break;
 8004e78:	e012      	b.n	8004ea0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <UART_SetConfig+0x2cc>)
 8004e7c:	617b      	str	r3, [r7, #20]
        break;
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e80:	f7ff f9ce 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8004e84:	0003      	movs	r3, r0
 8004e86:	617b      	str	r3, [r7, #20]
        break;
 8004e88:	e00a      	b.n	8004ea0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	617b      	str	r3, [r7, #20]
        break;
 8004e90:	e006      	b.n	8004ea0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e96:	231a      	movs	r3, #26
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
        break;
 8004e9e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d028      	beq.n	8004ef8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eaa:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <UART_SetConfig+0x2d0>)
 8004eac:	0052      	lsls	r2, r2, #1
 8004eae:	5ad3      	ldrh	r3, [r2, r3]
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7fb f92c 	bl	8000110 <__udivsi3>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	001a      	movs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	18d2      	adds	r2, r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	0019      	movs	r1, r3
 8004eca:	0010      	movs	r0, r2
 8004ecc:	f7fb f920 	bl	8000110 <__udivsi3>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d90a      	bls.n	8004ef0 <UART_SetConfig+0x280>
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	025b      	lsls	r3, r3, #9
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d205      	bcs.n	8004ef0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e003      	b.n	8004ef8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef0:	231a      	movs	r3, #26
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	226a      	movs	r2, #106	@ 0x6a
 8004efc:	2101      	movs	r1, #1
 8004efe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2268      	movs	r2, #104	@ 0x68
 8004f04:	2101      	movs	r1, #1
 8004f06:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f14:	231a      	movs	r3, #26
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	781b      	ldrb	r3, [r3, #0]
}
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b008      	add	sp, #32
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	cfff69f3 	.word	0xcfff69f3
 8004f28:	ffffcfff 	.word	0xffffcfff
 8004f2c:	11fff4ff 	.word	0x11fff4ff
 8004f30:	40013800 	.word	0x40013800
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40004400 	.word	0x40004400
 8004f3c:	00f42400 	.word	0x00f42400
 8004f40:	0800662c 	.word	0x0800662c

08004f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	2208      	movs	r2, #8
 8004f52:	4013      	ands	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005088 <UART_AdvFeatureConfig+0x144>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	2201      	movs	r2, #1
 8004f74:	4013      	ands	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4a43      	ldr	r2, [pc, #268]	@ (800508c <UART_AdvFeatureConfig+0x148>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	2202      	movs	r2, #2
 8004f96:	4013      	ands	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8005090 <UART_AdvFeatureConfig+0x14c>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4a34      	ldr	r2, [pc, #208]	@ (8005094 <UART_AdvFeatureConfig+0x150>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	2210      	movs	r2, #16
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <UART_AdvFeatureConfig+0x154>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4a25      	ldr	r2, [pc, #148]	@ (800509c <UART_AdvFeatureConfig+0x158>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	2240      	movs	r2, #64	@ 0x40
 800501e:	4013      	ands	r3, r2
 8005020:	d01d      	beq.n	800505e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a1d      	ldr	r2, [pc, #116]	@ (80050a0 <UART_AdvFeatureConfig+0x15c>)
 800502a:	4013      	ands	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	035b      	lsls	r3, r3, #13
 8005042:	429a      	cmp	r2, r3
 8005044:	d10b      	bne.n	800505e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a15      	ldr	r2, [pc, #84]	@ (80050a4 <UART_AdvFeatureConfig+0x160>)
 800504e:	4013      	ands	r3, r2
 8005050:	0019      	movs	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	2280      	movs	r2, #128	@ 0x80
 8005064:	4013      	ands	r3, r2
 8005066:	d00b      	beq.n	8005080 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4a0e      	ldr	r2, [pc, #56]	@ (80050a8 <UART_AdvFeatureConfig+0x164>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  }
}
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	b002      	add	sp, #8
 8005086:	bd80      	pop	{r7, pc}
 8005088:	ffff7fff 	.word	0xffff7fff
 800508c:	fffdffff 	.word	0xfffdffff
 8005090:	fffeffff 	.word	0xfffeffff
 8005094:	fffbffff 	.word	0xfffbffff
 8005098:	ffffefff 	.word	0xffffefff
 800509c:	ffffdfff 	.word	0xffffdfff
 80050a0:	ffefffff 	.word	0xffefffff
 80050a4:	ff9fffff 	.word	0xff9fffff
 80050a8:	fff7ffff 	.word	0xfff7ffff

080050ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b092      	sub	sp, #72	@ 0x48
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2290      	movs	r2, #144	@ 0x90
 80050b8:	2100      	movs	r1, #0
 80050ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050bc:	f7fc fbac 	bl	8001818 <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2208      	movs	r2, #8
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d12d      	bne.n	800512e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d4:	2280      	movs	r2, #128	@ 0x80
 80050d6:	0391      	lsls	r1, r2, #14
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <UART_CheckIdleState+0x14c>)
 80050dc:	9200      	str	r2, [sp, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	f000 f88e 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80050e4:	1e03      	subs	r3, r0, #0
 80050e6:	d022      	beq.n	800512e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f2:	2301      	movs	r3, #1
 80050f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	f383 8810 	msr	PRIMASK, r3
}
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2180      	movs	r1, #128	@ 0x80
 800510a:	438a      	bics	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	f383 8810 	msr	PRIMASK, r3
}
 8005118:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2288      	movs	r2, #136	@ 0x88
 800511e:	2120      	movs	r1, #32
 8005120:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2284      	movs	r2, #132	@ 0x84
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e060      	b.n	80051f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2204      	movs	r2, #4
 8005136:	4013      	ands	r3, r2
 8005138:	2b04      	cmp	r3, #4
 800513a:	d146      	bne.n	80051ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800513c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513e:	2280      	movs	r2, #128	@ 0x80
 8005140:	03d1      	lsls	r1, r2, #15
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4a2c      	ldr	r2, [pc, #176]	@ (80051f8 <UART_CheckIdleState+0x14c>)
 8005146:	9200      	str	r2, [sp, #0]
 8005148:	2200      	movs	r2, #0
 800514a:	f000 f859 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 800514e:	1e03      	subs	r3, r0, #0
 8005150:	d03b      	beq.n	80051ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005152:	f3ef 8310 	mrs	r3, PRIMASK
 8005156:	60fb      	str	r3, [r7, #12]
  return(result);
 8005158:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800515a:	637b      	str	r3, [r7, #52]	@ 0x34
 800515c:	2301      	movs	r3, #1
 800515e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4922      	ldr	r1, [pc, #136]	@ (80051fc <UART_CheckIdleState+0x150>)
 8005174:	400a      	ands	r2, r1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f383 8810 	msr	PRIMASK, r3
}
 8005182:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005184:	f3ef 8310 	mrs	r3, PRIMASK
 8005188:	61bb      	str	r3, [r7, #24]
  return(result);
 800518a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	633b      	str	r3, [r7, #48]	@ 0x30
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f383 8810 	msr	PRIMASK, r3
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2101      	movs	r1, #1
 80051a6:	438a      	bics	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f383 8810 	msr	PRIMASK, r3
}
 80051b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	228c      	movs	r2, #140	@ 0x8c
 80051ba:	2120      	movs	r1, #32
 80051bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2284      	movs	r2, #132	@ 0x84
 80051c2:	2100      	movs	r1, #0
 80051c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e012      	b.n	80051f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2288      	movs	r2, #136	@ 0x88
 80051ce:	2120      	movs	r1, #32
 80051d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	228c      	movs	r2, #140	@ 0x8c
 80051d6:	2120      	movs	r1, #32
 80051d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2284      	movs	r2, #132	@ 0x84
 80051ea:	2100      	movs	r1, #0
 80051ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b010      	add	sp, #64	@ 0x40
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	01ffffff 	.word	0x01ffffff
 80051fc:	fffffedf 	.word	0xfffffedf

08005200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	1dfb      	adds	r3, r7, #7
 800520e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	e051      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3301      	adds	r3, #1
 8005216:	d04e      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005218:	f7fc fafe 	bl	8001818 <HAL_GetTick>
 800521c:	0002      	movs	r2, r0
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e051      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2204      	movs	r2, #4
 800523a:	4013      	ands	r3, r2
 800523c:	d03b      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b80      	cmp	r3, #128	@ 0x80
 8005242:	d038      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b40      	cmp	r3, #64	@ 0x40
 8005248:	d035      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	2208      	movs	r2, #8
 8005252:	4013      	ands	r3, r2
 8005254:	2b08      	cmp	r3, #8
 8005256:	d111      	bne.n	800527c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	0018      	movs	r0, r3
 8005264:	f000 f83c 	bl	80052e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2290      	movs	r2, #144	@ 0x90
 800526c:	2108      	movs	r1, #8
 800526e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2284      	movs	r2, #132	@ 0x84
 8005274:	2100      	movs	r1, #0
 8005276:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e02c      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	401a      	ands	r2, r3
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	429a      	cmp	r2, r3
 800528e:	d112      	bne.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2280      	movs	r2, #128	@ 0x80
 8005296:	0112      	lsls	r2, r2, #4
 8005298:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 f81f 	bl	80052e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2290      	movs	r2, #144	@ 0x90
 80052a6:	2120      	movs	r1, #32
 80052a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2284      	movs	r2, #132	@ 0x84
 80052ae:	2100      	movs	r1, #0
 80052b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00f      	b.n	80052d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	4013      	ands	r3, r2
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	425a      	negs	r2, r3
 80052c6:	4153      	adcs	r3, r2
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	001a      	movs	r2, r3
 80052cc:	1dfb      	adds	r3, r7, #7
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d09e      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	0018      	movs	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08e      	sub	sp, #56	@ 0x38
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ec:	617b      	str	r3, [r7, #20]
  return(result);
 80052ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f2:	2301      	movs	r3, #1
 80052f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4926      	ldr	r1, [pc, #152]	@ (80053a4 <UART_EndRxTransfer+0xc4>)
 800530a:	400a      	ands	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531a:	f3ef 8310 	mrs	r3, PRIMASK
 800531e:	623b      	str	r3, [r7, #32]
  return(result);
 8005320:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005322:	633b      	str	r3, [r7, #48]	@ 0x30
 8005324:	2301      	movs	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	491b      	ldr	r1, [pc, #108]	@ (80053a8 <UART_EndRxTransfer+0xc8>)
 800533c:	400a      	ands	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005342:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005350:	2b01      	cmp	r3, #1
 8005352:	d118      	bne.n	8005386 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	60bb      	str	r3, [r7, #8]
  return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535e:	2301      	movs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2110      	movs	r1, #16
 8005376:	438a      	bics	r2, r1
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	228c      	movs	r2, #140	@ 0x8c
 800538a:	2120      	movs	r1, #32
 800538c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b00e      	add	sp, #56	@ 0x38
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	fffffedf 	.word	0xfffffedf
 80053a8:	effffffe 	.word	0xeffffffe

080053ac <sniprintf>:
 80053ac:	b40c      	push	{r2, r3}
 80053ae:	b530      	push	{r4, r5, lr}
 80053b0:	4b17      	ldr	r3, [pc, #92]	@ (8005410 <sniprintf+0x64>)
 80053b2:	000c      	movs	r4, r1
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	b09d      	sub	sp, #116	@ 0x74
 80053b8:	2900      	cmp	r1, #0
 80053ba:	da08      	bge.n	80053ce <sniprintf+0x22>
 80053bc:	238b      	movs	r3, #139	@ 0x8b
 80053be:	2001      	movs	r0, #1
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	4240      	negs	r0, r0
 80053c4:	b01d      	add	sp, #116	@ 0x74
 80053c6:	bc30      	pop	{r4, r5}
 80053c8:	bc08      	pop	{r3}
 80053ca:	b002      	add	sp, #8
 80053cc:	4718      	bx	r3
 80053ce:	2382      	movs	r3, #130	@ 0x82
 80053d0:	466a      	mov	r2, sp
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	8293      	strh	r3, [r2, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9002      	str	r0, [sp, #8]
 80053da:	9006      	str	r0, [sp, #24]
 80053dc:	4299      	cmp	r1, r3
 80053de:	d000      	beq.n	80053e2 <sniprintf+0x36>
 80053e0:	1e4b      	subs	r3, r1, #1
 80053e2:	9304      	str	r3, [sp, #16]
 80053e4:	9307      	str	r3, [sp, #28]
 80053e6:	2301      	movs	r3, #1
 80053e8:	466a      	mov	r2, sp
 80053ea:	425b      	negs	r3, r3
 80053ec:	82d3      	strh	r3, [r2, #22]
 80053ee:	0028      	movs	r0, r5
 80053f0:	ab21      	add	r3, sp, #132	@ 0x84
 80053f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80053f4:	a902      	add	r1, sp, #8
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	f000 f9a6 	bl	8005748 <_svfiprintf_r>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	da01      	bge.n	8005404 <sniprintf+0x58>
 8005400:	238b      	movs	r3, #139	@ 0x8b
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	2c00      	cmp	r4, #0
 8005406:	d0dd      	beq.n	80053c4 <sniprintf+0x18>
 8005408:	2200      	movs	r2, #0
 800540a:	9b02      	ldr	r3, [sp, #8]
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e7d9      	b.n	80053c4 <sniprintf+0x18>
 8005410:	2000000c 	.word	0x2000000c

08005414 <memset>:
 8005414:	0003      	movs	r3, r0
 8005416:	1882      	adds	r2, r0, r2
 8005418:	4293      	cmp	r3, r2
 800541a:	d100      	bne.n	800541e <memset+0xa>
 800541c:	4770      	bx	lr
 800541e:	7019      	strb	r1, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	e7f9      	b.n	8005418 <memset+0x4>

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	@ (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	2000000c 	.word	0x2000000c

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	2600      	movs	r6, #0
 8005434:	4c0c      	ldr	r4, [pc, #48]	@ (8005468 <__libc_init_array+0x38>)
 8005436:	4d0d      	ldr	r5, [pc, #52]	@ (800546c <__libc_init_array+0x3c>)
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	2600      	movs	r6, #0
 8005442:	f000 fc65 	bl	8005d10 <_init>
 8005446:	4c0a      	ldr	r4, [pc, #40]	@ (8005470 <__libc_init_array+0x40>)
 8005448:	4d0a      	ldr	r5, [pc, #40]	@ (8005474 <__libc_init_array+0x44>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	00b3      	lsls	r3, r6, #2
 8005456:	58eb      	ldr	r3, [r5, r3]
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	00b3      	lsls	r3, r6, #2
 8005460:	58eb      	ldr	r3, [r5, r3]
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08006678 	.word	0x08006678
 800546c:	08006678 	.word	0x08006678
 8005470:	0800667c 	.word	0x0800667c
 8005474:	08006678 	.word	0x08006678

08005478 <__retarget_lock_acquire_recursive>:
 8005478:	4770      	bx	lr

0800547a <__retarget_lock_release_recursive>:
 800547a:	4770      	bx	lr

0800547c <memcpy>:
 800547c:	2300      	movs	r3, #0
 800547e:	b510      	push	{r4, lr}
 8005480:	429a      	cmp	r2, r3
 8005482:	d100      	bne.n	8005486 <memcpy+0xa>
 8005484:	bd10      	pop	{r4, pc}
 8005486:	5ccc      	ldrb	r4, [r1, r3]
 8005488:	54c4      	strb	r4, [r0, r3]
 800548a:	3301      	adds	r3, #1
 800548c:	e7f8      	b.n	8005480 <memcpy+0x4>
	...

08005490 <_free_r>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	0005      	movs	r5, r0
 8005494:	1e0c      	subs	r4, r1, #0
 8005496:	d010      	beq.n	80054ba <_free_r+0x2a>
 8005498:	3c04      	subs	r4, #4
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da00      	bge.n	80054a2 <_free_r+0x12>
 80054a0:	18e4      	adds	r4, r4, r3
 80054a2:	0028      	movs	r0, r5
 80054a4:	f000 f8e0 	bl	8005668 <__malloc_lock>
 80054a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005520 <_free_r+0x90>)
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d105      	bne.n	80054bc <_free_r+0x2c>
 80054b0:	6063      	str	r3, [r4, #4]
 80054b2:	6014      	str	r4, [r2, #0]
 80054b4:	0028      	movs	r0, r5
 80054b6:	f000 f8df 	bl	8005678 <__malloc_unlock>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d908      	bls.n	80054d2 <_free_r+0x42>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	1821      	adds	r1, r4, r0
 80054c4:	428b      	cmp	r3, r1
 80054c6:	d1f3      	bne.n	80054b0 <_free_r+0x20>
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1809      	adds	r1, r1, r0
 80054ce:	6021      	str	r1, [r4, #0]
 80054d0:	e7ee      	b.n	80054b0 <_free_r+0x20>
 80054d2:	001a      	movs	r2, r3
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <_free_r+0x4e>
 80054da:	42a3      	cmp	r3, r4
 80054dc:	d9f9      	bls.n	80054d2 <_free_r+0x42>
 80054de:	6811      	ldr	r1, [r2, #0]
 80054e0:	1850      	adds	r0, r2, r1
 80054e2:	42a0      	cmp	r0, r4
 80054e4:	d10b      	bne.n	80054fe <_free_r+0x6e>
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	1809      	adds	r1, r1, r0
 80054ea:	1850      	adds	r0, r2, r1
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	4283      	cmp	r3, r0
 80054f0:	d1e0      	bne.n	80054b4 <_free_r+0x24>
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	1841      	adds	r1, r0, r1
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	6053      	str	r3, [r2, #4]
 80054fc:	e7da      	b.n	80054b4 <_free_r+0x24>
 80054fe:	42a0      	cmp	r0, r4
 8005500:	d902      	bls.n	8005508 <_free_r+0x78>
 8005502:	230c      	movs	r3, #12
 8005504:	602b      	str	r3, [r5, #0]
 8005506:	e7d5      	b.n	80054b4 <_free_r+0x24>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	1821      	adds	r1, r4, r0
 800550c:	428b      	cmp	r3, r1
 800550e:	d103      	bne.n	8005518 <_free_r+0x88>
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	1809      	adds	r1, r1, r0
 8005516:	6021      	str	r1, [r4, #0]
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	6054      	str	r4, [r2, #4]
 800551c:	e7ca      	b.n	80054b4 <_free_r+0x24>
 800551e:	46c0      	nop			@ (mov r8, r8)
 8005520:	20000848 	.word	0x20000848

08005524 <sbrk_aligned>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4e0f      	ldr	r6, [pc, #60]	@ (8005564 <sbrk_aligned+0x40>)
 8005528:	000d      	movs	r5, r1
 800552a:	6831      	ldr	r1, [r6, #0]
 800552c:	0004      	movs	r4, r0
 800552e:	2900      	cmp	r1, #0
 8005530:	d102      	bne.n	8005538 <sbrk_aligned+0x14>
 8005532:	f000 fb99 	bl	8005c68 <_sbrk_r>
 8005536:	6030      	str	r0, [r6, #0]
 8005538:	0029      	movs	r1, r5
 800553a:	0020      	movs	r0, r4
 800553c:	f000 fb94 	bl	8005c68 <_sbrk_r>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d103      	bne.n	800554c <sbrk_aligned+0x28>
 8005544:	2501      	movs	r5, #1
 8005546:	426d      	negs	r5, r5
 8005548:	0028      	movs	r0, r5
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	2303      	movs	r3, #3
 800554e:	1cc5      	adds	r5, r0, #3
 8005550:	439d      	bics	r5, r3
 8005552:	42a8      	cmp	r0, r5
 8005554:	d0f8      	beq.n	8005548 <sbrk_aligned+0x24>
 8005556:	1a29      	subs	r1, r5, r0
 8005558:	0020      	movs	r0, r4
 800555a:	f000 fb85 	bl	8005c68 <_sbrk_r>
 800555e:	3001      	adds	r0, #1
 8005560:	d1f2      	bne.n	8005548 <sbrk_aligned+0x24>
 8005562:	e7ef      	b.n	8005544 <sbrk_aligned+0x20>
 8005564:	20000844 	.word	0x20000844

08005568 <_malloc_r>:
 8005568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800556a:	2203      	movs	r2, #3
 800556c:	1ccb      	adds	r3, r1, #3
 800556e:	4393      	bics	r3, r2
 8005570:	3308      	adds	r3, #8
 8005572:	0005      	movs	r5, r0
 8005574:	001f      	movs	r7, r3
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d234      	bcs.n	80055e4 <_malloc_r+0x7c>
 800557a:	270c      	movs	r7, #12
 800557c:	42b9      	cmp	r1, r7
 800557e:	d833      	bhi.n	80055e8 <_malloc_r+0x80>
 8005580:	0028      	movs	r0, r5
 8005582:	f000 f871 	bl	8005668 <__malloc_lock>
 8005586:	4e37      	ldr	r6, [pc, #220]	@ (8005664 <_malloc_r+0xfc>)
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	001c      	movs	r4, r3
 800558c:	2c00      	cmp	r4, #0
 800558e:	d12f      	bne.n	80055f0 <_malloc_r+0x88>
 8005590:	0039      	movs	r1, r7
 8005592:	0028      	movs	r0, r5
 8005594:	f7ff ffc6 	bl	8005524 <sbrk_aligned>
 8005598:	0004      	movs	r4, r0
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	d15f      	bne.n	800565e <_malloc_r+0xf6>
 800559e:	6834      	ldr	r4, [r6, #0]
 80055a0:	9400      	str	r4, [sp, #0]
 80055a2:	9b00      	ldr	r3, [sp, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d14a      	bne.n	800563e <_malloc_r+0xd6>
 80055a8:	2c00      	cmp	r4, #0
 80055aa:	d052      	beq.n	8005652 <_malloc_r+0xea>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	0028      	movs	r0, r5
 80055b0:	18e3      	adds	r3, r4, r3
 80055b2:	9900      	ldr	r1, [sp, #0]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	f000 fb57 	bl	8005c68 <_sbrk_r>
 80055ba:	9b01      	ldr	r3, [sp, #4]
 80055bc:	4283      	cmp	r3, r0
 80055be:	d148      	bne.n	8005652 <_malloc_r+0xea>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	0028      	movs	r0, r5
 80055c4:	1aff      	subs	r7, r7, r3
 80055c6:	0039      	movs	r1, r7
 80055c8:	f7ff ffac 	bl	8005524 <sbrk_aligned>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d040      	beq.n	8005652 <_malloc_r+0xea>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	19db      	adds	r3, r3, r7
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	6833      	ldr	r3, [r6, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	2a00      	cmp	r2, #0
 80055dc:	d133      	bne.n	8005646 <_malloc_r+0xde>
 80055de:	9b00      	ldr	r3, [sp, #0]
 80055e0:	6033      	str	r3, [r6, #0]
 80055e2:	e019      	b.n	8005618 <_malloc_r+0xb0>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dac9      	bge.n	800557c <_malloc_r+0x14>
 80055e8:	230c      	movs	r3, #12
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	2000      	movs	r0, #0
 80055ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055f0:	6821      	ldr	r1, [r4, #0]
 80055f2:	1bc9      	subs	r1, r1, r7
 80055f4:	d420      	bmi.n	8005638 <_malloc_r+0xd0>
 80055f6:	290b      	cmp	r1, #11
 80055f8:	d90a      	bls.n	8005610 <_malloc_r+0xa8>
 80055fa:	19e2      	adds	r2, r4, r7
 80055fc:	6027      	str	r7, [r4, #0]
 80055fe:	42a3      	cmp	r3, r4
 8005600:	d104      	bne.n	800560c <_malloc_r+0xa4>
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	6011      	str	r1, [r2, #0]
 8005608:	6053      	str	r3, [r2, #4]
 800560a:	e005      	b.n	8005618 <_malloc_r+0xb0>
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	e7f9      	b.n	8005604 <_malloc_r+0x9c>
 8005610:	6862      	ldr	r2, [r4, #4]
 8005612:	42a3      	cmp	r3, r4
 8005614:	d10e      	bne.n	8005634 <_malloc_r+0xcc>
 8005616:	6032      	str	r2, [r6, #0]
 8005618:	0028      	movs	r0, r5
 800561a:	f000 f82d 	bl	8005678 <__malloc_unlock>
 800561e:	0020      	movs	r0, r4
 8005620:	2207      	movs	r2, #7
 8005622:	300b      	adds	r0, #11
 8005624:	1d23      	adds	r3, r4, #4
 8005626:	4390      	bics	r0, r2
 8005628:	1ac2      	subs	r2, r0, r3
 800562a:	4298      	cmp	r0, r3
 800562c:	d0df      	beq.n	80055ee <_malloc_r+0x86>
 800562e:	1a1b      	subs	r3, r3, r0
 8005630:	50a3      	str	r3, [r4, r2]
 8005632:	e7dc      	b.n	80055ee <_malloc_r+0x86>
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e7ef      	b.n	8005618 <_malloc_r+0xb0>
 8005638:	0023      	movs	r3, r4
 800563a:	6864      	ldr	r4, [r4, #4]
 800563c:	e7a6      	b.n	800558c <_malloc_r+0x24>
 800563e:	9c00      	ldr	r4, [sp, #0]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	e7ad      	b.n	80055a2 <_malloc_r+0x3a>
 8005646:	001a      	movs	r2, r3
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	42a3      	cmp	r3, r4
 800564c:	d1fb      	bne.n	8005646 <_malloc_r+0xde>
 800564e:	2300      	movs	r3, #0
 8005650:	e7da      	b.n	8005608 <_malloc_r+0xa0>
 8005652:	230c      	movs	r3, #12
 8005654:	0028      	movs	r0, r5
 8005656:	602b      	str	r3, [r5, #0]
 8005658:	f000 f80e 	bl	8005678 <__malloc_unlock>
 800565c:	e7c6      	b.n	80055ec <_malloc_r+0x84>
 800565e:	6007      	str	r7, [r0, #0]
 8005660:	e7da      	b.n	8005618 <_malloc_r+0xb0>
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	20000848 	.word	0x20000848

08005668 <__malloc_lock>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4802      	ldr	r0, [pc, #8]	@ (8005674 <__malloc_lock+0xc>)
 800566c:	f7ff ff04 	bl	8005478 <__retarget_lock_acquire_recursive>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	20000840 	.word	0x20000840

08005678 <__malloc_unlock>:
 8005678:	b510      	push	{r4, lr}
 800567a:	4802      	ldr	r0, [pc, #8]	@ (8005684 <__malloc_unlock+0xc>)
 800567c:	f7ff fefd 	bl	800547a <__retarget_lock_release_recursive>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	20000840 	.word	0x20000840

08005688 <__ssputs_r>:
 8005688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568a:	688e      	ldr	r6, [r1, #8]
 800568c:	b085      	sub	sp, #20
 800568e:	001f      	movs	r7, r3
 8005690:	000c      	movs	r4, r1
 8005692:	680b      	ldr	r3, [r1, #0]
 8005694:	9002      	str	r0, [sp, #8]
 8005696:	9203      	str	r2, [sp, #12]
 8005698:	42be      	cmp	r6, r7
 800569a:	d830      	bhi.n	80056fe <__ssputs_r+0x76>
 800569c:	210c      	movs	r1, #12
 800569e:	5e62      	ldrsh	r2, [r4, r1]
 80056a0:	2190      	movs	r1, #144	@ 0x90
 80056a2:	00c9      	lsls	r1, r1, #3
 80056a4:	420a      	tst	r2, r1
 80056a6:	d028      	beq.n	80056fa <__ssputs_r+0x72>
 80056a8:	2003      	movs	r0, #3
 80056aa:	6921      	ldr	r1, [r4, #16]
 80056ac:	1a5b      	subs	r3, r3, r1
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	4343      	muls	r3, r0
 80056b4:	9801      	ldr	r0, [sp, #4]
 80056b6:	0fdd      	lsrs	r5, r3, #31
 80056b8:	18ed      	adds	r5, r5, r3
 80056ba:	1c7b      	adds	r3, r7, #1
 80056bc:	181b      	adds	r3, r3, r0
 80056be:	106d      	asrs	r5, r5, #1
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	d900      	bls.n	80056c6 <__ssputs_r+0x3e>
 80056c4:	001d      	movs	r5, r3
 80056c6:	0552      	lsls	r2, r2, #21
 80056c8:	d528      	bpl.n	800571c <__ssputs_r+0x94>
 80056ca:	0029      	movs	r1, r5
 80056cc:	9802      	ldr	r0, [sp, #8]
 80056ce:	f7ff ff4b 	bl	8005568 <_malloc_r>
 80056d2:	1e06      	subs	r6, r0, #0
 80056d4:	d02c      	beq.n	8005730 <__ssputs_r+0xa8>
 80056d6:	9a01      	ldr	r2, [sp, #4]
 80056d8:	6921      	ldr	r1, [r4, #16]
 80056da:	f7ff fecf 	bl	800547c <memcpy>
 80056de:	89a2      	ldrh	r2, [r4, #12]
 80056e0:	4b18      	ldr	r3, [pc, #96]	@ (8005744 <__ssputs_r+0xbc>)
 80056e2:	401a      	ands	r2, r3
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	4313      	orrs	r3, r2
 80056e8:	81a3      	strh	r3, [r4, #12]
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	6126      	str	r6, [r4, #16]
 80056ee:	18f6      	adds	r6, r6, r3
 80056f0:	6026      	str	r6, [r4, #0]
 80056f2:	003e      	movs	r6, r7
 80056f4:	6165      	str	r5, [r4, #20]
 80056f6:	1aed      	subs	r5, r5, r3
 80056f8:	60a5      	str	r5, [r4, #8]
 80056fa:	42be      	cmp	r6, r7
 80056fc:	d900      	bls.n	8005700 <__ssputs_r+0x78>
 80056fe:	003e      	movs	r6, r7
 8005700:	0032      	movs	r2, r6
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	f000 fa9b 	bl	8005c40 <memmove>
 800570a:	2000      	movs	r0, #0
 800570c:	68a3      	ldr	r3, [r4, #8]
 800570e:	1b9b      	subs	r3, r3, r6
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	199b      	adds	r3, r3, r6
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	b005      	add	sp, #20
 800571a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571c:	002a      	movs	r2, r5
 800571e:	9802      	ldr	r0, [sp, #8]
 8005720:	f000 fabf 	bl	8005ca2 <_realloc_r>
 8005724:	1e06      	subs	r6, r0, #0
 8005726:	d1e0      	bne.n	80056ea <__ssputs_r+0x62>
 8005728:	6921      	ldr	r1, [r4, #16]
 800572a:	9802      	ldr	r0, [sp, #8]
 800572c:	f7ff feb0 	bl	8005490 <_free_r>
 8005730:	230c      	movs	r3, #12
 8005732:	2001      	movs	r0, #1
 8005734:	9a02      	ldr	r2, [sp, #8]
 8005736:	4240      	negs	r0, r0
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	89a2      	ldrh	r2, [r4, #12]
 800573c:	3334      	adds	r3, #52	@ 0x34
 800573e:	4313      	orrs	r3, r2
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	e7e9      	b.n	8005718 <__ssputs_r+0x90>
 8005744:	fffffb7f 	.word	0xfffffb7f

08005748 <_svfiprintf_r>:
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	b0a1      	sub	sp, #132	@ 0x84
 800574c:	9003      	str	r0, [sp, #12]
 800574e:	001d      	movs	r5, r3
 8005750:	898b      	ldrh	r3, [r1, #12]
 8005752:	000f      	movs	r7, r1
 8005754:	0016      	movs	r6, r2
 8005756:	061b      	lsls	r3, r3, #24
 8005758:	d511      	bpl.n	800577e <_svfiprintf_r+0x36>
 800575a:	690b      	ldr	r3, [r1, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10e      	bne.n	800577e <_svfiprintf_r+0x36>
 8005760:	2140      	movs	r1, #64	@ 0x40
 8005762:	f7ff ff01 	bl	8005568 <_malloc_r>
 8005766:	6038      	str	r0, [r7, #0]
 8005768:	6138      	str	r0, [r7, #16]
 800576a:	2800      	cmp	r0, #0
 800576c:	d105      	bne.n	800577a <_svfiprintf_r+0x32>
 800576e:	230c      	movs	r3, #12
 8005770:	9a03      	ldr	r2, [sp, #12]
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	2001      	movs	r0, #1
 8005776:	4240      	negs	r0, r0
 8005778:	e0cf      	b.n	800591a <_svfiprintf_r+0x1d2>
 800577a:	2340      	movs	r3, #64	@ 0x40
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	2300      	movs	r3, #0
 8005780:	ac08      	add	r4, sp, #32
 8005782:	6163      	str	r3, [r4, #20]
 8005784:	3320      	adds	r3, #32
 8005786:	7663      	strb	r3, [r4, #25]
 8005788:	3310      	adds	r3, #16
 800578a:	76a3      	strb	r3, [r4, #26]
 800578c:	9507      	str	r5, [sp, #28]
 800578e:	0035      	movs	r5, r6
 8005790:	782b      	ldrb	r3, [r5, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <_svfiprintf_r+0x52>
 8005796:	2b25      	cmp	r3, #37	@ 0x25
 8005798:	d148      	bne.n	800582c <_svfiprintf_r+0xe4>
 800579a:	1bab      	subs	r3, r5, r6
 800579c:	9305      	str	r3, [sp, #20]
 800579e:	42b5      	cmp	r5, r6
 80057a0:	d00b      	beq.n	80057ba <_svfiprintf_r+0x72>
 80057a2:	0032      	movs	r2, r6
 80057a4:	0039      	movs	r1, r7
 80057a6:	9803      	ldr	r0, [sp, #12]
 80057a8:	f7ff ff6e 	bl	8005688 <__ssputs_r>
 80057ac:	3001      	adds	r0, #1
 80057ae:	d100      	bne.n	80057b2 <_svfiprintf_r+0x6a>
 80057b0:	e0ae      	b.n	8005910 <_svfiprintf_r+0x1c8>
 80057b2:	6963      	ldr	r3, [r4, #20]
 80057b4:	9a05      	ldr	r2, [sp, #20]
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	6163      	str	r3, [r4, #20]
 80057ba:	782b      	ldrb	r3, [r5, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d100      	bne.n	80057c2 <_svfiprintf_r+0x7a>
 80057c0:	e0a6      	b.n	8005910 <_svfiprintf_r+0x1c8>
 80057c2:	2201      	movs	r2, #1
 80057c4:	2300      	movs	r3, #0
 80057c6:	4252      	negs	r2, r2
 80057c8:	6062      	str	r2, [r4, #4]
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	3254      	adds	r2, #84	@ 0x54
 80057ce:	1852      	adds	r2, r2, r1
 80057d0:	1c6e      	adds	r6, r5, #1
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	60e3      	str	r3, [r4, #12]
 80057d6:	60a3      	str	r3, [r4, #8]
 80057d8:	7013      	strb	r3, [r2, #0]
 80057da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80057dc:	4b54      	ldr	r3, [pc, #336]	@ (8005930 <_svfiprintf_r+0x1e8>)
 80057de:	2205      	movs	r2, #5
 80057e0:	0018      	movs	r0, r3
 80057e2:	7831      	ldrb	r1, [r6, #0]
 80057e4:	9305      	str	r3, [sp, #20]
 80057e6:	f000 fa51 	bl	8005c8c <memchr>
 80057ea:	1c75      	adds	r5, r6, #1
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d11f      	bne.n	8005830 <_svfiprintf_r+0xe8>
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	06d3      	lsls	r3, r2, #27
 80057f4:	d504      	bpl.n	8005800 <_svfiprintf_r+0xb8>
 80057f6:	2353      	movs	r3, #83	@ 0x53
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	185b      	adds	r3, r3, r1
 80057fc:	2120      	movs	r1, #32
 80057fe:	7019      	strb	r1, [r3, #0]
 8005800:	0713      	lsls	r3, r2, #28
 8005802:	d504      	bpl.n	800580e <_svfiprintf_r+0xc6>
 8005804:	2353      	movs	r3, #83	@ 0x53
 8005806:	a904      	add	r1, sp, #16
 8005808:	185b      	adds	r3, r3, r1
 800580a:	212b      	movs	r1, #43	@ 0x2b
 800580c:	7019      	strb	r1, [r3, #0]
 800580e:	7833      	ldrb	r3, [r6, #0]
 8005810:	2b2a      	cmp	r3, #42	@ 0x2a
 8005812:	d016      	beq.n	8005842 <_svfiprintf_r+0xfa>
 8005814:	0035      	movs	r5, r6
 8005816:	2100      	movs	r1, #0
 8005818:	200a      	movs	r0, #10
 800581a:	68e3      	ldr	r3, [r4, #12]
 800581c:	782a      	ldrb	r2, [r5, #0]
 800581e:	1c6e      	adds	r6, r5, #1
 8005820:	3a30      	subs	r2, #48	@ 0x30
 8005822:	2a09      	cmp	r2, #9
 8005824:	d950      	bls.n	80058c8 <_svfiprintf_r+0x180>
 8005826:	2900      	cmp	r1, #0
 8005828:	d111      	bne.n	800584e <_svfiprintf_r+0x106>
 800582a:	e017      	b.n	800585c <_svfiprintf_r+0x114>
 800582c:	3501      	adds	r5, #1
 800582e:	e7af      	b.n	8005790 <_svfiprintf_r+0x48>
 8005830:	9b05      	ldr	r3, [sp, #20]
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	1ac0      	subs	r0, r0, r3
 8005836:	2301      	movs	r3, #1
 8005838:	4083      	lsls	r3, r0
 800583a:	4313      	orrs	r3, r2
 800583c:	002e      	movs	r6, r5
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	e7cc      	b.n	80057dc <_svfiprintf_r+0x94>
 8005842:	9b07      	ldr	r3, [sp, #28]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	9107      	str	r1, [sp, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	db01      	blt.n	8005852 <_svfiprintf_r+0x10a>
 800584e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005850:	e004      	b.n	800585c <_svfiprintf_r+0x114>
 8005852:	425b      	negs	r3, r3
 8005854:	60e3      	str	r3, [r4, #12]
 8005856:	2302      	movs	r3, #2
 8005858:	4313      	orrs	r3, r2
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	782b      	ldrb	r3, [r5, #0]
 800585e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005860:	d10c      	bne.n	800587c <_svfiprintf_r+0x134>
 8005862:	786b      	ldrb	r3, [r5, #1]
 8005864:	2b2a      	cmp	r3, #42	@ 0x2a
 8005866:	d134      	bne.n	80058d2 <_svfiprintf_r+0x18a>
 8005868:	9b07      	ldr	r3, [sp, #28]
 800586a:	3502      	adds	r5, #2
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	9207      	str	r2, [sp, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da01      	bge.n	800587a <_svfiprintf_r+0x132>
 8005876:	2301      	movs	r3, #1
 8005878:	425b      	negs	r3, r3
 800587a:	9309      	str	r3, [sp, #36]	@ 0x24
 800587c:	4e2d      	ldr	r6, [pc, #180]	@ (8005934 <_svfiprintf_r+0x1ec>)
 800587e:	2203      	movs	r2, #3
 8005880:	0030      	movs	r0, r6
 8005882:	7829      	ldrb	r1, [r5, #0]
 8005884:	f000 fa02 	bl	8005c8c <memchr>
 8005888:	2800      	cmp	r0, #0
 800588a:	d006      	beq.n	800589a <_svfiprintf_r+0x152>
 800588c:	2340      	movs	r3, #64	@ 0x40
 800588e:	1b80      	subs	r0, r0, r6
 8005890:	4083      	lsls	r3, r0
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	3501      	adds	r5, #1
 8005896:	4313      	orrs	r3, r2
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	7829      	ldrb	r1, [r5, #0]
 800589c:	2206      	movs	r2, #6
 800589e:	4826      	ldr	r0, [pc, #152]	@ (8005938 <_svfiprintf_r+0x1f0>)
 80058a0:	1c6e      	adds	r6, r5, #1
 80058a2:	7621      	strb	r1, [r4, #24]
 80058a4:	f000 f9f2 	bl	8005c8c <memchr>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d038      	beq.n	800591e <_svfiprintf_r+0x1d6>
 80058ac:	4b23      	ldr	r3, [pc, #140]	@ (800593c <_svfiprintf_r+0x1f4>)
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d122      	bne.n	80058f8 <_svfiprintf_r+0x1b0>
 80058b2:	2207      	movs	r2, #7
 80058b4:	9b07      	ldr	r3, [sp, #28]
 80058b6:	3307      	adds	r3, #7
 80058b8:	4393      	bics	r3, r2
 80058ba:	3308      	adds	r3, #8
 80058bc:	9307      	str	r3, [sp, #28]
 80058be:	6963      	ldr	r3, [r4, #20]
 80058c0:	9a04      	ldr	r2, [sp, #16]
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	6163      	str	r3, [r4, #20]
 80058c6:	e762      	b.n	800578e <_svfiprintf_r+0x46>
 80058c8:	4343      	muls	r3, r0
 80058ca:	0035      	movs	r5, r6
 80058cc:	2101      	movs	r1, #1
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	e7a4      	b.n	800581c <_svfiprintf_r+0xd4>
 80058d2:	2300      	movs	r3, #0
 80058d4:	200a      	movs	r0, #10
 80058d6:	0019      	movs	r1, r3
 80058d8:	3501      	adds	r5, #1
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	782a      	ldrb	r2, [r5, #0]
 80058de:	1c6e      	adds	r6, r5, #1
 80058e0:	3a30      	subs	r2, #48	@ 0x30
 80058e2:	2a09      	cmp	r2, #9
 80058e4:	d903      	bls.n	80058ee <_svfiprintf_r+0x1a6>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0c8      	beq.n	800587c <_svfiprintf_r+0x134>
 80058ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80058ec:	e7c6      	b.n	800587c <_svfiprintf_r+0x134>
 80058ee:	4341      	muls	r1, r0
 80058f0:	0035      	movs	r5, r6
 80058f2:	2301      	movs	r3, #1
 80058f4:	1889      	adds	r1, r1, r2
 80058f6:	e7f1      	b.n	80058dc <_svfiprintf_r+0x194>
 80058f8:	aa07      	add	r2, sp, #28
 80058fa:	9200      	str	r2, [sp, #0]
 80058fc:	0021      	movs	r1, r4
 80058fe:	003a      	movs	r2, r7
 8005900:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <_svfiprintf_r+0x1f8>)
 8005902:	9803      	ldr	r0, [sp, #12]
 8005904:	e000      	b.n	8005908 <_svfiprintf_r+0x1c0>
 8005906:	bf00      	nop
 8005908:	9004      	str	r0, [sp, #16]
 800590a:	9b04      	ldr	r3, [sp, #16]
 800590c:	3301      	adds	r3, #1
 800590e:	d1d6      	bne.n	80058be <_svfiprintf_r+0x176>
 8005910:	89bb      	ldrh	r3, [r7, #12]
 8005912:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005914:	065b      	lsls	r3, r3, #25
 8005916:	d500      	bpl.n	800591a <_svfiprintf_r+0x1d2>
 8005918:	e72c      	b.n	8005774 <_svfiprintf_r+0x2c>
 800591a:	b021      	add	sp, #132	@ 0x84
 800591c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591e:	aa07      	add	r2, sp, #28
 8005920:	9200      	str	r2, [sp, #0]
 8005922:	0021      	movs	r1, r4
 8005924:	003a      	movs	r2, r7
 8005926:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <_svfiprintf_r+0x1f8>)
 8005928:	9803      	ldr	r0, [sp, #12]
 800592a:	f000 f87b 	bl	8005a24 <_printf_i>
 800592e:	e7eb      	b.n	8005908 <_svfiprintf_r+0x1c0>
 8005930:	08006644 	.word	0x08006644
 8005934:	0800664a 	.word	0x0800664a
 8005938:	0800664e 	.word	0x0800664e
 800593c:	00000000 	.word	0x00000000
 8005940:	08005689 	.word	0x08005689

08005944 <_printf_common>:
 8005944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005946:	0016      	movs	r6, r2
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	688a      	ldr	r2, [r1, #8]
 800594c:	690b      	ldr	r3, [r1, #16]
 800594e:	000c      	movs	r4, r1
 8005950:	9000      	str	r0, [sp, #0]
 8005952:	4293      	cmp	r3, r2
 8005954:	da00      	bge.n	8005958 <_printf_common+0x14>
 8005956:	0013      	movs	r3, r2
 8005958:	0022      	movs	r2, r4
 800595a:	6033      	str	r3, [r6, #0]
 800595c:	3243      	adds	r2, #67	@ 0x43
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	2a00      	cmp	r2, #0
 8005962:	d001      	beq.n	8005968 <_printf_common+0x24>
 8005964:	3301      	adds	r3, #1
 8005966:	6033      	str	r3, [r6, #0]
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	069b      	lsls	r3, r3, #26
 800596c:	d502      	bpl.n	8005974 <_printf_common+0x30>
 800596e:	6833      	ldr	r3, [r6, #0]
 8005970:	3302      	adds	r3, #2
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	2306      	movs	r3, #6
 8005978:	0015      	movs	r5, r2
 800597a:	401d      	ands	r5, r3
 800597c:	421a      	tst	r2, r3
 800597e:	d027      	beq.n	80059d0 <_printf_common+0x8c>
 8005980:	0023      	movs	r3, r4
 8005982:	3343      	adds	r3, #67	@ 0x43
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	1e5a      	subs	r2, r3, #1
 8005988:	4193      	sbcs	r3, r2
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	0692      	lsls	r2, r2, #26
 800598e:	d430      	bmi.n	80059f2 <_printf_common+0xae>
 8005990:	0022      	movs	r2, r4
 8005992:	9901      	ldr	r1, [sp, #4]
 8005994:	9800      	ldr	r0, [sp, #0]
 8005996:	9d08      	ldr	r5, [sp, #32]
 8005998:	3243      	adds	r2, #67	@ 0x43
 800599a:	47a8      	blx	r5
 800599c:	3001      	adds	r0, #1
 800599e:	d025      	beq.n	80059ec <_printf_common+0xa8>
 80059a0:	2206      	movs	r2, #6
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	2500      	movs	r5, #0
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d105      	bne.n	80059b8 <_printf_common+0x74>
 80059ac:	6833      	ldr	r3, [r6, #0]
 80059ae:	68e5      	ldr	r5, [r4, #12]
 80059b0:	1aed      	subs	r5, r5, r3
 80059b2:	43eb      	mvns	r3, r5
 80059b4:	17db      	asrs	r3, r3, #31
 80059b6:	401d      	ands	r5, r3
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	6922      	ldr	r2, [r4, #16]
 80059bc:	4293      	cmp	r3, r2
 80059be:	dd01      	ble.n	80059c4 <_printf_common+0x80>
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	18ed      	adds	r5, r5, r3
 80059c4:	2600      	movs	r6, #0
 80059c6:	42b5      	cmp	r5, r6
 80059c8:	d120      	bne.n	8005a0c <_printf_common+0xc8>
 80059ca:	2000      	movs	r0, #0
 80059cc:	e010      	b.n	80059f0 <_printf_common+0xac>
 80059ce:	3501      	adds	r5, #1
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	6832      	ldr	r2, [r6, #0]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	42ab      	cmp	r3, r5
 80059d8:	ddd2      	ble.n	8005980 <_printf_common+0x3c>
 80059da:	0022      	movs	r2, r4
 80059dc:	2301      	movs	r3, #1
 80059de:	9901      	ldr	r1, [sp, #4]
 80059e0:	9800      	ldr	r0, [sp, #0]
 80059e2:	9f08      	ldr	r7, [sp, #32]
 80059e4:	3219      	adds	r2, #25
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	d1f0      	bne.n	80059ce <_printf_common+0x8a>
 80059ec:	2001      	movs	r0, #1
 80059ee:	4240      	negs	r0, r0
 80059f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059f2:	2030      	movs	r0, #48	@ 0x30
 80059f4:	18e1      	adds	r1, r4, r3
 80059f6:	3143      	adds	r1, #67	@ 0x43
 80059f8:	7008      	strb	r0, [r1, #0]
 80059fa:	0021      	movs	r1, r4
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	3145      	adds	r1, #69	@ 0x45
 8005a00:	7809      	ldrb	r1, [r1, #0]
 8005a02:	18a2      	adds	r2, r4, r2
 8005a04:	3243      	adds	r2, #67	@ 0x43
 8005a06:	3302      	adds	r3, #2
 8005a08:	7011      	strb	r1, [r2, #0]
 8005a0a:	e7c1      	b.n	8005990 <_printf_common+0x4c>
 8005a0c:	0022      	movs	r2, r4
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9901      	ldr	r1, [sp, #4]
 8005a12:	9800      	ldr	r0, [sp, #0]
 8005a14:	9f08      	ldr	r7, [sp, #32]
 8005a16:	321a      	adds	r2, #26
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xa8>
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7d1      	b.n	80059c6 <_printf_common+0x82>
	...

08005a24 <_printf_i>:
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	b08b      	sub	sp, #44	@ 0x2c
 8005a28:	9206      	str	r2, [sp, #24]
 8005a2a:	000a      	movs	r2, r1
 8005a2c:	3243      	adds	r2, #67	@ 0x43
 8005a2e:	9307      	str	r3, [sp, #28]
 8005a30:	9005      	str	r0, [sp, #20]
 8005a32:	9203      	str	r2, [sp, #12]
 8005a34:	7e0a      	ldrb	r2, [r1, #24]
 8005a36:	000c      	movs	r4, r1
 8005a38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a3a:	2a78      	cmp	r2, #120	@ 0x78
 8005a3c:	d809      	bhi.n	8005a52 <_printf_i+0x2e>
 8005a3e:	2a62      	cmp	r2, #98	@ 0x62
 8005a40:	d80b      	bhi.n	8005a5a <_printf_i+0x36>
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	d100      	bne.n	8005a48 <_printf_i+0x24>
 8005a46:	e0bc      	b.n	8005bc2 <_printf_i+0x19e>
 8005a48:	497b      	ldr	r1, [pc, #492]	@ (8005c38 <_printf_i+0x214>)
 8005a4a:	9104      	str	r1, [sp, #16]
 8005a4c:	2a58      	cmp	r2, #88	@ 0x58
 8005a4e:	d100      	bne.n	8005a52 <_printf_i+0x2e>
 8005a50:	e090      	b.n	8005b74 <_printf_i+0x150>
 8005a52:	0025      	movs	r5, r4
 8005a54:	3542      	adds	r5, #66	@ 0x42
 8005a56:	702a      	strb	r2, [r5, #0]
 8005a58:	e022      	b.n	8005aa0 <_printf_i+0x7c>
 8005a5a:	0010      	movs	r0, r2
 8005a5c:	3863      	subs	r0, #99	@ 0x63
 8005a5e:	2815      	cmp	r0, #21
 8005a60:	d8f7      	bhi.n	8005a52 <_printf_i+0x2e>
 8005a62:	f7fa fb4b 	bl	80000fc <__gnu_thumb1_case_shi>
 8005a66:	0016      	.short	0x0016
 8005a68:	fff6001f 	.word	0xfff6001f
 8005a6c:	fff6fff6 	.word	0xfff6fff6
 8005a70:	001ffff6 	.word	0x001ffff6
 8005a74:	fff6fff6 	.word	0xfff6fff6
 8005a78:	fff6fff6 	.word	0xfff6fff6
 8005a7c:	003600a1 	.word	0x003600a1
 8005a80:	fff60080 	.word	0xfff60080
 8005a84:	00b2fff6 	.word	0x00b2fff6
 8005a88:	0036fff6 	.word	0x0036fff6
 8005a8c:	fff6fff6 	.word	0xfff6fff6
 8005a90:	0084      	.short	0x0084
 8005a92:	0025      	movs	r5, r4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	3542      	adds	r5, #66	@ 0x42
 8005a98:	1d11      	adds	r1, r2, #4
 8005a9a:	6019      	str	r1, [r3, #0]
 8005a9c:	6813      	ldr	r3, [r2, #0]
 8005a9e:	702b      	strb	r3, [r5, #0]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0a0      	b.n	8005be6 <_printf_i+0x1c2>
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	6809      	ldr	r1, [r1, #0]
 8005aa8:	1d02      	adds	r2, r0, #4
 8005aaa:	060d      	lsls	r5, r1, #24
 8005aac:	d50b      	bpl.n	8005ac6 <_printf_i+0xa2>
 8005aae:	6806      	ldr	r6, [r0, #0]
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	da03      	bge.n	8005abe <_printf_i+0x9a>
 8005ab6:	232d      	movs	r3, #45	@ 0x2d
 8005ab8:	9a03      	ldr	r2, [sp, #12]
 8005aba:	4276      	negs	r6, r6
 8005abc:	7013      	strb	r3, [r2, #0]
 8005abe:	4b5e      	ldr	r3, [pc, #376]	@ (8005c38 <_printf_i+0x214>)
 8005ac0:	270a      	movs	r7, #10
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	e018      	b.n	8005af8 <_printf_i+0xd4>
 8005ac6:	6806      	ldr	r6, [r0, #0]
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	0649      	lsls	r1, r1, #25
 8005acc:	d5f1      	bpl.n	8005ab2 <_printf_i+0x8e>
 8005ace:	b236      	sxth	r6, r6
 8005ad0:	e7ef      	b.n	8005ab2 <_printf_i+0x8e>
 8005ad2:	6808      	ldr	r0, [r1, #0]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	c940      	ldmia	r1!, {r6}
 8005ad8:	0605      	lsls	r5, r0, #24
 8005ada:	d402      	bmi.n	8005ae2 <_printf_i+0xbe>
 8005adc:	0640      	lsls	r0, r0, #25
 8005ade:	d500      	bpl.n	8005ae2 <_printf_i+0xbe>
 8005ae0:	b2b6      	uxth	r6, r6
 8005ae2:	6019      	str	r1, [r3, #0]
 8005ae4:	4b54      	ldr	r3, [pc, #336]	@ (8005c38 <_printf_i+0x214>)
 8005ae6:	270a      	movs	r7, #10
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	2a6f      	cmp	r2, #111	@ 0x6f
 8005aec:	d100      	bne.n	8005af0 <_printf_i+0xcc>
 8005aee:	3f02      	subs	r7, #2
 8005af0:	0023      	movs	r3, r4
 8005af2:	2200      	movs	r2, #0
 8005af4:	3343      	adds	r3, #67	@ 0x43
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	6863      	ldr	r3, [r4, #4]
 8005afa:	60a3      	str	r3, [r4, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db03      	blt.n	8005b08 <_printf_i+0xe4>
 8005b00:	2104      	movs	r1, #4
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	438a      	bics	r2, r1
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	d102      	bne.n	8005b12 <_printf_i+0xee>
 8005b0c:	9d03      	ldr	r5, [sp, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <_printf_i+0x108>
 8005b12:	9d03      	ldr	r5, [sp, #12]
 8005b14:	0030      	movs	r0, r6
 8005b16:	0039      	movs	r1, r7
 8005b18:	f7fa fb80 	bl	800021c <__aeabi_uidivmod>
 8005b1c:	9b04      	ldr	r3, [sp, #16]
 8005b1e:	3d01      	subs	r5, #1
 8005b20:	5c5b      	ldrb	r3, [r3, r1]
 8005b22:	702b      	strb	r3, [r5, #0]
 8005b24:	0033      	movs	r3, r6
 8005b26:	0006      	movs	r6, r0
 8005b28:	429f      	cmp	r7, r3
 8005b2a:	d9f3      	bls.n	8005b14 <_printf_i+0xf0>
 8005b2c:	2f08      	cmp	r7, #8
 8005b2e:	d109      	bne.n	8005b44 <_printf_i+0x120>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	07db      	lsls	r3, r3, #31
 8005b34:	d506      	bpl.n	8005b44 <_printf_i+0x120>
 8005b36:	6862      	ldr	r2, [r4, #4]
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	dc02      	bgt.n	8005b44 <_printf_i+0x120>
 8005b3e:	2330      	movs	r3, #48	@ 0x30
 8005b40:	3d01      	subs	r5, #1
 8005b42:	702b      	strb	r3, [r5, #0]
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	1b5b      	subs	r3, r3, r5
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	9b07      	ldr	r3, [sp, #28]
 8005b4c:	0021      	movs	r1, r4
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	9805      	ldr	r0, [sp, #20]
 8005b52:	9b06      	ldr	r3, [sp, #24]
 8005b54:	aa09      	add	r2, sp, #36	@ 0x24
 8005b56:	f7ff fef5 	bl	8005944 <_printf_common>
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d148      	bne.n	8005bf0 <_printf_i+0x1cc>
 8005b5e:	2001      	movs	r0, #1
 8005b60:	4240      	negs	r0, r0
 8005b62:	b00b      	add	sp, #44	@ 0x2c
 8005b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b66:	2220      	movs	r2, #32
 8005b68:	6809      	ldr	r1, [r1, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	6022      	str	r2, [r4, #0]
 8005b6e:	2278      	movs	r2, #120	@ 0x78
 8005b70:	4932      	ldr	r1, [pc, #200]	@ (8005c3c <_printf_i+0x218>)
 8005b72:	9104      	str	r1, [sp, #16]
 8005b74:	0021      	movs	r1, r4
 8005b76:	3145      	adds	r1, #69	@ 0x45
 8005b78:	700a      	strb	r2, [r1, #0]
 8005b7a:	6819      	ldr	r1, [r3, #0]
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	c940      	ldmia	r1!, {r6}
 8005b80:	0610      	lsls	r0, r2, #24
 8005b82:	d402      	bmi.n	8005b8a <_printf_i+0x166>
 8005b84:	0650      	lsls	r0, r2, #25
 8005b86:	d500      	bpl.n	8005b8a <_printf_i+0x166>
 8005b88:	b2b6      	uxth	r6, r6
 8005b8a:	6019      	str	r1, [r3, #0]
 8005b8c:	07d3      	lsls	r3, r2, #31
 8005b8e:	d502      	bpl.n	8005b96 <_printf_i+0x172>
 8005b90:	2320      	movs	r3, #32
 8005b92:	4313      	orrs	r3, r2
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	2e00      	cmp	r6, #0
 8005b98:	d001      	beq.n	8005b9e <_printf_i+0x17a>
 8005b9a:	2710      	movs	r7, #16
 8005b9c:	e7a8      	b.n	8005af0 <_printf_i+0xcc>
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	4393      	bics	r3, r2
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	e7f8      	b.n	8005b9a <_printf_i+0x176>
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	680d      	ldr	r5, [r1, #0]
 8005bac:	1d10      	adds	r0, r2, #4
 8005bae:	6949      	ldr	r1, [r1, #20]
 8005bb0:	6018      	str	r0, [r3, #0]
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	062e      	lsls	r6, r5, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x198>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x19e>
 8005bbc:	066d      	lsls	r5, r5, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x194>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9d03      	ldr	r5, [sp, #12]
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	e7bf      	b.n	8005b4a <_printf_i+0x126>
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	1d11      	adds	r1, r2, #4
 8005bce:	6019      	str	r1, [r3, #0]
 8005bd0:	6815      	ldr	r5, [r2, #0]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	0028      	movs	r0, r5
 8005bd6:	6862      	ldr	r2, [r4, #4]
 8005bd8:	f000 f858 	bl	8005c8c <memchr>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d001      	beq.n	8005be4 <_printf_i+0x1c0>
 8005be0:	1b40      	subs	r0, r0, r5
 8005be2:	6060      	str	r0, [r4, #4]
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	2300      	movs	r3, #0
 8005bea:	9a03      	ldr	r2, [sp, #12]
 8005bec:	7013      	strb	r3, [r2, #0]
 8005bee:	e7ac      	b.n	8005b4a <_printf_i+0x126>
 8005bf0:	002a      	movs	r2, r5
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	9906      	ldr	r1, [sp, #24]
 8005bf6:	9805      	ldr	r0, [sp, #20]
 8005bf8:	9d07      	ldr	r5, [sp, #28]
 8005bfa:	47a8      	blx	r5
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d0ae      	beq.n	8005b5e <_printf_i+0x13a>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	079b      	lsls	r3, r3, #30
 8005c04:	d415      	bmi.n	8005c32 <_printf_i+0x20e>
 8005c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c08:	68e0      	ldr	r0, [r4, #12]
 8005c0a:	4298      	cmp	r0, r3
 8005c0c:	daa9      	bge.n	8005b62 <_printf_i+0x13e>
 8005c0e:	0018      	movs	r0, r3
 8005c10:	e7a7      	b.n	8005b62 <_printf_i+0x13e>
 8005c12:	0022      	movs	r2, r4
 8005c14:	2301      	movs	r3, #1
 8005c16:	9906      	ldr	r1, [sp, #24]
 8005c18:	9805      	ldr	r0, [sp, #20]
 8005c1a:	9e07      	ldr	r6, [sp, #28]
 8005c1c:	3219      	adds	r2, #25
 8005c1e:	47b0      	blx	r6
 8005c20:	3001      	adds	r0, #1
 8005c22:	d09c      	beq.n	8005b5e <_printf_i+0x13a>
 8005c24:	3501      	adds	r5, #1
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	dcf0      	bgt.n	8005c12 <_printf_i+0x1ee>
 8005c30:	e7e9      	b.n	8005c06 <_printf_i+0x1e2>
 8005c32:	2500      	movs	r5, #0
 8005c34:	e7f7      	b.n	8005c26 <_printf_i+0x202>
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	08006655 	.word	0x08006655
 8005c3c:	08006666 	.word	0x08006666

08005c40 <memmove>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4288      	cmp	r0, r1
 8005c44:	d806      	bhi.n	8005c54 <memmove+0x14>
 8005c46:	2300      	movs	r3, #0
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d008      	beq.n	8005c5e <memmove+0x1e>
 8005c4c:	5ccc      	ldrb	r4, [r1, r3]
 8005c4e:	54c4      	strb	r4, [r0, r3]
 8005c50:	3301      	adds	r3, #1
 8005c52:	e7f9      	b.n	8005c48 <memmove+0x8>
 8005c54:	188b      	adds	r3, r1, r2
 8005c56:	4298      	cmp	r0, r3
 8005c58:	d2f5      	bcs.n	8005c46 <memmove+0x6>
 8005c5a:	3a01      	subs	r2, #1
 8005c5c:	d200      	bcs.n	8005c60 <memmove+0x20>
 8005c5e:	bd10      	pop	{r4, pc}
 8005c60:	5c8b      	ldrb	r3, [r1, r2]
 8005c62:	5483      	strb	r3, [r0, r2]
 8005c64:	e7f9      	b.n	8005c5a <memmove+0x1a>
	...

08005c68 <_sbrk_r>:
 8005c68:	2300      	movs	r3, #0
 8005c6a:	b570      	push	{r4, r5, r6, lr}
 8005c6c:	4d06      	ldr	r5, [pc, #24]	@ (8005c88 <_sbrk_r+0x20>)
 8005c6e:	0004      	movs	r4, r0
 8005c70:	0008      	movs	r0, r1
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f7fb fcee 	bl	8001654 <_sbrk>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d103      	bne.n	8005c84 <_sbrk_r+0x1c>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d000      	beq.n	8005c84 <_sbrk_r+0x1c>
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	bd70      	pop	{r4, r5, r6, pc}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	2000083c 	.word	0x2000083c

08005c8c <memchr>:
 8005c8c:	b2c9      	uxtb	r1, r1
 8005c8e:	1882      	adds	r2, r0, r2
 8005c90:	4290      	cmp	r0, r2
 8005c92:	d101      	bne.n	8005c98 <memchr+0xc>
 8005c94:	2000      	movs	r0, #0
 8005c96:	4770      	bx	lr
 8005c98:	7803      	ldrb	r3, [r0, #0]
 8005c9a:	428b      	cmp	r3, r1
 8005c9c:	d0fb      	beq.n	8005c96 <memchr+0xa>
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	e7f6      	b.n	8005c90 <memchr+0x4>

08005ca2 <_realloc_r>:
 8005ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ca4:	0006      	movs	r6, r0
 8005ca6:	000c      	movs	r4, r1
 8005ca8:	0015      	movs	r5, r2
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d105      	bne.n	8005cba <_realloc_r+0x18>
 8005cae:	0011      	movs	r1, r2
 8005cb0:	f7ff fc5a 	bl	8005568 <_malloc_r>
 8005cb4:	0004      	movs	r4, r0
 8005cb6:	0020      	movs	r0, r4
 8005cb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d103      	bne.n	8005cc6 <_realloc_r+0x24>
 8005cbe:	f7ff fbe7 	bl	8005490 <_free_r>
 8005cc2:	2400      	movs	r4, #0
 8005cc4:	e7f7      	b.n	8005cb6 <_realloc_r+0x14>
 8005cc6:	f000 f81b 	bl	8005d00 <_malloc_usable_size_r>
 8005cca:	0007      	movs	r7, r0
 8005ccc:	4285      	cmp	r5, r0
 8005cce:	d802      	bhi.n	8005cd6 <_realloc_r+0x34>
 8005cd0:	0843      	lsrs	r3, r0, #1
 8005cd2:	42ab      	cmp	r3, r5
 8005cd4:	d3ef      	bcc.n	8005cb6 <_realloc_r+0x14>
 8005cd6:	0029      	movs	r1, r5
 8005cd8:	0030      	movs	r0, r6
 8005cda:	f7ff fc45 	bl	8005568 <_malloc_r>
 8005cde:	9001      	str	r0, [sp, #4]
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d0ee      	beq.n	8005cc2 <_realloc_r+0x20>
 8005ce4:	002a      	movs	r2, r5
 8005ce6:	42bd      	cmp	r5, r7
 8005ce8:	d900      	bls.n	8005cec <_realloc_r+0x4a>
 8005cea:	003a      	movs	r2, r7
 8005cec:	0021      	movs	r1, r4
 8005cee:	9801      	ldr	r0, [sp, #4]
 8005cf0:	f7ff fbc4 	bl	800547c <memcpy>
 8005cf4:	0021      	movs	r1, r4
 8005cf6:	0030      	movs	r0, r6
 8005cf8:	f7ff fbca 	bl	8005490 <_free_r>
 8005cfc:	9c01      	ldr	r4, [sp, #4]
 8005cfe:	e7da      	b.n	8005cb6 <_realloc_r+0x14>

08005d00 <_malloc_usable_size_r>:
 8005d00:	1f0b      	subs	r3, r1, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1f18      	subs	r0, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da01      	bge.n	8005d0e <_malloc_usable_size_r+0xe>
 8005d0a:	580b      	ldr	r3, [r1, r0]
 8005d0c:	18c0      	adds	r0, r0, r3
 8005d0e:	4770      	bx	lr

08005d10 <_init>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr

08005d1c <_fini>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr
