
STM32G050K8T6_StepCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f64  08004f64  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f64  08004f64  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f64  08004f64  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f68  08004f68  00005f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000005c  08004fc8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08004fc8  00006434  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164e9  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2d  00000000  00000000  0001c56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0001efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001036  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018161  00000000  00000000  0002144e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186eb  00000000  00000000  000395af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b888  00000000  00000000  00051c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  000ed568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000005c 	.word	0x2000005c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08004e80 	.word	0x08004e80

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000060 	.word	0x20000060
 80000f8:	08004e80 	.word	0x08004e80

080000fc <__gnu_thumb1_case_shi>:
 80000fc:	b403      	push	{r0, r1}
 80000fe:	4671      	mov	r1, lr
 8000100:	0849      	lsrs	r1, r1, #1
 8000102:	0040      	lsls	r0, r0, #1
 8000104:	0049      	lsls	r1, r1, #1
 8000106:	5e09      	ldrsh	r1, [r1, r0]
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	448e      	add	lr, r1
 800010c:	bc03      	pop	{r0, r1}
 800010e:	4770      	bx	lr

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <__aeabi_i2f>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	2800      	cmp	r0, #0
 8000400:	d013      	beq.n	800042a <__aeabi_i2f+0x2e>
 8000402:	17c3      	asrs	r3, r0, #31
 8000404:	18c5      	adds	r5, r0, r3
 8000406:	405d      	eors	r5, r3
 8000408:	0fc4      	lsrs	r4, r0, #31
 800040a:	0028      	movs	r0, r5
 800040c:	f000 f842 	bl	8000494 <__clzsi2>
 8000410:	239e      	movs	r3, #158	@ 0x9e
 8000412:	0001      	movs	r1, r0
 8000414:	1a1b      	subs	r3, r3, r0
 8000416:	2b96      	cmp	r3, #150	@ 0x96
 8000418:	dc0f      	bgt.n	800043a <__aeabi_i2f+0x3e>
 800041a:	2808      	cmp	r0, #8
 800041c:	d034      	beq.n	8000488 <__aeabi_i2f+0x8c>
 800041e:	3908      	subs	r1, #8
 8000420:	408d      	lsls	r5, r1
 8000422:	026d      	lsls	r5, r5, #9
 8000424:	0a6d      	lsrs	r5, r5, #9
 8000426:	b2d8      	uxtb	r0, r3
 8000428:	e002      	b.n	8000430 <__aeabi_i2f+0x34>
 800042a:	2400      	movs	r4, #0
 800042c:	2000      	movs	r0, #0
 800042e:	2500      	movs	r5, #0
 8000430:	05c0      	lsls	r0, r0, #23
 8000432:	4328      	orrs	r0, r5
 8000434:	07e4      	lsls	r4, r4, #31
 8000436:	4320      	orrs	r0, r4
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	2b99      	cmp	r3, #153	@ 0x99
 800043c:	dc16      	bgt.n	800046c <__aeabi_i2f+0x70>
 800043e:	1f42      	subs	r2, r0, #5
 8000440:	2805      	cmp	r0, #5
 8000442:	d000      	beq.n	8000446 <__aeabi_i2f+0x4a>
 8000444:	4095      	lsls	r5, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4811      	ldr	r0, [pc, #68]	@ (8000490 <__aeabi_i2f+0x94>)
 800044a:	4002      	ands	r2, r0
 800044c:	076e      	lsls	r6, r5, #29
 800044e:	d009      	beq.n	8000464 <__aeabi_i2f+0x68>
 8000450:	260f      	movs	r6, #15
 8000452:	4035      	ands	r5, r6
 8000454:	2d04      	cmp	r5, #4
 8000456:	d005      	beq.n	8000464 <__aeabi_i2f+0x68>
 8000458:	3204      	adds	r2, #4
 800045a:	0155      	lsls	r5, r2, #5
 800045c:	d502      	bpl.n	8000464 <__aeabi_i2f+0x68>
 800045e:	239f      	movs	r3, #159	@ 0x9f
 8000460:	4002      	ands	r2, r0
 8000462:	1a5b      	subs	r3, r3, r1
 8000464:	0192      	lsls	r2, r2, #6
 8000466:	0a55      	lsrs	r5, r2, #9
 8000468:	b2d8      	uxtb	r0, r3
 800046a:	e7e1      	b.n	8000430 <__aeabi_i2f+0x34>
 800046c:	2205      	movs	r2, #5
 800046e:	1a12      	subs	r2, r2, r0
 8000470:	0028      	movs	r0, r5
 8000472:	40d0      	lsrs	r0, r2
 8000474:	0002      	movs	r2, r0
 8000476:	0008      	movs	r0, r1
 8000478:	301b      	adds	r0, #27
 800047a:	4085      	lsls	r5, r0
 800047c:	0028      	movs	r0, r5
 800047e:	1e45      	subs	r5, r0, #1
 8000480:	41a8      	sbcs	r0, r5
 8000482:	4302      	orrs	r2, r0
 8000484:	0015      	movs	r5, r2
 8000486:	e7de      	b.n	8000446 <__aeabi_i2f+0x4a>
 8000488:	026d      	lsls	r5, r5, #9
 800048a:	2096      	movs	r0, #150	@ 0x96
 800048c:	0a6d      	lsrs	r5, r5, #9
 800048e:	e7cf      	b.n	8000430 <__aeabi_i2f+0x34>
 8000490:	fbffffff 	.word	0xfbffffff

08000494 <__clzsi2>:
 8000494:	211c      	movs	r1, #28
 8000496:	2301      	movs	r3, #1
 8000498:	041b      	lsls	r3, r3, #16
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0xe>
 800049e:	0c00      	lsrs	r0, r0, #16
 80004a0:	3910      	subs	r1, #16
 80004a2:	0a1b      	lsrs	r3, r3, #8
 80004a4:	4298      	cmp	r0, r3
 80004a6:	d301      	bcc.n	80004ac <__clzsi2+0x18>
 80004a8:	0a00      	lsrs	r0, r0, #8
 80004aa:	3908      	subs	r1, #8
 80004ac:	091b      	lsrs	r3, r3, #4
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0x22>
 80004b2:	0900      	lsrs	r0, r0, #4
 80004b4:	3904      	subs	r1, #4
 80004b6:	a202      	add	r2, pc, #8	@ (adr r2, 80004c0 <__clzsi2+0x2c>)
 80004b8:	5c10      	ldrb	r0, [r2, r0]
 80004ba:	1840      	adds	r0, r0, r1
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	02020304 	.word	0x02020304
 80004c4:	01010101 	.word	0x01010101
	...

080004d0 <ADXL335_convert_ADCtomV>:
#include "stm32g0xx_hal.h"
#include <stdio.h>
#include <string.h>

void ADXL335_convert_ADCtomV(ADXL335_t* sensor, ADC_HandleTypeDef* hadc)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, (uint32_t*)sensor->adc_value, numberOfAxes);
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	2203      	movs	r2, #3
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 f94d 	bl	8001780 <HAL_ADC_Start_DMA>
	for(int i = 0; i < numberOfAxes; i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	e019      	b.n	8000520 <ADXL335_convert_ADCtomV+0x50>
	{
		sensor->mV_value[i] = (sensor->adc_value[i] * V_in) / adcResolution;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	5ad3      	ldrh	r3, [r2, r3]
 80004f4:	001a      	movs	r2, r3
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <ADXL335_convert_ADCtomV+0x60>)
 80004f8:	4353      	muls	r3, r2
 80004fa:	490e      	ldr	r1, [pc, #56]	@ (8000534 <ADXL335_convert_ADCtomV+0x64>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff fe91 	bl	8000224 <__divsi3>
 8000502:	0003      	movs	r3, r0
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff79 	bl	80003fc <__aeabi_i2f>
 800050a:	1c01      	adds	r1, r0, #0
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	3304      	adds	r3, #4
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	3304      	adds	r3, #4
 8000518:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < numberOfAxes; i++)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3301      	adds	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b02      	cmp	r3, #2
 8000524:	dde2      	ble.n	80004ec <ADXL335_convert_ADCtomV+0x1c>
	}
}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b004      	add	sp, #16
 800052e:	bd80      	pop	{r7, pc}
 8000530:	00000ce4 	.word	0x00000ce4
 8000534:	00000fff 	.word	0x00000fff

08000538 <ADXL335_sendSensorData>:
//    // Format acceleration values
//    len += sprintf(buffer + len, "g: X=%.2f Y=%.2f Z=%.2f\r\n",
//                   sensor->g_value[0], sensor->g_value[1], sensor->g_value[2]);
//}

void ADXL335_sendSensorData(ADXL335_t* sensor, char* buffer, uint16_t buffer_size) {
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af02      	add	r7, sp, #8
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	801a      	strh	r2, [r3, #0]
    int len = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]

    // Format as CSV: "ADC_X,ADC_Y,ADC_Z,mV_X,mV_Y,mV_Z,g_X,g_Y,g_Z"
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	18d0      	adds	r0, r2, r3
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	881a      	ldrh	r2, [r3, #0]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	001c      	movs	r4, r3
                   sensor->adc_value[0], sensor->adc_value[1], sensor->adc_value[2]);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	881b      	ldrh	r3, [r3, #0]
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 800055e:	001d      	movs	r5, r3
                   sensor->adc_value[0], sensor->adc_value[1], sensor->adc_value[2]);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	885b      	ldrh	r3, [r3, #2]
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 8000564:	0019      	movs	r1, r3
                   sensor->adc_value[0], sensor->adc_value[1], sensor->adc_value[2]);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	889b      	ldrh	r3, [r3, #4]
    len += snprintf(buffer + len, buffer_size - len, "%d,%d,%d\r\n",
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <ADXL335_sendSensorData+0x60>)
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	9100      	str	r1, [sp, #0]
 8000570:	002b      	movs	r3, r5
 8000572:	0021      	movs	r1, r4
 8000574:	f003 ffd2 	bl	800451c <sniprintf>
 8000578:	0002      	movs	r2, r0
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	189b      	adds	r3, r3, r2
 800057e:	617b      	str	r3, [r7, #20]
//
//    len += snprintf(buffer + len, buffer_size - len, "%.3f,%.3f,%.3f\r\n",
//                   sensor->g_value[0], sensor->g_value[1], sensor->g_value[2]);

    // Ensure null termination
    buffer[buffer_size - 1] = '\0';
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b006      	add	sp, #24
 8000594:	bdb0      	pop	{r4, r5, r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	08004eac 	.word	0x08004eac

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b090      	sub	sp, #64	@ 0x40
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fd53 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f833 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fa39 	bl	8000a20 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 fa19 	bl	80009e4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005b2:	f000 f875 	bl	80006a0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80005b6:	f000 f901 	bl	80007bc <MX_I2C2_Init>
  MX_SPI2_Init();
 80005ba:	f000 f93f 	bl	800083c <MX_SPI2_Init>
  MX_TIM3_Init();
 80005be:	f000 f97b 	bl	80008b8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f9db 	bl	800097c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ADXL335_convert_ADCtomV(&ADXL335, &hadc1);
 80005c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000604 <main+0x68>)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	0011      	movs	r1, r2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff7f 	bl	80004d0 <ADXL335_convert_ADCtomV>
	//ADXL335_convert_mVtog(&ADXL335); // Let Matlab do the calculations passing adc via bluetooth
	ADXL335_sendSensorData(&ADXL335, data, sizeof(data));
 80005d2:	490d      	ldr	r1, [pc, #52]	@ (8000608 <main+0x6c>)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2214      	movs	r2, #20
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff ffad 	bl	8000538 <ADXL335_sendSensorData>

	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), HAL_MAX_DELAY);
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	4909      	ldr	r1, [pc, #36]	@ (8000608 <main+0x6c>)
 80005e4:	4809      	ldr	r0, [pc, #36]	@ (800060c <main+0x70>)
 80005e6:	2214      	movs	r2, #20
 80005e8:	f003 fb56 	bl	8003c98 <HAL_UART_Transmit>

	// Set High/Low signal from PA0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005ec:	23a0      	movs	r3, #160	@ 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 f907 	bl	8002806 <HAL_GPIO_TogglePin>

	HAL_Delay(50); // f = 1/t, t = 50ms, f = 20Hz
 80005f8:	2032      	movs	r0, #50	@ 0x32
 80005fa:	f000 fdad 	bl	8001158 <HAL_Delay>
	ADXL335_convert_ADCtomV(&ADXL335, &hadc1);
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	e7e1      	b.n	80005c6 <main+0x2a>
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000078 	.word	0x20000078
 8000608:	200002d0 	.word	0x200002d0
 800060c:	2000023c 	.word	0x2000023c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b093      	sub	sp, #76	@ 0x4c
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	2414      	movs	r4, #20
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2334      	movs	r3, #52	@ 0x34
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 ffaf 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	0018      	movs	r0, r3
 800062a:	2310      	movs	r3, #16
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 ffa8 	bl	8004584 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2380      	movs	r3, #128	@ 0x80
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	0018      	movs	r0, r3
 800063a:	f002 fa3d 	bl	8002ab8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2202      	movs	r2, #2
 8000642:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	0052      	lsls	r2, r2, #1
 800064a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2240      	movs	r2, #64	@ 0x40
 8000656:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	f002 fa75 	bl	8002b50 <HAL_RCC_OscConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800066a:	f000 fa71 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f002 fd70 	bl	8003170 <HAL_RCC_ClockConfig>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000694:	f000 fa5c 	bl	8000b50 <Error_Handler>
  }
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b013      	add	sp, #76	@ 0x4c
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	230c      	movs	r3, #12
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f003 ff68 	bl	8004584 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b4:	4b3c      	ldr	r3, [pc, #240]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006b6:	4a3d      	ldr	r2, [pc, #244]	@ (80007ac <MX_ADC1_Init+0x10c>)
 80006b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ba:	4b3b      	ldr	r3, [pc, #236]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	05d2      	lsls	r2, r2, #23
 80006c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c2:	4b39      	ldr	r3, [pc, #228]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c8:	4b37      	ldr	r3, [pc, #220]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ce:	4b36      	ldr	r3, [pc, #216]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	0392      	lsls	r2, r2, #14
 80006d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006d6:	4b34      	ldr	r3, [pc, #208]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006d8:	2208      	movs	r2, #8
 80006da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006dc:	4b32      	ldr	r3, [pc, #200]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80006e2:	4b31      	ldr	r3, [pc, #196]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80006ee:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b2c      	ldr	r3, [pc, #176]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <MX_ADC1_Init+0x108>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000700:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <MX_ADC1_Init+0x108>)
 8000702:	222c      	movs	r2, #44	@ 0x2c
 8000704:	2100      	movs	r1, #0
 8000706:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <MX_ADC1_Init+0x108>)
 800070a:	2200      	movs	r2, #0
 800070c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800070e:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <MX_ADC1_Init+0x108>)
 8000710:	2200      	movs	r2, #0
 8000712:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <MX_ADC1_Init+0x108>)
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_ADC1_Init+0x108>)
 800071c:	223c      	movs	r2, #60	@ 0x3c
 800071e:	2100      	movs	r1, #0
 8000720:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <MX_ADC1_Init+0x108>)
 8000724:	2200      	movs	r2, #0
 8000726:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_ADC1_Init+0x108>)
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fe80 	bl	8001430 <HAL_ADC_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000734:	f000 fa0c 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4a1d      	ldr	r2, [pc, #116]	@ (80007b0 <MX_ADC1_Init+0x110>)
 800073c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	1d3a      	adds	r2, r7, #4
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_ADC1_Init+0x108>)
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f001 f8bb 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800075a:	f000 f9f9 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <MX_ADC1_Init+0x114>)
 8000762:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2204      	movs	r2, #4
 8000768:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_ADC1_Init+0x108>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f8ab 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800077a:	f000 f9e9 	bl	8000b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <MX_ADC1_Init+0x118>)
 8000782:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2208      	movs	r2, #8
 8000788:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_ADC1_Init+0x108>)
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f89b 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800079a:	f000 f9d9 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	20000078 	.word	0x20000078
 80007ac:	40012400 	.word	0x40012400
 80007b0:	14000020 	.word	0x14000020
 80007b4:	18000040 	.word	0x18000040
 80007b8:	1c000080 	.word	0x1c000080

080007bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <MX_I2C2_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300617;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <MX_I2C2_Init+0x7c>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d2:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007de:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C2_Init+0x74>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 f81f 	bl	800283c <HAL_I2C_Init>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000802:	f000 f9a5 	bl	8000b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C2_Init+0x74>)
 8000808:	2100      	movs	r1, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f002 f8bc 	bl	8002988 <HAL_I2CEx_ConfigAnalogFilter>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000814:	f000 f99c 	bl	8000b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <MX_I2C2_Init+0x74>)
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f002 f8ff 	bl	8002a20 <HAL_I2CEx_ConfigDigitalFilter>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 f993 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000138 	.word	0x20000138
 8000834:	40005800 	.word	0x40005800
 8000838:	00300617 	.word	0x00300617

0800083c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_SPI2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000848:	2282      	movs	r2, #130	@ 0x82
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000856:	22e0      	movs	r2, #224	@ 0xe0
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_SPI2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_SPI2_Init+0x74>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_SPI2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_SPI2_Init+0x74>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_SPI2_Init+0x74>)
 8000896:	2208      	movs	r2, #8
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <MX_SPI2_Init+0x74>)
 800089c:	0018      	movs	r0, r3
 800089e:	f002 fe11 	bl	80034c4 <HAL_SPI_Init>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f953 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000018c 	.word	0x2000018c
 80008b4:	40003800 	.word	0x40003800

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08d      	sub	sp, #52	@ 0x34
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008be:	240c      	movs	r4, #12
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	2324      	movs	r3, #36	@ 0x24
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fe5b 	bl	8004584 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	230c      	movs	r3, #12
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 fe54 	bl	8004584 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <MX_TIM3_Init+0xbc>)
 80008de:	4a26      	ldr	r2, [pc, #152]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_TIM3_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_TIM3_Init+0xbc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_TIM3_Init+0xbc>)
 80008f0:	22ff      	movs	r2, #255	@ 0xff
 80008f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_TIM3_Init+0xbc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_TIM3_Init+0xbc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000900:	0021      	movs	r1, r4
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2203      	movs	r2, #3
 8000906:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2202      	movs	r2, #2
 800090c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2202      	movs	r2, #2
 8000924:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2201      	movs	r2, #1
 800092a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000938:	187a      	adds	r2, r7, r1
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_TIM3_Init+0xbc>)
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f002 fe78 	bl	8003634 <HAL_TIM_Encoder_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000948:	f000 f902 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	003b      	movs	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000952:	003b      	movs	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000958:	003a      	movs	r2, r7
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_TIM3_Init+0xbc>)
 800095c:	0011      	movs	r1, r2
 800095e:	0018      	movs	r0, r3
 8000960:	f003 f8c4 	bl	8003aec <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000968:	f000 f8f2 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b00d      	add	sp, #52	@ 0x34
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	200001f0 	.word	0x200001f0
 8000978:	40000400 	.word	0x40000400

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 8000982:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <MX_USART2_UART_Init+0x64>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 8000988:	22e1      	movs	r2, #225	@ 0xe1
 800098a:	0252      	lsls	r2, r2, #9
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <MX_USART2_UART_Init+0x60>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f003 f910 	bl	8003bec <HAL_UART_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f8be 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	2000023c 	.word	0x2000023c
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_DMA_Init+0x38>)
 80009ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_DMA_Init+0x38>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_DMA_Init+0x38>)
 80009f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2009      	movs	r0, #9
 8000a08:	f001 faf8 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a0c:	2009      	movs	r0, #9
 8000a0e:	f001 fb0a 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b089      	sub	sp, #36	@ 0x24
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	240c      	movs	r4, #12
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f003 fda7 	bl	8004584 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b42      	ldr	r3, [pc, #264]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a3a:	4b41      	ldr	r3, [pc, #260]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a42:	4b3f      	ldr	r3, [pc, #252]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a46:	2202      	movs	r2, #2
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a52:	4b3b      	ldr	r3, [pc, #236]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5a:	4b39      	ldr	r3, [pc, #228]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b36      	ldr	r3, [pc, #216]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6a:	4b35      	ldr	r3, [pc, #212]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a72:	4b33      	ldr	r3, [pc, #204]	@ (8000b40 <MX_GPIO_Init+0x120>)
 8000a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a76:	2204      	movs	r2, #4
 8000a78:	4013      	ands	r3, r2
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a7e:	2381      	movs	r3, #129	@ 0x81
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4830      	ldr	r0, [pc, #192]	@ (8000b44 <MX_GPIO_Init+0x124>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	0019      	movs	r1, r3
 8000a88:	f001 fea0 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000a8c:	492e      	ldr	r1, [pc, #184]	@ (8000b48 <MX_GPIO_Init+0x128>)
 8000a8e:	23a0      	movs	r3, #160	@ 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 fe99 	bl	80027cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2140      	movs	r1, #64	@ 0x40
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fe93 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2281      	movs	r2, #129	@ 0x81
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <MX_GPIO_Init+0x124>)
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	f001 fd1c 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <MX_GPIO_Init+0x128>)
 8000ad0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	193a      	adds	r2, r7, r4
 8000ae6:	23a0      	movs	r3, #160	@ 0xa0
 8000ae8:	05db      	lsls	r3, r3, #23
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f001 fd09 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2240      	movs	r2, #64	@ 0x40
 8000af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2201      	movs	r2, #1
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <MX_GPIO_Init+0x12c>)
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f001 fcf7 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b16:	0021      	movs	r1, r4
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2288      	movs	r2, #136	@ 0x88
 8000b22:	0352      	lsls	r2, r2, #13
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <MX_GPIO_Init+0x124>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	0010      	movs	r0, r2
 8000b34:	f001 fce6 	bl	8002504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b009      	add	sp, #36	@ 0x24
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	50000400 	.word	0x50000400
 8000b48:	00008713 	.word	0x00008713
 8000b4c:	50000800 	.word	0x50000800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	0549      	lsls	r1, r1, #21
 8000b84:	430a      	orrs	r2, r1
 8000b86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_MspInit+0x44>)
 8000b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b8c:	2380      	movs	r3, #128	@ 0x80
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	4013      	ands	r3, r2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b08b      	sub	sp, #44	@ 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2414      	movs	r4, #20
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	2314      	movs	r3, #20
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f003 fce4 	bl	8004584 <memset>
  if(hadc->Instance==ADC1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <HAL_ADC_MspInit+0xd4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d154      	bne.n	8000c70 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000bc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bca:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000bcc:	2180      	movs	r1, #128	@ 0x80
 8000bce:	0349      	lsls	r1, r1, #13
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	035b      	lsls	r3, r3, #13
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	22e0      	movs	r2, #224	@ 0xe0
 8000bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2203      	movs	r2, #3
 8000c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	193a      	adds	r2, r7, r4
 8000c0e:	23a0      	movs	r3, #160	@ 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f001 fc75 	bl	8002504 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c1c:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <HAL_ADC_MspInit+0xe0>)
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c22:	2205      	movs	r2, #5
 8000c24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c34:	2280      	movs	r2, #128	@ 0x80
 8000c36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c3a:	2280      	movs	r2, #128	@ 0x80
 8000c3c:	0052      	lsls	r2, r2, #1
 8000c3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c42:	2280      	movs	r2, #128	@ 0x80
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 fa02 	bl	8002060 <HAL_DMA_Init>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c60:	f7ff ff76 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c68:	651a      	str	r2, [r3, #80]	@ 0x50
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b00b      	add	sp, #44	@ 0x2c
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	40012400 	.word	0x40012400
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	200000dc 	.word	0x200000dc
 8000c84:	40020008 	.word	0x40020008

08000c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	@ 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	2414      	movs	r4, #20
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	2314      	movs	r3, #20
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f003 fc72 	bl	8004584 <memset>
  if(hi2c->Instance==I2C2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d18 <HAL_I2C_MspInit+0x90>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d131      	bne.n	8000d0e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_I2C_MspInit+0x94>)
 8000cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_I2C_MspInit+0x94>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_I2C_MspInit+0x94>)
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	22c0      	movs	r2, #192	@ 0xc0
 8000cc6:	0152      	lsls	r2, r2, #5
 8000cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cca:	0021      	movs	r1, r4
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2212      	movs	r2, #18
 8000cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2206      	movs	r2, #6
 8000ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	187a      	adds	r2, r7, r1
 8000ce6:	23a0      	movs	r3, #160	@ 0xa0
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	0011      	movs	r1, r2
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fc09 	bl	8002504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_I2C_MspInit+0x94>)
 8000cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_I2C_MspInit+0x94>)
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	03c9      	lsls	r1, r1, #15
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_I2C_MspInit+0x94>)
 8000d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d04:	2380      	movs	r3, #128	@ 0x80
 8000d06:	03db      	lsls	r3, r3, #15
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b00b      	add	sp, #44	@ 0x2c
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	40005800 	.word	0x40005800
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08b      	sub	sp, #44	@ 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	2414      	movs	r4, #20
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2314      	movs	r3, #20
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f003 fc26 	bl	8004584 <memset>
  if(hspi->Instance==SPI2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a26      	ldr	r2, [pc, #152]	@ (8000dd8 <HAL_SPI_MspInit+0xb8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d145      	bne.n	8000dce <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d42:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <HAL_SPI_MspInit+0xbc>)
 8000d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d46:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <HAL_SPI_MspInit+0xbc>)
 8000d48:	2180      	movs	r1, #128	@ 0x80
 8000d4a:	01c9      	lsls	r1, r1, #7
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_SPI_MspInit+0xbc>)
 8000d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	01db      	lsls	r3, r3, #7
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <HAL_SPI_MspInit+0xbc>)
 8000d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d62:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <HAL_SPI_MspInit+0xbc>)
 8000d64:	2102      	movs	r1, #2
 8000d66:	430a      	orrs	r2, r1
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <HAL_SPI_MspInit+0xbc>)
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2240      	movs	r2, #64	@ 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2202      	movs	r2, #2
 8000d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2204      	movs	r2, #4
 8000d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <HAL_SPI_MspInit+0xc0>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f001 fbb2 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000da0:	0021      	movs	r1, r4
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	22c0      	movs	r2, #192	@ 0xc0
 8000da6:	0052      	lsls	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2202      	movs	r2, #2
 8000dae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <HAL_SPI_MspInit+0xc0>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f001 fb9b 	bl	8002504 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b00b      	add	sp, #44	@ 0x2c
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	40003800 	.word	0x40003800
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	50000400 	.word	0x50000400

08000de4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b08b      	sub	sp, #44	@ 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	2414      	movs	r4, #20
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	0018      	movs	r0, r3
 8000df2:	2314      	movs	r3, #20
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f003 fbc4 	bl	8004584 <memset>
  if(htim_encoder->Instance==TIM3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d135      	bne.n	8000e72 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e06:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e22:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e24:	2102      	movs	r1, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e36:	0021      	movs	r1, r4
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2230      	movs	r2, #48	@ 0x30
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2201      	movs	r2, #1
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f001 fb51 	bl	8002504 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2010      	movs	r0, #16
 8000e68:	f001 f8c8 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e6c:	2010      	movs	r0, #16
 8000e6e:	f001 f8da 	bl	8002026 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b00b      	add	sp, #44	@ 0x2c
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	40021000 	.word	0x40021000
 8000e84:	50000400 	.word	0x50000400

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	@ 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	2414      	movs	r4, #20
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	2314      	movs	r3, #20
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f003 fb72 	bl	8004584 <memset>
  if(huart->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <HAL_UART_MspInit+0x8c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d130      	bne.n	8000f0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <HAL_UART_MspInit+0x90>)
 8000eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <HAL_UART_MspInit+0x90>)
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0289      	lsls	r1, r1, #10
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_UART_MspInit+0x90>)
 8000eba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_UART_MspInit+0x90>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_UART_MspInit+0x90>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_UART_MspInit+0x90>)
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ede:	0021      	movs	r1, r4
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2202      	movs	r2, #2
 8000eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2201      	movs	r2, #1
 8000efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	187a      	adds	r2, r7, r1
 8000f00:	23a0      	movs	r3, #160	@ 0xa0
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 fafc 	bl	8002504 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b00b      	add	sp, #44	@ 0x2c
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40021000 	.word	0x40021000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f8ec 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <DMA1_Channel1_IRQHandler+0x14>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 f992 	bl	8002280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	200000dc 	.word	0x200000dc

08000f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global Interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <TIM3_IRQHandler+0x14>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f002 fc08 	bl	8003784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f74:	46c0      	nop			@ (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	200001f0 	.word	0x200001f0

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f003 faf0 	bl	8004594 <__errno>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	425b      	negs	r3, r3
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	18d2      	adds	r2, r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b006      	add	sp, #24
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20004800 	.word	0x20004800
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	200002e4 	.word	0x200002e4
 8000fe8:	20000438 	.word	0x20000438

08000fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff fff6 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001026:	f003 fabb 	bl	80045a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800102a:	f7ff fab7 	bl	800059c <main>

0800102e <LoopForever>:

LoopForever:
  b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   r0, =_estack
 8001030:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800103c:	08004f6c 	.word	0x08004f6c
  ldr r2, =_sbss
 8001040:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001044:	20000434 	.word	0x20000434

08001048 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_IRQHandler>
	...

0800104c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_Init+0x3c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_Init+0x3c>)
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	0049      	lsls	r1, r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f810 	bl	800108c <HAL_InitTick>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d003      	beq.n	8001078 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e001      	b.n	800107c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fd70 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	230f      	movs	r3, #15
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <HAL_InitTick+0x88>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d02b      	beq.n	80010fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <HAL_InitTick+0x8c>)
 80010a6:	681c      	ldr	r4, [r3, #0]
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_InitTick+0x88>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	0019      	movs	r1, r3
 80010ae:	23fa      	movs	r3, #250	@ 0xfa
 80010b0:	0098      	lsls	r0, r3, #2
 80010b2:	f7ff f82d 	bl	8000110 <__udivsi3>
 80010b6:	0003      	movs	r3, r0
 80010b8:	0019      	movs	r1, r3
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff f828 	bl	8000110 <__udivsi3>
 80010c0:	0003      	movs	r3, r0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 ffbf 	bl	8002046 <HAL_SYSTICK_Config>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d112      	bne.n	80010f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d80a      	bhi.n	80010e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 ff8e 	bl	8001ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_InitTick+0x90>)
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e00d      	b.n	8001104 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e008      	b.n	8001104 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f2:	230f      	movs	r3, #15
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e003      	b.n	8001104 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b005      	add	sp, #20
 8001110:	bd90      	pop	{r4, r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	20000008 	.word	0x20000008
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_IncTick+0x1c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	001a      	movs	r2, r3
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x20>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	18d2      	adds	r2, r2, r3
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_IncTick+0x20>)
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	20000008 	.word	0x20000008
 8001140:	200002e8 	.word	0x200002e8

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b02      	ldr	r3, [pc, #8]	@ (8001154 <HAL_GetTick+0x10>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	200002e8 	.word	0x200002e8

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff fff0 	bl	8001144 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	001a      	movs	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	189b      	adds	r3, r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	f7ff ffe0 	bl	8001144 <HAL_GetTick>
 8001184:	0002      	movs	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	20000008 	.word	0x20000008

080011a0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80011b0:	401a      	ands	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	fe3fffff 	.word	0xfe3fffff

080011c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	23e0      	movs	r3, #224	@ 0xe0
 80011d6:	045b      	lsls	r3, r3, #17
 80011d8:	4013      	ands	r3, r2
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	2104      	movs	r1, #4
 80011f6:	400a      	ands	r2, r1
 80011f8:	2107      	movs	r1, #7
 80011fa:	4091      	lsls	r1, r2
 80011fc:	000a      	movs	r2, r1
 80011fe:	43d2      	mvns	r2, r2
 8001200:	401a      	ands	r2, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2104      	movs	r1, #4
 8001206:	400b      	ands	r3, r1
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4099      	lsls	r1, r3
 800120c:	000b      	movs	r3, r1
 800120e:	431a      	orrs	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b004      	add	sp, #16
 800121a:	bd80      	pop	{r7, pc}

0800121c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	2104      	movs	r1, #4
 800122e:	400a      	ands	r2, r1
 8001230:	2107      	movs	r1, #7
 8001232:	4091      	lsls	r1, r2
 8001234:	000a      	movs	r2, r1
 8001236:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2104      	movs	r1, #4
 800123c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800123e:	40da      	lsrs	r2, r3
 8001240:	0013      	movs	r3, r2
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}

0800124a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	23c0      	movs	r3, #192	@ 0xc0
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4013      	ands	r3, r2
 800125c:	d101      	bne.n	8001262 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	211f      	movs	r1, #31
 8001280:	400a      	ands	r2, r1
 8001282:	210f      	movs	r1, #15
 8001284:	4091      	lsls	r1, r2
 8001286:	000a      	movs	r2, r1
 8001288:	43d2      	mvns	r2, r2
 800128a:	401a      	ands	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	0e9b      	lsrs	r3, r3, #26
 8001290:	210f      	movs	r1, #15
 8001292:	4019      	ands	r1, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	201f      	movs	r0, #31
 8001298:	4003      	ands	r3, r0
 800129a:	4099      	lsls	r1, r3
 800129c:	000b      	movs	r3, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b004      	add	sp, #16
 80012aa:	bd80      	pop	{r7, pc}

080012ac <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	035b      	lsls	r3, r3, #13
 80012be:	0b5b      	lsrs	r3, r3, #13
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	0352      	lsls	r2, r2, #13
 80012e0:	0b52      	lsrs	r2, r2, #13
 80012e2:	43d2      	mvns	r2, r2
 80012e4:	401a      	ands	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	0212      	lsls	r2, r2, #8
 8001308:	43d2      	mvns	r2, r2
 800130a:	401a      	ands	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	400b      	ands	r3, r1
 8001314:	4904      	ldr	r1, [pc, #16]	@ (8001328 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001316:	400b      	ands	r3, r1
 8001318:	431a      	orrs	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b004      	add	sp, #16
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	07ffff00 	.word	0x07ffff00

0800132c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <LL_ADC_EnableInternalRegulator+0x24>)
 800133a:	4013      	ands	r3, r2
 800133c:	2280      	movs	r2, #128	@ 0x80
 800133e:	0552      	lsls	r2, r2, #21
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	6fffffe8 	.word	0x6fffffe8

08001354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	055b      	lsls	r3, r3, #21
 8001364:	401a      	ands	r2, r3
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	055b      	lsls	r3, r3, #21
 800136a:	429a      	cmp	r2, r3
 800136c:	d101      	bne.n	8001372 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001372:	2300      	movs	r3, #0
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}

0800137c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <LL_ADC_Enable+0x20>)
 800138a:	4013      	ands	r3, r2
 800138c:	2201      	movs	r2, #1
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	7fffffe8 	.word	0x7fffffe8

080013a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <LL_ADC_Disable+0x20>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	2202      	movs	r2, #2
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	7fffffe8 	.word	0x7fffffe8

080013c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <LL_ADC_IsEnabled+0x18>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <LL_ADC_IsEnabled+0x1a>
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <LL_ADC_REG_StartConversion+0x20>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	2204      	movs	r2, #4
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	7fffffe8 	.word	0x7fffffe8

0800140c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2204      	movs	r2, #4
 800141a:	4013      	ands	r3, r2
 800141c:	2b04      	cmp	r3, #4
 800141e:	d101      	bne.n	8001424 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001424:	2300      	movs	r3, #0
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b002      	add	sp, #8
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	231f      	movs	r3, #31
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e17f      	b.n	8001756 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10a      	bne.n	8001474 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fb9f 	bl	8000ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2254      	movs	r2, #84	@ 0x54
 8001470:	2100      	movs	r1, #0
 8001472:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff ff6b 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d115      	bne.n	80014ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff50 	bl	800132c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800148c:	4bb4      	ldr	r3, [pc, #720]	@ (8001760 <HAL_ADC_Init+0x330>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	49b4      	ldr	r1, [pc, #720]	@ (8001764 <HAL_ADC_Init+0x334>)
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe fe3c 	bl	8000110 <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	3301      	adds	r3, #1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014a0:	e002      	b.n	80014a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff ff4e 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d10f      	bne.n	80014dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	2210      	movs	r2, #16
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014cc:	2201      	movs	r2, #1
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014d4:	231f      	movs	r3, #31
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff93 	bl	800140c <LL_ADC_REG_IsConversionOngoing>
 80014e6:	0003      	movs	r3, r0
 80014e8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	2210      	movs	r2, #16
 80014f0:	4013      	ands	r3, r2
 80014f2:	d000      	beq.n	80014f6 <HAL_ADC_Init+0xc6>
 80014f4:	e122      	b.n	800173c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d000      	beq.n	80014fe <HAL_ADC_Init+0xce>
 80014fc:	e11e      	b.n	800173c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001502:	4a99      	ldr	r2, [pc, #612]	@ (8001768 <HAL_ADC_Init+0x338>)
 8001504:	4013      	ands	r3, r2
 8001506:	2202      	movs	r2, #2
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff ff56 	bl	80013c4 <LL_ADC_IsEnabled>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d000      	beq.n	800151e <HAL_ADC_Init+0xee>
 800151c:	e0ad      	b.n	800167a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e1b      	ldrb	r3, [r3, #24]
 8001526:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001528:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7e5b      	ldrb	r3, [r3, #25]
 800152e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001530:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7e9b      	ldrb	r3, [r3, #26]
 8001536:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001538:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_ADC_Init+0x118>
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	015b      	lsls	r3, r3, #5
 8001546:	e000      	b.n	800154a <HAL_ADC_Init+0x11a>
 8001548:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800154a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001550:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da04      	bge.n	8001564 <HAL_ADC_Init+0x134>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	e001      	b.n	8001568 <HAL_ADC_Init+0x138>
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001568:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	212c      	movs	r1, #44	@ 0x2c
 800156e:	5c5b      	ldrb	r3, [r3, r1]
 8001570:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001572:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2220      	movs	r2, #32
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d115      	bne.n	80015b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e9b      	ldrb	r3, [r3, #26]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2280      	movs	r2, #128	@ 0x80
 8001590:	0252      	lsls	r2, r2, #9
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	e00b      	b.n	80015b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	2220      	movs	r2, #32
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	2201      	movs	r2, #1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00a      	beq.n	80015ce <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015bc:	23e0      	movs	r3, #224	@ 0xe0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015c6:	4313      	orrs	r3, r2
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a65      	ldr	r2, [pc, #404]	@ (800176c <HAL_ADC_Init+0x33c>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	0019      	movs	r1, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	0f9b      	lsrs	r3, r3, #30
 80015ea:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	223c      	movs	r2, #60	@ 0x3c
 80015fc:	5c9b      	ldrb	r3, [r3, r2]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d111      	bne.n	8001626 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0f9b      	lsrs	r3, r3, #30
 8001608:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800160e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001614:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800161a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4313      	orrs	r3, r2
 8001620:	2201      	movs	r2, #1
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a50      	ldr	r2, [pc, #320]	@ (8001770 <HAL_ADC_Init+0x340>)
 800162e:	4013      	ands	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	430a      	orrs	r2, r1
 800163a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	23c0      	movs	r3, #192	@ 0xc0
 8001642:	061b      	lsls	r3, r3, #24
 8001644:	429a      	cmp	r2, r3
 8001646:	d018      	beq.n	800167a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	05db      	lsls	r3, r3, #23
 8001650:	429a      	cmp	r2, r3
 8001652:	d012      	beq.n	800167a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	061b      	lsls	r3, r3, #24
 800165c:	429a      	cmp	r2, r3
 800165e:	d00c      	beq.n	800167a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001660:	4b44      	ldr	r3, [pc, #272]	@ (8001774 <HAL_ADC_Init+0x344>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a44      	ldr	r2, [pc, #272]	@ (8001778 <HAL_ADC_Init+0x348>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	23f0      	movs	r3, #240	@ 0xf0
 8001670:	039b      	lsls	r3, r3, #14
 8001672:	401a      	ands	r2, r3
 8001674:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <HAL_ADC_Init+0x344>)
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001682:	001a      	movs	r2, r3
 8001684:	2100      	movs	r1, #0
 8001686:	f7ff fdac 	bl	80011e2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001692:	493a      	ldr	r1, [pc, #232]	@ (800177c <HAL_ADC_Init+0x34c>)
 8001694:	001a      	movs	r2, r3
 8001696:	f7ff fda4 	bl	80011e2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2110      	movs	r1, #16
 80016ae:	4249      	negs	r1, r1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80016b4:	e018      	b.n	80016e8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	039b      	lsls	r3, r3, #14
 80016be:	429a      	cmp	r2, r3
 80016c0:	d112      	bne.n	80016e8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	221c      	movs	r2, #28
 80016d2:	4013      	ands	r3, r2
 80016d4:	2210      	movs	r2, #16
 80016d6:	4252      	negs	r2, r2
 80016d8:	409a      	lsls	r2, r3
 80016da:	0011      	movs	r1, r2
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2100      	movs	r1, #0
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff fd94 	bl	800121c <LL_ADC_GetSamplingTimeCommonChannels>
 80016f4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d10b      	bne.n	8001716 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	2203      	movs	r2, #3
 800170a:	4393      	bics	r3, r2
 800170c:	2201      	movs	r2, #1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001714:	e01c      	b.n	8001750 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	2212      	movs	r2, #18
 800171c:	4393      	bics	r3, r2
 800171e:	2210      	movs	r2, #16
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172a:	2201      	movs	r2, #1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001732:	231f      	movs	r3, #31
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800173a:	e009      	b.n	8001750 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	2210      	movs	r2, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001748:	231f      	movs	r3, #31
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001750:	231f      	movs	r3, #31
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b008      	add	sp, #32
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	20000000 	.word	0x20000000
 8001764:	00030d40 	.word	0x00030d40
 8001768:	fffffefd 	.word	0xfffffefd
 800176c:	ffde0201 	.word	0xffde0201
 8001770:	1ffffc02 	.word	0x1ffffc02
 8001774:	40012708 	.word	0x40012708
 8001778:	ffc3ffff 	.word	0xffc3ffff
 800177c:	07ffff04 	.word	0x07ffff04

08001780 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff fe3b 	bl	800140c <LL_ADC_REG_IsConversionOngoing>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d16c      	bne.n	8001874 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2254      	movs	r2, #84	@ 0x54
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_Start_DMA+0x28>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e06c      	b.n	8001882 <HAL_ADC_Start_DMA+0x102>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2254      	movs	r2, #84	@ 0x54
 80017ac:	2101      	movs	r1, #1
 80017ae:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	4013      	ands	r3, r2
 80017ba:	d113      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff fdff 	bl	80013c4 <LL_ADC_IsEnabled>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d004      	beq.n	80017d4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff fde6 	bl	80013a0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017e4:	2517      	movs	r5, #23
 80017e6:	197c      	adds	r4, r7, r5
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fa46 	bl	8001c7c <ADC_Enable>
 80017f0:	0003      	movs	r3, r0
 80017f2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017f4:	002c      	movs	r4, r5
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d13e      	bne.n	800187c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	4a22      	ldr	r2, [pc, #136]	@ (800188c <HAL_ADC_Start_DMA+0x10c>)
 8001804:	4013      	ands	r3, r2
 8001806:	2280      	movs	r2, #128	@ 0x80
 8001808:	0052      	lsls	r2, r2, #1
 800180a:	431a      	orrs	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800181a:	4a1d      	ldr	r2, [pc, #116]	@ (8001890 <HAL_ADC_Start_DMA+0x110>)
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001822:	4a1c      	ldr	r2, [pc, #112]	@ (8001894 <HAL_ADC_Start_DMA+0x114>)
 8001824:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800182a:	4a1b      	ldr	r2, [pc, #108]	@ (8001898 <HAL_ADC_Start_DMA+0x118>)
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	221c      	movs	r2, #28
 8001834:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2254      	movs	r2, #84	@ 0x54
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2110      	movs	r1, #16
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3340      	adds	r3, #64	@ 0x40
 8001858:	0019      	movs	r1, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	193c      	adds	r4, r7, r4
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f000 fc88 	bl	8002174 <HAL_DMA_Start_IT>
 8001864:	0003      	movs	r3, r0
 8001866:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff fdbb 	bl	80013e8 <LL_ADC_REG_StartConversion>
 8001872:	e003      	b.n	800187c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001874:	2317      	movs	r3, #23
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800187c:	2317      	movs	r3, #23
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b006      	add	sp, #24
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	fffff0fe 	.word	0xfffff0fe
 8001890:	08001d89 	.word	0x08001d89
 8001894:	08001e51 	.word	0x08001e51
 8001898:	08001e6f 	.word	0x08001e6f

0800189c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018b4:	46c0      	nop			@ (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018c4:	46c0      	nop			@ (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d6:	2317      	movs	r3, #23
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2254      	movs	r2, #84	@ 0x54
 80018e6:	5c9b      	ldrb	r3, [r3, r2]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x24>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e1c0      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x3a6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2254      	movs	r2, #84	@ 0x54
 80018f4:	2101      	movs	r1, #1
 80018f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff fd85 	bl	800140c <LL_ADC_REG_IsConversionOngoing>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d000      	beq.n	8001908 <HAL_ADC_ConfigChannel+0x3c>
 8001906:	e1a3      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d100      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x46>
 8001910:	e143      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	429a      	cmp	r2, r3
 800191c:	d004      	beq.n	8001928 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001922:	4ac1      	ldr	r2, [pc, #772]	@ (8001c28 <HAL_ADC_ConfigChannel+0x35c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d108      	bne.n	800193a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0019      	movs	r1, r3
 8001932:	0010      	movs	r0, r2
 8001934:	f7ff fcba 	bl	80012ac <LL_ADC_REG_SetSequencerChAdd>
 8001938:	e0c9      	b.n	8001ace <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	211f      	movs	r1, #31
 8001944:	400b      	ands	r3, r1
 8001946:	210f      	movs	r1, #15
 8001948:	4099      	lsls	r1, r3
 800194a:	000b      	movs	r3, r1
 800194c:	43db      	mvns	r3, r3
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	035b      	lsls	r3, r3, #13
 8001958:	0b5b      	lsrs	r3, r3, #13
 800195a:	d105      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x9c>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0e9b      	lsrs	r3, r3, #26
 8001962:	221f      	movs	r2, #31
 8001964:	4013      	ands	r3, r2
 8001966:	e098      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d000      	beq.n	8001974 <HAL_ADC_ConfigChannel+0xa8>
 8001972:	e091      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d000      	beq.n	8001980 <HAL_ADC_ConfigChannel+0xb4>
 800197e:	e089      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x1c8>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2204      	movs	r2, #4
 8001986:	4013      	ands	r3, r2
 8001988:	d000      	beq.n	800198c <HAL_ADC_ConfigChannel+0xc0>
 800198a:	e081      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x1c4>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2208      	movs	r2, #8
 8001992:	4013      	ands	r3, r2
 8001994:	d000      	beq.n	8001998 <HAL_ADC_ConfigChannel+0xcc>
 8001996:	e079      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x1c0>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2210      	movs	r2, #16
 800199e:	4013      	ands	r3, r2
 80019a0:	d000      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0xd8>
 80019a2:	e071      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1bc>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2220      	movs	r2, #32
 80019aa:	4013      	ands	r3, r2
 80019ac:	d000      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0xe4>
 80019ae:	e069      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1b8>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2240      	movs	r2, #64	@ 0x40
 80019b6:	4013      	ands	r3, r2
 80019b8:	d000      	beq.n	80019bc <HAL_ADC_ConfigChannel+0xf0>
 80019ba:	e061      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1b4>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	4013      	ands	r3, r2
 80019c4:	d000      	beq.n	80019c8 <HAL_ADC_ConfigChannel+0xfc>
 80019c6:	e059      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1b0>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d151      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1ac>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d149      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1a8>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4013      	ands	r3, r2
 80019ea:	d141      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1a4>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4013      	ands	r3, r2
 80019f6:	d139      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1a0>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	015b      	lsls	r3, r3, #5
 8001a00:	4013      	ands	r3, r2
 8001a02:	d131      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x19c>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	019b      	lsls	r3, r3, #6
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d129      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x198>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	01db      	lsls	r3, r3, #7
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d121      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x194>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4013      	ands	r3, r2
 8001a26:	d119      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x190>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	025b      	lsls	r3, r3, #9
 8001a30:	4013      	ands	r3, r2
 8001a32:	d111      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x18c>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x188>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	@ 0x80
 8001a46:	02db      	lsls	r3, r3, #11
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d001      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x184>
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	e024      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	2300      	movs	r3, #0
 8001a52:	e022      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	2311      	movs	r3, #17
 8001a56:	e020      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	2310      	movs	r3, #16
 8001a5a:	e01e      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	e01c      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	230e      	movs	r3, #14
 8001a62:	e01a      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a64:	230d      	movs	r3, #13
 8001a66:	e018      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a68:	230c      	movs	r3, #12
 8001a6a:	e016      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a6c:	230b      	movs	r3, #11
 8001a6e:	e014      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a70:	230a      	movs	r3, #10
 8001a72:	e012      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a74:	2309      	movs	r3, #9
 8001a76:	e010      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a78:	2308      	movs	r3, #8
 8001a7a:	e00e      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	e00c      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a80:	2306      	movs	r3, #6
 8001a82:	e00a      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a84:	2305      	movs	r3, #5
 8001a86:	e008      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e006      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e004      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x1ce>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6852      	ldr	r2, [r2, #4]
 8001a9e:	201f      	movs	r0, #31
 8001aa0:	4002      	ands	r2, r0
 8001aa2:	4093      	lsls	r3, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d808      	bhi.n	8001ace <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	001a      	movs	r2, r3
 8001aca:	f7ff fbcf 	bl	800126c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	001a      	movs	r2, r3
 8001adc:	f7ff fc0a 	bl	80012f4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db00      	blt.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
 8001ae8:	e0bc      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aea:	4b50      	ldr	r3, [pc, #320]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff fb6b 	bl	80011c8 <LL_ADC_GetCommonPathInternalCh>
 8001af2:	0003      	movs	r3, r0
 8001af4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4d      	ldr	r2, [pc, #308]	@ (8001c30 <HAL_ADC_ConfigChannel+0x364>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d122      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	2380      	movs	r3, #128	@ 0x80
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b08:	d11d      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2280      	movs	r2, #128	@ 0x80
 8001b0e:	0412      	lsls	r2, r2, #16
 8001b10:	4313      	orrs	r3, r2
 8001b12:	4a46      	ldr	r2, [pc, #280]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001b14:	0019      	movs	r1, r3
 8001b16:	0010      	movs	r0, r2
 8001b18:	f7ff fb42 	bl	80011a0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b1c:	4b45      	ldr	r3, [pc, #276]	@ (8001c34 <HAL_ADC_ConfigChannel+0x368>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4945      	ldr	r1, [pc, #276]	@ (8001c38 <HAL_ADC_ConfigChannel+0x36c>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7fe faf4 	bl	8000110 <__udivsi3>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	189b      	adds	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b36:	e002      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b44:	e08e      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c3c <HAL_ADC_ConfigChannel+0x370>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10e      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	045b      	lsls	r3, r3, #17
 8001b56:	4013      	ands	r3, r2
 8001b58:	d109      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2280      	movs	r2, #128	@ 0x80
 8001b5e:	0452      	lsls	r2, r2, #17
 8001b60:	4313      	orrs	r3, r2
 8001b62:	4a32      	ldr	r2, [pc, #200]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001b64:	0019      	movs	r1, r3
 8001b66:	0010      	movs	r0, r2
 8001b68:	f7ff fb1a 	bl	80011a0 <LL_ADC_SetCommonPathInternalCh>
 8001b6c:	e07a      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a33      	ldr	r2, [pc, #204]	@ (8001c40 <HAL_ADC_ConfigChannel+0x374>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d000      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x2ae>
 8001b78:	e074      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	03db      	lsls	r3, r3, #15
 8001b80:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b82:	d000      	beq.n	8001b86 <HAL_ADC_ConfigChannel+0x2ba>
 8001b84:	e06e      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2280      	movs	r2, #128	@ 0x80
 8001b8a:	03d2      	lsls	r2, r2, #15
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001b90:	0019      	movs	r1, r3
 8001b92:	0010      	movs	r0, r2
 8001b94:	f7ff fb04 	bl	80011a0 <LL_ADC_SetCommonPathInternalCh>
 8001b98:	e064      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d004      	beq.n	8001bb0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001baa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c28 <HAL_ADC_ConfigChannel+0x35c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d107      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0019      	movs	r1, r3
 8001bba:	0010      	movs	r0, r2
 8001bbc:	f7ff fb87 	bl	80012ce <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	da4d      	bge.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc8:	4b18      	ldr	r3, [pc, #96]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff fafc 	bl	80011c8 <LL_ADC_GetCommonPathInternalCh>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HAL_ADC_ConfigChannel+0x364>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d108      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <HAL_ADC_ConfigChannel+0x378>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001be6:	0019      	movs	r1, r3
 8001be8:	0010      	movs	r0, r2
 8001bea:	f7ff fad9 	bl	80011a0 <LL_ADC_SetCommonPathInternalCh>
 8001bee:	e039      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a11      	ldr	r2, [pc, #68]	@ (8001c3c <HAL_ADC_ConfigChannel+0x370>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d108      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <HAL_ADC_ConfigChannel+0x37c>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001c02:	0019      	movs	r1, r3
 8001c04:	0010      	movs	r0, r2
 8001c06:	f7ff facb 	bl	80011a0 <LL_ADC_SetCommonPathInternalCh>
 8001c0a:	e02b      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_ADC_ConfigChannel+0x374>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d126      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4a0c      	ldr	r2, [pc, #48]	@ (8001c4c <HAL_ADC_ConfigChannel+0x380>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	4a03      	ldr	r2, [pc, #12]	@ (8001c2c <HAL_ADC_ConfigChannel+0x360>)
 8001c1e:	0019      	movs	r1, r3
 8001c20:	0010      	movs	r0, r2
 8001c22:	f7ff fabd 	bl	80011a0 <LL_ADC_SetCommonPathInternalCh>
 8001c26:	e01d      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x398>
 8001c28:	80000004 	.word	0x80000004
 8001c2c:	40012708 	.word	0x40012708
 8001c30:	b0001000 	.word	0xb0001000
 8001c34:	20000000 	.word	0x20000000
 8001c38:	00030d40 	.word	0x00030d40
 8001c3c:	b8004000 	.word	0xb8004000
 8001c40:	b4002000 	.word	0xb4002000
 8001c44:	ff7fffff 	.word	0xff7fffff
 8001c48:	feffffff 	.word	0xfeffffff
 8001c4c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	2220      	movs	r2, #32
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c5c:	2317      	movs	r3, #23
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2254      	movs	r2, #84	@ 0x54
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c6c:	2317      	movs	r3, #23
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b006      	add	sp, #24
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)

08001c7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff fb99 	bl	80013c4 <LL_ADC_IsEnabled>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d000      	beq.n	8001c98 <ADC_Enable+0x1c>
 8001c96:	e069      	b.n	8001d6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a36      	ldr	r2, [pc, #216]	@ (8001d78 <ADC_Enable+0xfc>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	2210      	movs	r2, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e056      	b.n	8001d6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fb59 	bl	800137c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <ADC_Enable+0x100>)
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff fa7b 	bl	80011c8 <LL_ADC_GetCommonPathInternalCh>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d00f      	beq.n	8001cfc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cdc:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <ADC_Enable+0x104>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4928      	ldr	r1, [pc, #160]	@ (8001d84 <ADC_Enable+0x108>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7fe fa14 	bl	8000110 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001cec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cee:	e002      	b.n	8001cf6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f9      	bne.n	8001cf0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e5b      	ldrb	r3, [r3, #25]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d033      	beq.n	8001d6c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fa1e 	bl	8001144 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d0c:	e027      	b.n	8001d5e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff fb56 	bl	80013c4 <LL_ADC_IsEnabled>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d104      	bne.n	8001d26 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fb2b 	bl	800137c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d26:	f7ff fa0d 	bl	8001144 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d914      	bls.n	8001d5e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d00d      	beq.n	8001d5e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	2210      	movs	r2, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2201      	movs	r2, #1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e007      	b.n	8001d6e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d1d0      	bne.n	8001d0e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	80000017 	.word	0x80000017
 8001d7c:	40012708 	.word	0x40012708
 8001d80:	20000000 	.word	0x20000000
 8001d84:	00030d40 	.word	0x00030d40

08001d88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	2250      	movs	r2, #80	@ 0x50
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d141      	bne.n	8001e24 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	2280      	movs	r2, #128	@ 0x80
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	431a      	orrs	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7ff fa49 	bl	800124a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d02e      	beq.n	8001e1a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7e9b      	ldrb	r3, [r3, #26]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d12a      	bne.n	8001e1a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d123      	bne.n	8001e1a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fb18 	bl	800140c <LL_ADC_REG_IsConversionOngoing>
 8001ddc:	1e03      	subs	r3, r0, #0
 8001dde:	d110      	bne.n	8001e02 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	210c      	movs	r1, #12
 8001dec:	438a      	bics	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	4a15      	ldr	r2, [pc, #84]	@ (8001e4c <ADC_DMAConvCplt+0xc4>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	2201      	movs	r2, #1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e00:	e00b      	b.n	8001e1a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	2220      	movs	r2, #32
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff fd3d 	bl	800189c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e22:	e00f      	b.n	8001e44 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	2210      	movs	r2, #16
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff fd43 	bl	80018bc <HAL_ADC_ErrorCallback>
}
 8001e36:	e005      	b.n	8001e44 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	0010      	movs	r0, r2
 8001e42:	4798      	blx	r3
}
 8001e44:	46c0      	nop			@ (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	fffffefe 	.word	0xfffffefe

08001e50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fd23 	bl	80018ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b004      	add	sp, #16
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	2240      	movs	r2, #64	@ 0x40
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fd10 	bl	80018bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9c:	46c0      	nop			@ (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	0002      	movs	r2, r0
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eb6:	d809      	bhi.n	8001ecc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	231f      	movs	r3, #31
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <__NVIC_EnableIRQ+0x30>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4091      	lsls	r1, r2
 8001ec8:	000a      	movs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eec:	d828      	bhi.n	8001f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eee:	4a2f      	ldr	r2, [pc, #188]	@ (8001fac <__NVIC_SetPriority+0xd4>)
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	33c0      	adds	r3, #192	@ 0xc0
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	589b      	ldr	r3, [r3, r2]
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	0011      	movs	r1, r2
 8001f04:	2203      	movs	r2, #3
 8001f06:	400a      	ands	r2, r1
 8001f08:	00d2      	lsls	r2, r2, #3
 8001f0a:	21ff      	movs	r1, #255	@ 0xff
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	43d2      	mvns	r2, r2
 8001f12:	401a      	ands	r2, r3
 8001f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	22ff      	movs	r2, #255	@ 0xff
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	2303      	movs	r3, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	481f      	ldr	r0, [pc, #124]	@ (8001fac <__NVIC_SetPriority+0xd4>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	430a      	orrs	r2, r1
 8001f38:	33c0      	adds	r3, #192	@ 0xc0
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f3e:	e031      	b.n	8001fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f40:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	0019      	movs	r1, r3
 8001f48:	230f      	movs	r3, #15
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3306      	adds	r3, #6
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1dfa      	adds	r2, r7, #7
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2203      	movs	r2, #3
 8001f62:	400a      	ands	r2, r1
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	21ff      	movs	r1, #255	@ 0xff
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	43d2      	mvns	r2, r2
 8001f6e:	401a      	ands	r2, r3
 8001f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	401a      	ands	r2, r3
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2303      	movs	r3, #3
 8001f82:	4003      	ands	r3, r0
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	4809      	ldr	r0, [pc, #36]	@ (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	001c      	movs	r4, r3
 8001f90:	230f      	movs	r3, #15
 8001f92:	4023      	ands	r3, r4
 8001f94:	3b08      	subs	r3, #8
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18c3      	adds	r3, r0, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b003      	add	sp, #12
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	045b      	lsls	r3, r3, #17
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d301      	bcc.n	8001fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e010      	b.n	8001fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <SysTick_Config+0x44>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	2103      	movs	r1, #3
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff ff7c 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <SysTick_Config+0x44>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <SysTick_Config+0x44>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	210f      	movs	r1, #15
 8002008:	187b      	adds	r3, r7, r1
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	0011      	movs	r1, r2
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	0002      	movs	r2, r0
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b25b      	sxtb	r3, r3
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ff33 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ffaf 	bl	8001fb4 <SysTick_Config>
 8002056:	0003      	movs	r3, r0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e077      	b.n	8002162 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3d      	ldr	r2, [pc, #244]	@ (800216c <HAL_DMA_Init+0x10c>)
 8002078:	4694      	mov	ip, r2
 800207a:	4463      	add	r3, ip
 800207c:	2114      	movs	r1, #20
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe f846 	bl	8000110 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2225      	movs	r2, #37	@ 0x25
 8002090:	2102      	movs	r1, #2
 8002092:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4934      	ldr	r1, [pc, #208]	@ (8002170 <HAL_DMA_Init+0x110>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f000 f9c1 	bl	8002464 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	01db      	lsls	r3, r3, #7
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d102      	bne.n	80020f4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	213f      	movs	r1, #63	@ 0x3f
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800210a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d011      	beq.n	8002138 <HAL_DMA_Init+0xd8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d80d      	bhi.n	8002138 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f000 f9cc 	bl	80024bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	e008      	b.n	800214a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2225      	movs	r2, #37	@ 0x25
 8002154:	2101      	movs	r1, #1
 8002156:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	@ 0x24
 800215c:	2100      	movs	r1, #0
 800215e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	bffdfff8 	.word	0xbffdfff8
 8002170:	ffff800f 	.word	0xffff800f

08002174 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2317      	movs	r3, #23
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2224      	movs	r2, #36	@ 0x24
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Start_IT+0x24>
 8002194:	2302      	movs	r3, #2
 8002196:	e06f      	b.n	8002278 <HAL_DMA_Start_IT+0x104>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2224      	movs	r2, #36	@ 0x24
 800219c:	2101      	movs	r1, #1
 800219e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2225      	movs	r2, #37	@ 0x25
 80021a4:	5c9b      	ldrb	r3, [r3, r2]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d157      	bne.n	800225c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2225      	movs	r2, #37	@ 0x25
 80021b0:	2102      	movs	r1, #2
 80021b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	438a      	bics	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f907 	bl	80023e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	210e      	movs	r1, #14
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2104      	movs	r1, #4
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	210a      	movs	r1, #10
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	025b      	lsls	r3, r3, #9
 800221a:	4013      	ands	r3, r2
 800221c:	d008      	beq.n	8002230 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	2180      	movs	r1, #128	@ 0x80
 800222a:	0049      	lsls	r1, r1, #1
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002242:	2180      	movs	r1, #128	@ 0x80
 8002244:	0049      	lsls	r1, r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e00a      	b.n	8002272 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2224      	movs	r2, #36	@ 0x24
 8002266:	2100      	movs	r1, #0
 8002268:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800226a:	2317      	movs	r3, #23
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b006      	add	sp, #24
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002288:	4b55      	ldr	r3, [pc, #340]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	221c      	movs	r2, #28
 800229c:	4013      	ands	r3, r2
 800229e:	2204      	movs	r2, #4
 80022a0:	409a      	lsls	r2, r3
 80022a2:	0013      	movs	r3, r2
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4013      	ands	r3, r2
 80022a8:	d027      	beq.n	80022fa <HAL_DMA_IRQHandler+0x7a>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	d023      	beq.n	80022fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	4013      	ands	r3, r2
 80022bc:	d107      	bne.n	80022ce <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2104      	movs	r1, #4
 80022ca:	438a      	bics	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80022ce:	4b44      	ldr	r3, [pc, #272]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	221c      	movs	r2, #28
 80022d8:	4013      	ands	r3, r2
 80022da:	2204      	movs	r2, #4
 80022dc:	409a      	lsls	r2, r3
 80022de:	4b40      	ldr	r3, [pc, #256]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <HAL_DMA_IRQHandler+0x6e>
 80022ec:	e073      	b.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	0010      	movs	r0, r2
 80022f6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80022f8:	e06d      	b.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	221c      	movs	r2, #28
 8002300:	4013      	ands	r3, r2
 8002302:	2202      	movs	r2, #2
 8002304:	409a      	lsls	r2, r3
 8002306:	0013      	movs	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	d02e      	beq.n	800236c <HAL_DMA_IRQHandler+0xec>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2202      	movs	r2, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d02a      	beq.n	800236c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2220      	movs	r2, #32
 800231e:	4013      	ands	r3, r2
 8002320:	d10b      	bne.n	800233a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	210a      	movs	r1, #10
 800232e:	438a      	bics	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2225      	movs	r2, #37	@ 0x25
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800233a:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	221c      	movs	r2, #28
 8002344:	4013      	ands	r3, r2
 8002346:	2202      	movs	r2, #2
 8002348:	409a      	lsls	r2, r3
 800234a:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	@ 0x24
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03a      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	0010      	movs	r0, r2
 8002368:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800236a:	e034      	b.n	80023d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	221c      	movs	r2, #28
 8002372:	4013      	ands	r3, r2
 8002374:	2208      	movs	r2, #8
 8002376:	409a      	lsls	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	d02b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x158>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2208      	movs	r2, #8
 8002384:	4013      	ands	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	210e      	movs	r1, #14
 8002394:	438a      	bics	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	221c      	movs	r2, #28
 80023a2:	4013      	ands	r3, r2
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_DMA_IRQHandler+0x160>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2225      	movs	r2, #37	@ 0x25
 80023b8:	2101      	movs	r1, #1
 80023ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	@ 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	0010      	movs	r0, r2
 80023d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	46c0      	nop			@ (mov r8, r8)
}
 80023da:	46bd      	mov	sp, r7
 80023dc:	b004      	add	sp, #16
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40020000 	.word	0x40020000

080023e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800240c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <DMA_SetConfig+0x7c>)
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	221c      	movs	r2, #28
 8002418:	4013      	ands	r3, r2
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <DMA_SetConfig+0x7c>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b10      	cmp	r3, #16
 8002432:	d108      	bne.n	8002446 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002444:	e007      	b.n	8002456 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	60da      	str	r2, [r3, #12]
}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	40020000 	.word	0x40020000

08002464 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	4a10      	ldr	r2, [pc, #64]	@ (80024b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002474:	4694      	mov	ip, r2
 8002476:	4463      	add	r3, ip
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	001a      	movs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	23ff      	movs	r3, #255	@ 0xff
 8002488:	4013      	ands	r3, r2
 800248a:	3b08      	subs	r3, #8
 800248c:	2114      	movs	r1, #20
 800248e:	0018      	movs	r0, r3
 8002490:	f7fd fe3e 	bl	8000110 <__udivsi3>
 8002494:	0003      	movs	r3, r0
 8002496:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a07      	ldr	r2, [pc, #28]	@ (80024b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800249c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	221f      	movs	r2, #31
 80024a2:	4013      	ands	r3, r2
 80024a4:	2201      	movs	r2, #1
 80024a6:	409a      	lsls	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	10008200 	.word	0x10008200
 80024b8:	40020880 	.word	0x40020880

080024bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	223f      	movs	r2, #63	@ 0x3f
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024d2:	4694      	mov	ip, r2
 80024d4:	4463      	add	r3, ip
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	001a      	movs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	2201      	movs	r2, #1
 80024ee:	409a      	lsls	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	1000823f 	.word	0x1000823f
 8002500:	40020940 	.word	0x40020940

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002512:	e147      	b.n	80027a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4091      	lsls	r1, r2
 800251e:	000a      	movs	r2, r1
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d100      	bne.n	800252c <HAL_GPIO_Init+0x28>
 800252a:	e138      	b.n	800279e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	4013      	ands	r3, r2
 8002534:	2b01      	cmp	r3, #1
 8002536:	d005      	beq.n	8002544 <HAL_GPIO_Init+0x40>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	4013      	ands	r3, r2
 8002540:	2b02      	cmp	r3, #2
 8002542:	d130      	bne.n	80025a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	409a      	lsls	r2, r3
 8002552:	0013      	movs	r3, r2
 8002554:	43da      	mvns	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257a:	2201      	movs	r2, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	2201      	movs	r2, #1
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2203      	movs	r2, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d017      	beq.n	80025e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d123      	bne.n	8002636 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	58d3      	ldr	r3, [r2, r3]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2207      	movs	r2, #7
 8002600:	4013      	ands	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	409a      	lsls	r2, r3
 8002608:	0013      	movs	r3, r2
 800260a:	43da      	mvns	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2107      	movs	r1, #7
 800261a:	400b      	ands	r3, r1
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	409a      	lsls	r2, r3
 8002644:	0013      	movs	r3, r2
 8002646:	43da      	mvns	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	401a      	ands	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	23c0      	movs	r3, #192	@ 0xc0
 8002670:	029b      	lsls	r3, r3, #10
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_GPIO_Init+0x174>
 8002676:	e092      	b.n	800279e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002678:	4a50      	ldr	r2, [pc, #320]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3318      	adds	r3, #24
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	589b      	ldr	r3, [r3, r2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2203      	movs	r2, #3
 800268a:	4013      	ands	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	220f      	movs	r2, #15
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	43da      	mvns	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	23a0      	movs	r3, #160	@ 0xa0
 80026a0:	05db      	lsls	r3, r3, #23
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x1ca>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	@ (80027c0 <HAL_GPIO_Init+0x2bc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x1c6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a44      	ldr	r2, [pc, #272]	@ (80027c4 <HAL_GPIO_Init+0x2c0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x1c2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a43      	ldr	r2, [pc, #268]	@ (80027c8 <HAL_GPIO_Init+0x2c4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x1be>
 80026be:	2303      	movs	r3, #3
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x1cc>
 80026ce:	2300      	movs	r3, #0
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	2103      	movs	r1, #3
 80026d4:	400a      	ands	r2, r1
 80026d6:	00d2      	lsls	r2, r2, #3
 80026d8:	4093      	lsls	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026e0:	4936      	ldr	r1, [pc, #216]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3318      	adds	r3, #24
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ee:	4b33      	ldr	r3, [pc, #204]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	035b      	lsls	r3, r3, #13
 8002706:	4013      	ands	r3, r2
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002712:	4b2a      	ldr	r3, [pc, #168]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002718:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	039b      	lsls	r3, r3, #14
 8002730:	4013      	ands	r3, r2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002742:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 8002744:	2384      	movs	r3, #132	@ 0x84
 8002746:	58d3      	ldr	r3, [r2, r3]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43da      	mvns	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002768:	4914      	ldr	r1, [pc, #80]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 800276a:	2284      	movs	r2, #132	@ 0x84
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002770:	4a12      	ldr	r2, [pc, #72]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	58d3      	ldr	r3, [r2, r3]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	4013      	ands	r3, r2
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002796:	4909      	ldr	r1, [pc, #36]	@ (80027bc <HAL_GPIO_Init+0x2b8>)
 8002798:	2280      	movs	r2, #128	@ 0x80
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	40da      	lsrs	r2, r3
 80027ac:	1e13      	subs	r3, r2, #0
 80027ae:	d000      	beq.n	80027b2 <HAL_GPIO_Init+0x2ae>
 80027b0:	e6b0      	b.n	8002514 <HAL_GPIO_Init+0x10>
  }
}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b006      	add	sp, #24
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021800 	.word	0x40021800
 80027c0:	50000400 	.word	0x50000400
 80027c4:	50000800 	.word	0x50000800
 80027c8:	50000c00 	.word	0x50000c00

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	0008      	movs	r0, r1
 80027d6:	0011      	movs	r1, r2
 80027d8:	1cbb      	adds	r3, r7, #2
 80027da:	1c02      	adds	r2, r0, #0
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	1c7b      	adds	r3, r7, #1
 80027e0:	1c0a      	adds	r2, r1, #0
 80027e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e4:	1c7b      	adds	r3, r7, #1
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ec:	1cbb      	adds	r3, r7, #2
 80027ee:	881a      	ldrh	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f6:	1cbb      	adds	r3, r7, #2
 80027f8:	881a      	ldrh	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	000a      	movs	r2, r1
 8002810:	1cbb      	adds	r3, r7, #2
 8002812:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800281a:	1cbb      	adds	r3, r7, #2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	041a      	lsls	r2, r3, #16
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	1cb9      	adds	r1, r7, #2
 800282a:	8809      	ldrh	r1, [r1, #0]
 800282c:	400b      	ands	r3, r1
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
}
 8002834:	46c0      	nop			@ (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08f      	b.n	800296e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2241      	movs	r2, #65	@ 0x41
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f7fe fa0f 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2241      	movs	r2, #65	@ 0x41
 800286e:	2124      	movs	r1, #36	@ 0x24
 8002870:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	493b      	ldr	r1, [pc, #236]	@ (8002978 <HAL_I2C_Init+0x13c>)
 800288c:	400a      	ands	r2, r1
 800288e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4938      	ldr	r1, [pc, #224]	@ (800297c <HAL_I2C_Init+0x140>)
 800289c:	400a      	ands	r2, r1
 800289e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2180      	movs	r1, #128	@ 0x80
 80028b2:	0209      	lsls	r1, r1, #8
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e007      	b.n	80028ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2184      	movs	r1, #132	@ 0x84
 80028c4:	0209      	lsls	r1, r1, #8
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d109      	bne.n	80028e6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2180      	movs	r1, #128	@ 0x80
 80028de:	0109      	lsls	r1, r1, #4
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	e007      	b.n	80028f6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4923      	ldr	r1, [pc, #140]	@ (8002980 <HAL_I2C_Init+0x144>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4920      	ldr	r1, [pc, #128]	@ (8002984 <HAL_I2C_Init+0x148>)
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	491a      	ldr	r1, [pc, #104]	@ (800297c <HAL_I2C_Init+0x140>)
 8002912:	400a      	ands	r2, r1
 8002914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1a      	ldr	r2, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2241      	movs	r2, #65	@ 0x41
 800295a:	2120      	movs	r1, #32
 800295c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2242      	movs	r2, #66	@ 0x42
 8002968:	2100      	movs	r1, #0
 800296a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	f0ffffff 	.word	0xf0ffffff
 800297c:	ffff7fff 	.word	0xffff7fff
 8002980:	fffff7ff 	.word	0xfffff7ff
 8002984:	02008000 	.word	0x02008000

08002988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2241      	movs	r2, #65	@ 0x41
 8002996:	5c9b      	ldrb	r3, [r3, r2]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d138      	bne.n	8002a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e032      	b.n	8002a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	2101      	movs	r1, #1
 80029b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2241      	movs	r2, #65	@ 0x41
 80029b8:	2124      	movs	r1, #36	@ 0x24
 80029ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2101      	movs	r1, #1
 80029c8:	438a      	bics	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4911      	ldr	r1, [pc, #68]	@ (8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80029d8:	400a      	ands	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2241      	movs	r2, #65	@ 0x41
 8002a00:	2120      	movs	r1, #32
 8002a02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	e000      	b.n	8002a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a10:	2302      	movs	r3, #2
  }
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	ffffefff 	.word	0xffffefff

08002a20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2241      	movs	r2, #65	@ 0x41
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d139      	bne.n	8002aaa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2240      	movs	r2, #64	@ 0x40
 8002a3a:	5c9b      	ldrb	r3, [r3, r2]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e033      	b.n	8002aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	2101      	movs	r1, #1
 8002a4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2241      	movs	r2, #65	@ 0x41
 8002a50:	2124      	movs	r1, #36	@ 0x24
 8002a52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	438a      	bics	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2241      	movs	r2, #65	@ 0x41
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2240      	movs	r2, #64	@ 0x40
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	fffff0ff 	.word	0xfffff0ff

08002ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	@ (8002b2c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d11f      	bne.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4912      	ldr	r1, [pc, #72]	@ (8002b34 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7fd fb10 	bl	8000110 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	3301      	adds	r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002af6:	e008      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e001      	b.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e009      	b.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b0a:	4b07      	ldr	r3, [pc, #28]	@ (8002b28 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	401a      	ands	r2, r3
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d0ed      	beq.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	fffff9ff 	.word	0xfffff9ff
 8002b30:	20000000 	.word	0x20000000
 8002b34:	000f4240 	.word	0x000f4240

08002b38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	23e0      	movs	r3, #224	@ 0xe0
 8002b42:	01db      	lsls	r3, r3, #7
 8002b44:	4013      	ands	r3, r2
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e2f3      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <HAL_RCC_OscConfig+0x1e>
 8002b6c:	e07c      	b.n	8002c68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4bc3      	ldr	r3, [pc, #780]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2238      	movs	r2, #56	@ 0x38
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4bc0      	ldr	r3, [pc, #768]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3e>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4bb9      	ldr	r3, [pc, #740]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d062      	beq.n	8002c66 <HAL_RCC_OscConfig+0x116>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d15e      	bne.n	8002c66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e2ce      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	025b      	lsls	r3, r3, #9
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x78>
 8002bb8:	4bb0      	ldr	r3, [pc, #704]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4baf      	ldr	r3, [pc, #700]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bbe:	2180      	movs	r1, #128	@ 0x80
 8002bc0:	0249      	lsls	r1, r1, #9
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e020      	b.n	8002c0a <HAL_RCC_OscConfig+0xba>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	23a0      	movs	r3, #160	@ 0xa0
 8002bce:	02db      	lsls	r3, r3, #11
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_RCC_OscConfig+0xa2>
 8002bd4:	4ba9      	ldr	r3, [pc, #676]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4ba8      	ldr	r3, [pc, #672]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bda:	2180      	movs	r1, #128	@ 0x80
 8002bdc:	02c9      	lsls	r1, r1, #11
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	4ba6      	ldr	r3, [pc, #664]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4ba5      	ldr	r3, [pc, #660]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	0249      	lsls	r1, r1, #9
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0xba>
 8002bf2:	4ba2      	ldr	r3, [pc, #648]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4ba1      	ldr	r3, [pc, #644]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002bf8:	49a1      	ldr	r1, [pc, #644]	@ (8002e80 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b9e      	ldr	r3, [pc, #632]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c04:	499f      	ldr	r1, [pc, #636]	@ (8002e84 <HAL_RCC_OscConfig+0x334>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d014      	beq.n	8002c3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe fa97 	bl	8001144 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fa92 	bl	8001144 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e28d      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b93      	ldr	r3, [pc, #588]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	4013      	ands	r3, r2
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xcc>
 8002c3a:	e015      	b.n	8002c68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fa82 	bl	8001144 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c46:	f7fe fa7d 	bl	8001144 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b64      	cmp	r3, #100	@ 0x64
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e278      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c58:	4b88      	ldr	r3, [pc, #544]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0xf6>
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d100      	bne.n	8002c74 <HAL_RCC_OscConfig+0x124>
 8002c72:	e099      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c74:	4b81      	ldr	r3, [pc, #516]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2238      	movs	r2, #56	@ 0x38
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2203      	movs	r2, #3
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d102      	bne.n	8002c94 <HAL_RCC_OscConfig+0x144>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d002      	beq.n	8002c9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d135      	bne.n	8002d06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9a:	4b78      	ldr	r3, [pc, #480]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e24b      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b72      	ldr	r3, [pc, #456]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a74      	ldr	r2, [pc, #464]	@ (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cce:	4b6b      	ldr	r3, [pc, #428]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <HAL_RCC_OscConfig+0x33c>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	4b67      	ldr	r3, [pc, #412]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ce2:	4b66      	ldr	r3, [pc, #408]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0adb      	lsrs	r3, r3, #11
 8002ce8:	2207      	movs	r2, #7
 8002cea:	4013      	ands	r3, r2
 8002cec:	4a68      	ldr	r2, [pc, #416]	@ (8002e90 <HAL_RCC_OscConfig+0x340>)
 8002cee:	40da      	lsrs	r2, r3
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <HAL_RCC_OscConfig+0x344>)
 8002cf2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cf4:	4b68      	ldr	r3, [pc, #416]	@ (8002e98 <HAL_RCC_OscConfig+0x348>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fe f9c7 	bl	800108c <HAL_InitTick>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d051      	beq.n	8002da6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e221      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d030      	beq.n	8002d70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5e      	ldr	r2, [pc, #376]	@ (8002e8c <HAL_RCC_OscConfig+0x33c>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b57      	ldr	r3, [pc, #348]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d22:	4b56      	ldr	r3, [pc, #344]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b55      	ldr	r3, [pc, #340]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	0049      	lsls	r1, r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fa08 	bl	8001144 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fa03 	bl	8001144 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1fe      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b48      	ldr	r3, [pc, #288]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e88 <HAL_RCC_OscConfig+0x338>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	021a      	lsls	r2, r3, #8
 8002d68:	4b44      	ldr	r3, [pc, #272]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e01b      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d70:	4b42      	ldr	r3, [pc, #264]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d76:	4949      	ldr	r1, [pc, #292]	@ (8002e9c <HAL_RCC_OscConfig+0x34c>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f9e2 	bl	8001144 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe f9dd 	bl	8001144 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e1d8      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d98:	4b38      	ldr	r3, [pc, #224]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4013      	ands	r3, r2
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x236>
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	d047      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002db2:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2238      	movs	r2, #56	@ 0x38
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b18      	cmp	r3, #24
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d03c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d138      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e1ba      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ddc:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002dde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002de0:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe f9ac 	bl	8001144 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe f9a7 	bl	8001144 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1a2      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0x2a2>
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f992 	bl	8001144 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe f98d 	bl	8001144 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e188      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e38:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f1      	bne.n	8002e26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2fe>
 8002e4c:	e0c6      	b.n	8002fdc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	231f      	movs	r3, #31
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2238      	movs	r2, #56	@ 0x38
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d11e      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_RCC_OscConfig+0x32c>)
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	2202      	movs	r2, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x31e>
 8002e6c:	e0b6      	b.n	8002fdc <HAL_RCC_OscConfig+0x48c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d000      	beq.n	8002e78 <HAL_RCC_OscConfig+0x328>
 8002e76:	e0b1      	b.n	8002fdc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e166      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	fffeffff 	.word	0xfffeffff
 8002e84:	fffbffff 	.word	0xfffbffff
 8002e88:	ffff80ff 	.word	0xffff80ff
 8002e8c:	ffffc7ff 	.word	0xffffc7ff
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea0:	4bac      	ldr	r3, [pc, #688]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	055b      	lsls	r3, r3, #21
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x360>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x362>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4ba7      	ldr	r3, [pc, #668]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002eb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eba:	4ba6      	ldr	r3, [pc, #664]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ebc:	2180      	movs	r1, #128	@ 0x80
 8002ebe:	0549      	lsls	r1, r1, #21
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec4:	4ba3      	ldr	r3, [pc, #652]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	055b      	lsls	r3, r3, #21
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002ed2:	231f      	movs	r3, #31
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	4b9f      	ldr	r3, [pc, #636]	@ (8003158 <HAL_RCC_OscConfig+0x608>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d11a      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee6:	4b9c      	ldr	r3, [pc, #624]	@ (8003158 <HAL_RCC_OscConfig+0x608>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b9b      	ldr	r3, [pc, #620]	@ (8003158 <HAL_RCC_OscConfig+0x608>)
 8002eec:	2180      	movs	r1, #128	@ 0x80
 8002eee:	0049      	lsls	r1, r1, #1
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f926 	bl	8001144 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fe f921 	bl	8001144 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e11c      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f10:	4b91      	ldr	r3, [pc, #580]	@ (8003158 <HAL_RCC_OscConfig+0x608>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3e2>
 8002f24:	4b8b      	ldr	r3, [pc, #556]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f28:	4b8a      	ldr	r3, [pc, #552]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x404>
 8002f3a:	4b86      	ldr	r3, [pc, #536]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f3e:	4b85      	ldr	r3, [pc, #532]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f40:	2104      	movs	r1, #4
 8002f42:	430a      	orrs	r2, r1
 8002f44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f46:	4b83      	ldr	r3, [pc, #524]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f4a:	4b82      	ldr	r3, [pc, #520]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x41c>
 8002f54:	4b7f      	ldr	r3, [pc, #508]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f58:	4b7e      	ldr	r3, [pc, #504]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f60:	4b7c      	ldr	r3, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002f64:	4b7b      	ldr	r3, [pc, #492]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f66:	2104      	movs	r1, #4
 8002f68:	438a      	bics	r2, r1
 8002f6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d014      	beq.n	8002f9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f8e6 	bl	8001144 <HAL_GetTick>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7c:	e009      	b.n	8002f92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe f8e1 	bl	8001144 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	4a74      	ldr	r2, [pc, #464]	@ (800315c <HAL_RCC_OscConfig+0x60c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0db      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	4b70      	ldr	r3, [pc, #448]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	2202      	movs	r2, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x42e>
 8002f9c:	e013      	b.n	8002fc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe f8d1 	bl	8001144 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa6:	e009      	b.n	8002fbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe f8cc 	bl	8001144 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800315c <HAL_RCC_OscConfig+0x60c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0c6      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fbc:	4b65      	ldr	r3, [pc, #404]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b60      	ldr	r3, [pc, #384]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fd6:	4962      	ldr	r1, [pc, #392]	@ (8003160 <HAL_RCC_OscConfig+0x610>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d100      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x496>
 8002fe4:	e0b0      	b.n	8003148 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2238      	movs	r2, #56	@ 0x38
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d100      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4a4>
 8002ff2:	e078      	b.n	80030e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d153      	bne.n	80030a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b55      	ldr	r3, [pc, #340]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b54      	ldr	r3, [pc, #336]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003002:	4958      	ldr	r1, [pc, #352]	@ (8003164 <HAL_RCC_OscConfig+0x614>)
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe f89c 	bl	8001144 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe f897 	bl	8001144 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e092      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003024:	4b4b      	ldr	r3, [pc, #300]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	@ 0x80
 800302a:	049b      	lsls	r3, r3, #18
 800302c:	4013      	ands	r3, r2
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003030:	4b48      	ldr	r3, [pc, #288]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a4c      	ldr	r2, [pc, #304]	@ (8003168 <HAL_RCC_OscConfig+0x618>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	431a      	orrs	r2, r3
 8003058:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 800305a:	430a      	orrs	r2, r1
 800305c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	4b3d      	ldr	r3, [pc, #244]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b3c      	ldr	r3, [pc, #240]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003064:	2180      	movs	r1, #128	@ 0x80
 8003066:	0449      	lsls	r1, r1, #17
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800306c:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b38      	ldr	r3, [pc, #224]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003072:	2180      	movs	r1, #128	@ 0x80
 8003074:	0549      	lsls	r1, r1, #21
 8003076:	430a      	orrs	r2, r1
 8003078:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe f863 	bl	8001144 <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f85e 	bl	8001144 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e059      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b2f      	ldr	r3, [pc, #188]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	2380      	movs	r3, #128	@ 0x80
 800309c:	049b      	lsls	r3, r3, #18
 800309e:	4013      	ands	r3, r2
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x534>
 80030a2:	e051      	b.n	8003148 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 80030aa:	492e      	ldr	r1, [pc, #184]	@ (8003164 <HAL_RCC_OscConfig+0x614>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe f848 	bl	8001144 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe f843 	bl	8001144 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e03e      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	4b21      	ldr	r3, [pc, #132]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	049b      	lsls	r3, r3, #18
 80030d4:	4013      	ands	r3, r2
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80030d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 80030de:	4923      	ldr	r1, [pc, #140]	@ (800316c <HAL_RCC_OscConfig+0x61c>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e030      	b.n	8003148 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02b      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80030f2:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <HAL_RCC_OscConfig+0x604>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2203      	movs	r2, #3
 80030fc:	401a      	ands	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	429a      	cmp	r2, r3
 8003104:	d11e      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2270      	movs	r2, #112	@ 0x70
 800310a:	401a      	ands	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d117      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	23fe      	movs	r3, #254	@ 0xfe
 8003118:	01db      	lsls	r3, r3, #7
 800311a:	401a      	ands	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d10e      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	23f8      	movs	r3, #248	@ 0xf8
 800312a:	039b      	lsls	r3, r3, #14
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	0f5b      	lsrs	r3, r3, #29
 800313a:	075a      	lsls	r2, r3, #29
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b008      	add	sp, #32
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	00001388 	.word	0x00001388
 8003160:	efffffff 	.word	0xefffffff
 8003164:	feffffff 	.word	0xfeffffff
 8003168:	1fc1808c 	.word	0x1fc1808c
 800316c:	effefffc 	.word	0xeffefffc

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0e9      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2207      	movs	r2, #7
 800318a:	4013      	ands	r3, r2
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d91e      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b73      	ldr	r3, [pc, #460]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2207      	movs	r2, #7
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	4b70      	ldr	r3, [pc, #448]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a4:	f7fd ffce 	bl	8001144 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ac:	e009      	b.n	80031c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fd ffc9 	bl	8001144 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0ca      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c2:	4b67      	ldr	r3, [pc, #412]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2204      	movs	r2, #4
 80031e0:	4013      	ands	r3, r2
 80031e2:	d006      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031e4:	4b60      	ldr	r3, [pc, #384]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031ea:	21e0      	movs	r1, #224	@ 0xe0
 80031ec:	01c9      	lsls	r1, r1, #7
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	@ (800336c <HAL_RCC_ClockConfig+0x1fc>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	4013      	ands	r3, r2
 800320e:	d057      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	029b      	lsls	r3, r3, #10
 8003220:	4013      	ands	r3, r2
 8003222:	d12b      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e097      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003230:	4b4d      	ldr	r3, [pc, #308]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	049b      	lsls	r3, r3, #18
 8003238:	4013      	ands	r3, r2
 800323a:	d11f      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e08b      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	4b47      	ldr	r3, [pc, #284]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4013      	ands	r3, r2
 8003252:	d113      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e07f      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d106      	bne.n	800326e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003260:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	2202      	movs	r2, #2
 8003266:	4013      	ands	r3, r2
 8003268:	d108      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e074      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	4b3e      	ldr	r3, [pc, #248]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e06d      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327c:	4b3a      	ldr	r3, [pc, #232]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2207      	movs	r2, #7
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b37      	ldr	r3, [pc, #220]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fd ff58 	bl	8001144 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003298:	e009      	b.n	80032ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329a:	f7fd ff53 	bl	8001144 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e054      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2238      	movs	r2, #56	@ 0x38
 80032b4:	401a      	ands	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1ec      	bne.n	800329a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2207      	movs	r2, #7
 80032c6:	4013      	ands	r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d21e      	bcs.n	800330c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2207      	movs	r2, #7
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	4b21      	ldr	r3, [pc, #132]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e0:	f7fd ff30 	bl	8001144 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032e8:	e009      	b.n	80032fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ea:	f7fd ff2b 	bl	8001144 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <HAL_RCC_ClockConfig+0x1f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e02c      	b.n	8003358 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032fe:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2207      	movs	r2, #7
 8003304:	4013      	ands	r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d1ee      	bne.n	80032ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2204      	movs	r2, #4
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003316:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <HAL_RCC_ClockConfig+0x200>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800332a:	f000 f829 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 800332e:	0001      	movs	r1, r0
 8003330:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <HAL_RCC_ClockConfig+0x1f8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	220f      	movs	r2, #15
 8003338:	401a      	ands	r2, r3
 800333a:	4b0e      	ldr	r3, [pc, #56]	@ (8003374 <HAL_RCC_ClockConfig+0x204>)
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	58d3      	ldr	r3, [r2, r3]
 8003340:	221f      	movs	r2, #31
 8003342:	4013      	ands	r3, r2
 8003344:	000a      	movs	r2, r1
 8003346:	40da      	lsrs	r2, r3
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x208>)
 800334a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x20c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0018      	movs	r0, r3
 8003352:	f7fd fe9b 	bl	800108c <HAL_InitTick>
 8003356:	0003      	movs	r3, r0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40022000 	.word	0x40022000
 8003364:	00001388 	.word	0x00001388
 8003368:	40021000 	.word	0x40021000
 800336c:	fffff0ff 	.word	0xfffff0ff
 8003370:	ffff8fff 	.word	0xffff8fff
 8003374:	08004eb8 	.word	0x08004eb8
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003386:	4b3c      	ldr	r3, [pc, #240]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2238      	movs	r2, #56	@ 0x38
 800338c:	4013      	ands	r3, r2
 800338e:	d10f      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003390:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0adb      	lsrs	r3, r3, #11
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	2201      	movs	r2, #1
 800339c:	409a      	lsls	r2, r3
 800339e:	0013      	movs	r3, r2
 80033a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	4835      	ldr	r0, [pc, #212]	@ (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 80033a6:	f7fc feb3 	bl	8000110 <__udivsi3>
 80033aa:	0003      	movs	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e05d      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b0:	4b31      	ldr	r3, [pc, #196]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2238      	movs	r2, #56	@ 0x38
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033bc:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x100>)
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e054      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2238      	movs	r2, #56	@ 0x38
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d138      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80033ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2203      	movs	r2, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	2207      	movs	r2, #7
 80033e0:	4013      	ands	r3, r2
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d10d      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4824      	ldr	r0, [pc, #144]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x100>)
 80033f0:	f7fc fe8e 	bl	8000110 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	0019      	movs	r1, r3
 80033f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	227f      	movs	r2, #127	@ 0x7f
 8003400:	4013      	ands	r3, r2
 8003402:	434b      	muls	r3, r1
 8003404:	617b      	str	r3, [r7, #20]
        break;
 8003406:	e00d      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	481c      	ldr	r0, [pc, #112]	@ (800347c <HAL_RCC_GetSysClockFreq+0xfc>)
 800340c:	f7fc fe80 	bl	8000110 <__udivsi3>
 8003410:	0003      	movs	r3, r0
 8003412:	0019      	movs	r1, r3
 8003414:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	227f      	movs	r2, #127	@ 0x7f
 800341c:	4013      	ands	r3, r2
 800341e:	434b      	muls	r3, r1
 8003420:	617b      	str	r3, [r7, #20]
        break;
 8003422:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003424:	4b14      	ldr	r3, [pc, #80]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0f5b      	lsrs	r3, r3, #29
 800342a:	2207      	movs	r2, #7
 800342c:	4013      	ands	r3, r2
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f7fc fe6b 	bl	8000110 <__udivsi3>
 800343a:	0003      	movs	r3, r0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e015      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003440:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2238      	movs	r2, #56	@ 0x38
 8003446:	4013      	ands	r3, r2
 8003448:	2b20      	cmp	r3, #32
 800344a:	d103      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e00b      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2238      	movs	r2, #56	@ 0x38
 800345a:	4013      	ands	r3, r2
 800345c:	2b18      	cmp	r3, #24
 800345e:	d103      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003460:	23fa      	movs	r3, #250	@ 0xfa
 8003462:	01db      	lsls	r3, r3, #7
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e001      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800346c:	693b      	ldr	r3, [r7, #16]
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b006      	add	sp, #24
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	40021000 	.word	0x40021000
 800347c:	00f42400 	.word	0x00f42400
 8003480:	007a1200 	.word	0x007a1200

08003484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b02      	ldr	r3, [pc, #8]	@ (8003494 <HAL_RCC_GetHCLKFreq+0x10>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800349c:	f7ff fff2 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034a0:	0004      	movs	r4, r0
 80034a2:	f7ff fb49 	bl	8002b38 <LL_RCC_GetAPB1Prescaler>
 80034a6:	0003      	movs	r3, r0
 80034a8:	0b1a      	lsrs	r2, r3, #12
 80034aa:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	58d3      	ldr	r3, [r2, r3]
 80034b0:	221f      	movs	r2, #31
 80034b2:	4013      	ands	r3, r2
 80034b4:	40dc      	lsrs	r4, r3
 80034b6:	0023      	movs	r3, r4
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	08004ef8 	.word	0x08004ef8

080034c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0a8      	b.n	8003628 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	2382      	movs	r3, #130	@ 0x82
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d009      	beq.n	80034fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	61da      	str	r2, [r3, #28]
 80034f0:	e005      	b.n	80034fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	225d      	movs	r2, #93	@ 0x5d
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	225c      	movs	r2, #92	@ 0x5c
 8003514:	2100      	movs	r1, #0
 8003516:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f7fd fc00 	bl	8000d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	225d      	movs	r2, #93	@ 0x5d
 8003524:	2102      	movs	r1, #2
 8003526:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2140      	movs	r1, #64	@ 0x40
 8003534:	438a      	bics	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	23e0      	movs	r3, #224	@ 0xe0
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e002      	b.n	8003550 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	015b      	lsls	r3, r3, #5
 800354e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	23f0      	movs	r3, #240	@ 0xf0
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	429a      	cmp	r2, r3
 800355a:	d008      	beq.n	800356e <HAL_SPI_Init+0xaa>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	23e0      	movs	r3, #224	@ 0xe0
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	429a      	cmp	r2, r3
 8003566:	d002      	beq.n	800356e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	2382      	movs	r3, #130	@ 0x82
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	2384      	movs	r3, #132	@ 0x84
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	400b      	ands	r3, r1
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2102      	movs	r1, #2
 800358a:	400b      	ands	r3, r1
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2101      	movs	r1, #1
 8003594:	400b      	ands	r3, r1
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6999      	ldr	r1, [r3, #24]
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	400b      	ands	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	2138      	movs	r1, #56	@ 0x38
 80035aa:	400b      	ands	r3, r1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	2180      	movs	r1, #128	@ 0x80
 80035b4:	400b      	ands	r3, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	0011      	movs	r1, r2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	401a      	ands	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	2204      	movs	r2, #4
 80035d4:	401a      	ands	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	2110      	movs	r1, #16
 80035dc:	400b      	ands	r3, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	2108      	movs	r1, #8
 80035e6:	400b      	ands	r3, r1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68d9      	ldr	r1, [r3, #12]
 80035ee:	23f0      	movs	r3, #240	@ 0xf0
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	400b      	ands	r3, r1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	0011      	movs	r1, r2
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	015b      	lsls	r3, r3, #5
 80035fe:	401a      	ands	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4907      	ldr	r1, [pc, #28]	@ (8003630 <HAL_SPI_Init+0x16c>)
 8003614:	400a      	ands	r2, r1
 8003616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	225d      	movs	r2, #93	@ 0x5d
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b004      	add	sp, #16
 800362e:	bd80      	pop	{r7, pc}
 8003630:	fffff7ff 	.word	0xfffff7ff

08003634 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e090      	b.n	800376a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	223d      	movs	r2, #61	@ 0x3d
 800364c:	5c9b      	ldrb	r3, [r3, r2]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d107      	bne.n	8003664 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	223c      	movs	r2, #60	@ 0x3c
 8003658:	2100      	movs	r1, #0
 800365a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f7fd fbc0 	bl	8000de4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	223d      	movs	r2, #61	@ 0x3d
 8003668:	2102      	movs	r1, #2
 800366a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	493f      	ldr	r1, [pc, #252]	@ (8003774 <HAL_TIM_Encoder_Init+0x140>)
 8003678:	400a      	ands	r2, r1
 800367a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	0019      	movs	r1, r3
 8003686:	0010      	movs	r0, r2
 8003688:	f000 f9ac 	bl	80039e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4a31      	ldr	r2, [pc, #196]	@ (8003778 <HAL_TIM_Encoder_Init+0x144>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4313      	orrs	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <HAL_TIM_Encoder_Init+0x148>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003780 <HAL_TIM_Encoder_Init+0x14c>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	4313      	orrs	r3, r2
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	011a      	lsls	r2, r3, #4
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	4313      	orrs	r3, r2
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2222      	movs	r2, #34	@ 0x22
 8003702:	4393      	bics	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2288      	movs	r2, #136	@ 0x88
 800370a:	4393      	bics	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	4313      	orrs	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2248      	movs	r2, #72	@ 0x48
 800373c:	2101      	movs	r1, #1
 800373e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	223e      	movs	r2, #62	@ 0x3e
 8003744:	2101      	movs	r1, #1
 8003746:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	223f      	movs	r2, #63	@ 0x3f
 800374c:	2101      	movs	r1, #1
 800374e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2244      	movs	r2, #68	@ 0x44
 8003754:	2101      	movs	r1, #1
 8003756:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2245      	movs	r2, #69	@ 0x45
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	223d      	movs	r2, #61	@ 0x3d
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b006      	add	sp, #24
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	fffebff8 	.word	0xfffebff8
 8003778:	fffffcfc 	.word	0xfffffcfc
 800377c:	fffff3f3 	.word	0xfffff3f3
 8003780:	ffff0f0f 	.word	0xffff0f0f

08003784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2202      	movs	r2, #2
 80037a0:	4013      	ands	r3, r2
 80037a2:	d021      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2202      	movs	r2, #2
 80037a8:	4013      	ands	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2203      	movs	r2, #3
 80037b2:	4252      	negs	r2, r2
 80037b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2203      	movs	r2, #3
 80037c4:	4013      	ands	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f8f2 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e007      	b.n	80037e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 f8e5 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 f8f1 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2204      	movs	r2, #4
 80037f4:	4013      	ands	r3, r2
 80037f6:	d01e      	beq.n	8003836 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2205      	movs	r2, #5
 80037fe:	4252      	negs	r2, r2
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	23c0      	movs	r3, #192	@ 0xc0
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f8cb 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800381e:	e007      	b.n	8003830 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f8be 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f8ca 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2208      	movs	r2, #8
 800383a:	4013      	ands	r3, r2
 800383c:	d021      	beq.n	8003882 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2208      	movs	r2, #8
 8003842:	4013      	ands	r3, r2
 8003844:	d01d      	beq.n	8003882 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2209      	movs	r2, #9
 800384c:	4252      	negs	r2, r2
 800384e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2204      	movs	r2, #4
 8003854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	2203      	movs	r2, #3
 800385e:	4013      	ands	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f000 f8a5 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800386a:	e007      	b.n	800387c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f898 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f8a4 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2210      	movs	r2, #16
 8003886:	4013      	ands	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2210      	movs	r2, #16
 800388e:	4013      	ands	r3, r2
 8003890:	d01e      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2211      	movs	r2, #17
 8003898:	4252      	negs	r2, r2
 800389a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2208      	movs	r2, #8
 80038a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	23c0      	movs	r3, #192	@ 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 f87e 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 80038b8:	e007      	b.n	80038ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 f871 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f87d 	bl	80039c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00c      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	d008      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2202      	movs	r2, #2
 80038e6:	4252      	negs	r2, r2
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f851 	bl	8003994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	4013      	ands	r3, r2
 80038f8:	d104      	bne.n	8003904 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	019b      	lsls	r3, r3, #6
 8003900:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003902:	d00b      	beq.n	800391c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2280      	movs	r2, #128	@ 0x80
 8003908:	4013      	ands	r3, r2
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1e      	ldr	r2, [pc, #120]	@ (800398c <HAL_TIM_IRQHandler+0x208>)
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	0018      	movs	r0, r3
 8003918:	f000 f958 	bl	8003bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4013      	ands	r3, r2
 8003924:	d00b      	beq.n	800393e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	4013      	ands	r3, r2
 800392c:	d007      	beq.n	800393e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a17      	ldr	r2, [pc, #92]	@ (8003990 <HAL_TIM_IRQHandler+0x20c>)
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f94f 	bl	8003bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	4013      	ands	r3, r2
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2240      	movs	r2, #64	@ 0x40
 800394a:	4013      	ands	r3, r2
 800394c:	d008      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2241      	movs	r2, #65	@ 0x41
 8003954:	4252      	negs	r2, r2
 8003956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f83a 	bl	80039d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	d00c      	beq.n	8003982 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	4013      	ands	r3, r2
 800396e:	d008      	beq.n	8003982 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2221      	movs	r2, #33	@ 0x21
 8003976:	4252      	negs	r2, r2
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f000 f91d 	bl	8003bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b004      	add	sp, #16
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	ffffdf7f 	.word	0xffffdf7f
 8003990:	fffffeff 	.word	0xfffffeff

08003994 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800399c:	46c0      	nop			@ (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a36      	ldr	r2, [pc, #216]	@ (8003ad0 <TIM_Base_SetConfig+0xec>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0x20>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a35      	ldr	r2, [pc, #212]	@ (8003ad4 <TIM_Base_SetConfig+0xf0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2270      	movs	r2, #112	@ 0x70
 8003a08:	4393      	bics	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <TIM_Base_SetConfig+0xec>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad4 <TIM_Base_SetConfig+0xf0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00f      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad8 <TIM_Base_SetConfig+0xf4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	@ (8003adc <TIM_Base_SetConfig+0xf8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a29      	ldr	r2, [pc, #164]	@ (8003ae0 <TIM_Base_SetConfig+0xfc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_Base_SetConfig+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a28      	ldr	r2, [pc, #160]	@ (8003ae4 <TIM_Base_SetConfig+0x100>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d108      	bne.n	8003a58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a27      	ldr	r2, [pc, #156]	@ (8003ae8 <TIM_Base_SetConfig+0x104>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2280      	movs	r2, #128	@ 0x80
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	001a      	movs	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a13      	ldr	r2, [pc, #76]	@ (8003ad0 <TIM_Base_SetConfig+0xec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0xba>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	@ (8003adc <TIM_Base_SetConfig+0xf8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0xba>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <TIM_Base_SetConfig+0xfc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0xba>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <TIM_Base_SetConfig+0x100>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d103      	bne.n	8003aa6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2201      	movs	r2, #1
 8003abe:	4393      	bics	r3, r2
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]
  }
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40002000 	.word	0x40002000
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800
 8003ae8:	fffffcff 	.word	0xfffffcff

08003aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223c      	movs	r2, #60	@ 0x3c
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e04f      	b.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	223c      	movs	r2, #60	@ 0x3c
 8003b08:	2101      	movs	r1, #1
 8003b0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	223d      	movs	r2, #61	@ 0x3d
 8003b10:	2102      	movs	r1, #2
 8003b12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2270      	movs	r2, #112	@ 0x70
 8003b44:	4393      	bics	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a11      	ldr	r2, [pc, #68]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10c      	bne.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2280      	movs	r2, #128	@ 0x80
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	223d      	movs	r2, #61	@ 0x3d
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	223c      	movs	r2, #60	@ 0x3c
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	ff0fffff 	.word	0xff0fffff
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40014000 	.word	0x40014000

08003bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e046      	b.n	8003c8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2288      	movs	r2, #136	@ 0x88
 8003c02:	589b      	ldr	r3, [r3, r2]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2284      	movs	r2, #132	@ 0x84
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fd f938 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2288      	movs	r2, #136	@ 0x88
 8003c1c:	2124      	movs	r1, #36	@ 0x24
 8003c1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fa3a 	bl	80040b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f8cc 	bl	8003de0 <UART_SetConfig>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e01c      	b.n	8003c8c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	490d      	ldr	r1, [pc, #52]	@ (8003c94 <HAL_UART_Init+0xa8>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	212a      	movs	r1, #42	@ 0x2a
 8003c6e:	438a      	bics	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 fac9 	bl	800421c <UART_CheckIdleState>
 8003c8a:	0003      	movs	r3, r0
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	ffffb7ff 	.word	0xffffb7ff

08003c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	@ 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	1dbb      	adds	r3, r7, #6
 8003ca6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2288      	movs	r2, #136	@ 0x88
 8003cac:	589b      	ldr	r3, [r3, r2]
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d000      	beq.n	8003cb4 <HAL_UART_Transmit+0x1c>
 8003cb2:	e090      	b.n	8003dd6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_UART_Transmit+0x2a>
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e088      	b.n	8003dd8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	2380      	movs	r3, #128	@ 0x80
 8003ccc:	015b      	lsls	r3, r3, #5
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d109      	bne.n	8003ce6 <HAL_UART_Transmit+0x4e>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d105      	bne.n	8003ce6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e078      	b.n	8003dd8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2290      	movs	r2, #144	@ 0x90
 8003cea:	2100      	movs	r1, #0
 8003cec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2288      	movs	r2, #136	@ 0x88
 8003cf2:	2121      	movs	r1, #33	@ 0x21
 8003cf4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fa25 	bl	8001144 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1dba      	adds	r2, r7, #6
 8003d02:	2154      	movs	r1, #84	@ 0x54
 8003d04:	8812      	ldrh	r2, [r2, #0]
 8003d06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1dba      	adds	r2, r7, #6
 8003d0c:	2156      	movs	r1, #86	@ 0x56
 8003d0e:	8812      	ldrh	r2, [r2, #0]
 8003d10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	2380      	movs	r3, #128	@ 0x80
 8003d18:	015b      	lsls	r3, r3, #5
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x98>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e030      	b.n	8003d9c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	0013      	movs	r3, r2
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	f000 fb12 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2288      	movs	r2, #136	@ 0x88
 8003d54:	2120      	movs	r1, #32
 8003d56:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e03d      	b.n	8003dd8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	001a      	movs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	05d2      	lsls	r2, r2, #23
 8003d6e:	0dd2      	lsrs	r2, r2, #23
 8003d70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3302      	adds	r3, #2
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	e007      	b.n	8003d8a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2256      	movs	r2, #86	@ 0x56
 8003d8e:	5a9b      	ldrh	r3, [r3, r2]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b299      	uxth	r1, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2256      	movs	r2, #86	@ 0x56
 8003d9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2256      	movs	r2, #86	@ 0x56
 8003da0:	5a9b      	ldrh	r3, [r3, r2]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1c8      	bne.n	8003d3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	0013      	movs	r3, r2
 8003db2:	2200      	movs	r2, #0
 8003db4:	2140      	movs	r1, #64	@ 0x40
 8003db6:	f000 fadb 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2288      	movs	r2, #136	@ 0x88
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e006      	b.n	8003dd8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2288      	movs	r2, #136	@ 0x88
 8003dce:	2120      	movs	r1, #32
 8003dd0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b008      	add	sp, #32
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de8:	231a      	movs	r3, #26
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4aa1      	ldr	r2, [pc, #644]	@ (8004094 <UART_SetConfig+0x2b4>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	0019      	movs	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a9c      	ldr	r2, [pc, #624]	@ (8004098 <UART_SetConfig+0x2b8>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a93      	ldr	r2, [pc, #588]	@ (800409c <UART_SetConfig+0x2bc>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	220f      	movs	r2, #15
 8003e64:	4393      	bics	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a89      	ldr	r2, [pc, #548]	@ (80040a0 <UART_SetConfig+0x2c0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d127      	bne.n	8003ece <UART_SetConfig+0xee>
 8003e7e:	4b89      	ldr	r3, [pc, #548]	@ (80040a4 <UART_SetConfig+0x2c4>)
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	2203      	movs	r2, #3
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d017      	beq.n	8003eba <UART_SetConfig+0xda>
 8003e8a:	d81b      	bhi.n	8003ec4 <UART_SetConfig+0xe4>
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d00a      	beq.n	8003ea6 <UART_SetConfig+0xc6>
 8003e90:	d818      	bhi.n	8003ec4 <UART_SetConfig+0xe4>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <UART_SetConfig+0xbc>
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d00a      	beq.n	8003eb0 <UART_SetConfig+0xd0>
 8003e9a:	e013      	b.n	8003ec4 <UART_SetConfig+0xe4>
 8003e9c:	231b      	movs	r3, #27
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e021      	b.n	8003eea <UART_SetConfig+0x10a>
 8003ea6:	231b      	movs	r3, #27
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e01c      	b.n	8003eea <UART_SetConfig+0x10a>
 8003eb0:	231b      	movs	r3, #27
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e017      	b.n	8003eea <UART_SetConfig+0x10a>
 8003eba:	231b      	movs	r3, #27
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e012      	b.n	8003eea <UART_SetConfig+0x10a>
 8003ec4:	231b      	movs	r3, #27
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	2210      	movs	r2, #16
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e00d      	b.n	8003eea <UART_SetConfig+0x10a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a75      	ldr	r2, [pc, #468]	@ (80040a8 <UART_SetConfig+0x2c8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d104      	bne.n	8003ee2 <UART_SetConfig+0x102>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e003      	b.n	8003eea <UART_SetConfig+0x10a>
 8003ee2:	231b      	movs	r3, #27
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d000      	beq.n	8003ef8 <UART_SetConfig+0x118>
 8003ef6:	e065      	b.n	8003fc4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003ef8:	231b      	movs	r3, #27
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d015      	beq.n	8003f2e <UART_SetConfig+0x14e>
 8003f02:	dc18      	bgt.n	8003f36 <UART_SetConfig+0x156>
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d00d      	beq.n	8003f24 <UART_SetConfig+0x144>
 8003f08:	dc15      	bgt.n	8003f36 <UART_SetConfig+0x156>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <UART_SetConfig+0x134>
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d005      	beq.n	8003f1e <UART_SetConfig+0x13e>
 8003f12:	e010      	b.n	8003f36 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7ff fac0 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	617b      	str	r3, [r7, #20]
        break;
 8003f1c:	e012      	b.n	8003f44 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1e:	4b63      	ldr	r3, [pc, #396]	@ (80040ac <UART_SetConfig+0x2cc>)
 8003f20:	617b      	str	r3, [r7, #20]
        break;
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f24:	f7ff fa2c 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	617b      	str	r3, [r7, #20]
        break;
 8003f2c:	e00a      	b.n	8003f44 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e006      	b.n	8003f44 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f3a:	231a      	movs	r3, #26
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
        break;
 8003f42:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d100      	bne.n	8003f4c <UART_SetConfig+0x16c>
 8003f4a:	e08d      	b.n	8004068 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f50:	4b57      	ldr	r3, [pc, #348]	@ (80040b0 <UART_SetConfig+0x2d0>)
 8003f52:	0052      	lsls	r2, r2, #1
 8003f54:	5ad3      	ldrh	r3, [r2, r3]
 8003f56:	0019      	movs	r1, r3
 8003f58:	6978      	ldr	r0, [r7, #20]
 8003f5a:	f7fc f8d9 	bl	8000110 <__udivsi3>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	005a      	lsls	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	18d2      	adds	r2, r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	0019      	movs	r1, r3
 8003f70:	0010      	movs	r0, r2
 8003f72:	f7fc f8cd 	bl	8000110 <__udivsi3>
 8003f76:	0003      	movs	r3, r0
 8003f78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b0f      	cmp	r3, #15
 8003f7e:	d91c      	bls.n	8003fba <UART_SetConfig+0x1da>
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	2380      	movs	r3, #128	@ 0x80
 8003f84:	025b      	lsls	r3, r3, #9
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d217      	bcs.n	8003fba <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	200e      	movs	r0, #14
 8003f90:	183b      	adds	r3, r7, r0
 8003f92:	210f      	movs	r1, #15
 8003f94:	438a      	bics	r2, r1
 8003f96:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	183b      	adds	r3, r7, r0
 8003fa6:	183a      	adds	r2, r7, r0
 8003fa8:	8812      	ldrh	r2, [r2, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	183a      	adds	r2, r7, r0
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	e056      	b.n	8004068 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003fba:	231a      	movs	r3, #26
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e051      	b.n	8004068 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc4:	231b      	movs	r3, #27
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d015      	beq.n	8003ffa <UART_SetConfig+0x21a>
 8003fce:	dc18      	bgt.n	8004002 <UART_SetConfig+0x222>
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d00d      	beq.n	8003ff0 <UART_SetConfig+0x210>
 8003fd4:	dc15      	bgt.n	8004002 <UART_SetConfig+0x222>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <UART_SetConfig+0x200>
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d005      	beq.n	8003fea <UART_SetConfig+0x20a>
 8003fde:	e010      	b.n	8004002 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7ff fa5a 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	617b      	str	r3, [r7, #20]
        break;
 8003fe8:	e012      	b.n	8004010 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fea:	4b30      	ldr	r3, [pc, #192]	@ (80040ac <UART_SetConfig+0x2cc>)
 8003fec:	617b      	str	r3, [r7, #20]
        break;
 8003fee:	e00f      	b.n	8004010 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff0:	f7ff f9c6 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	617b      	str	r3, [r7, #20]
        break;
 8003ff8:	e00a      	b.n	8004010 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	617b      	str	r3, [r7, #20]
        break;
 8004000:	e006      	b.n	8004010 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004006:	231a      	movs	r3, #26
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
        break;
 800400e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d028      	beq.n	8004068 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800401a:	4b25      	ldr	r3, [pc, #148]	@ (80040b0 <UART_SetConfig+0x2d0>)
 800401c:	0052      	lsls	r2, r2, #1
 800401e:	5ad3      	ldrh	r3, [r2, r3]
 8004020:	0019      	movs	r1, r3
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7fc f874 	bl	8000110 <__udivsi3>
 8004028:	0003      	movs	r3, r0
 800402a:	001a      	movs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	085b      	lsrs	r3, r3, #1
 8004032:	18d2      	adds	r2, r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0019      	movs	r1, r3
 800403a:	0010      	movs	r0, r2
 800403c:	f7fc f868 	bl	8000110 <__udivsi3>
 8004040:	0003      	movs	r3, r0
 8004042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d90a      	bls.n	8004060 <UART_SetConfig+0x280>
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	025b      	lsls	r3, r3, #9
 8004050:	429a      	cmp	r2, r3
 8004052:	d205      	bcs.n	8004060 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e003      	b.n	8004068 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004060:	231a      	movs	r3, #26
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	226a      	movs	r2, #106	@ 0x6a
 800406c:	2101      	movs	r1, #1
 800406e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2268      	movs	r2, #104	@ 0x68
 8004074:	2101      	movs	r1, #1
 8004076:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004084:	231a      	movs	r3, #26
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	781b      	ldrb	r3, [r3, #0]
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b008      	add	sp, #32
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	cfff69f3 	.word	0xcfff69f3
 8004098:	ffffcfff 	.word	0xffffcfff
 800409c:	11fff4ff 	.word	0x11fff4ff
 80040a0:	40013800 	.word	0x40013800
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40004400 	.word	0x40004400
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	08004f18 	.word	0x08004f18

080040b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	2208      	movs	r2, #8
 80040c2:	4013      	ands	r3, r2
 80040c4:	d00b      	beq.n	80040de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a4a      	ldr	r2, [pc, #296]	@ (80041f8 <UART_AdvFeatureConfig+0x144>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e2:	2201      	movs	r2, #1
 80040e4:	4013      	ands	r3, r2
 80040e6:	d00b      	beq.n	8004100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4a43      	ldr	r2, [pc, #268]	@ (80041fc <UART_AdvFeatureConfig+0x148>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	0019      	movs	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	2202      	movs	r2, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d00b      	beq.n	8004122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a3b      	ldr	r2, [pc, #236]	@ (8004200 <UART_AdvFeatureConfig+0x14c>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004126:	2204      	movs	r2, #4
 8004128:	4013      	ands	r3, r2
 800412a:	d00b      	beq.n	8004144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a34      	ldr	r2, [pc, #208]	@ (8004204 <UART_AdvFeatureConfig+0x150>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	2210      	movs	r2, #16
 800414a:	4013      	ands	r3, r2
 800414c:	d00b      	beq.n	8004166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a2c      	ldr	r2, [pc, #176]	@ (8004208 <UART_AdvFeatureConfig+0x154>)
 8004156:	4013      	ands	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416a:	2220      	movs	r2, #32
 800416c:	4013      	ands	r3, r2
 800416e:	d00b      	beq.n	8004188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4a25      	ldr	r2, [pc, #148]	@ (800420c <UART_AdvFeatureConfig+0x158>)
 8004178:	4013      	ands	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	4013      	ands	r3, r2
 8004190:	d01d      	beq.n	80041ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <UART_AdvFeatureConfig+0x15c>)
 800419a:	4013      	ands	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	035b      	lsls	r3, r3, #13
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d10b      	bne.n	80041ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a15      	ldr	r2, [pc, #84]	@ (8004214 <UART_AdvFeatureConfig+0x160>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	2280      	movs	r2, #128	@ 0x80
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a0e      	ldr	r2, [pc, #56]	@ (8004218 <UART_AdvFeatureConfig+0x164>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }
}
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	ffff7fff 	.word	0xffff7fff
 80041fc:	fffdffff 	.word	0xfffdffff
 8004200:	fffeffff 	.word	0xfffeffff
 8004204:	fffbffff 	.word	0xfffbffff
 8004208:	ffffefff 	.word	0xffffefff
 800420c:	ffffdfff 	.word	0xffffdfff
 8004210:	ffefffff 	.word	0xffefffff
 8004214:	ff9fffff 	.word	0xff9fffff
 8004218:	fff7ffff 	.word	0xfff7ffff

0800421c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b092      	sub	sp, #72	@ 0x48
 8004220:	af02      	add	r7, sp, #8
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2290      	movs	r2, #144	@ 0x90
 8004228:	2100      	movs	r1, #0
 800422a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800422c:	f7fc ff8a 	bl	8001144 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2208      	movs	r2, #8
 800423c:	4013      	ands	r3, r2
 800423e:	2b08      	cmp	r3, #8
 8004240:	d12d      	bne.n	800429e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004244:	2280      	movs	r2, #128	@ 0x80
 8004246:	0391      	lsls	r1, r2, #14
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4a47      	ldr	r2, [pc, #284]	@ (8004368 <UART_CheckIdleState+0x14c>)
 800424c:	9200      	str	r2, [sp, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	f000 f88e 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8004254:	1e03      	subs	r3, r0, #0
 8004256:	d022      	beq.n	800429e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004258:	f3ef 8310 	mrs	r3, PRIMASK
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004262:	2301      	movs	r3, #1
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	46c0      	nop			@ (mov r8, r8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2180      	movs	r1, #128	@ 0x80
 800427a:	438a      	bics	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2288      	movs	r2, #136	@ 0x88
 800428e:	2120      	movs	r1, #32
 8004290:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2284      	movs	r2, #132	@ 0x84
 8004296:	2100      	movs	r1, #0
 8004298:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e060      	b.n	8004360 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2204      	movs	r2, #4
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d146      	bne.n	800433a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	03d1      	lsls	r1, r2, #15
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <UART_CheckIdleState+0x14c>)
 80042b6:	9200      	str	r2, [sp, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f000 f859 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d03b      	beq.n	800433a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c2:	f3ef 8310 	mrs	r3, PRIMASK
 80042c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80042c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80042cc:	2301      	movs	r3, #1
 80042ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f383 8810 	msr	PRIMASK, r3
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4922      	ldr	r1, [pc, #136]	@ (800436c <UART_CheckIdleState+0x150>)
 80042e4:	400a      	ands	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f383 8810 	msr	PRIMASK, r3
}
 80042f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f4:	f3ef 8310 	mrs	r3, PRIMASK
 80042f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80042fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fe:	2301      	movs	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f383 8810 	msr	PRIMASK, r3
}
 8004308:	46c0      	nop			@ (mov r8, r8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	438a      	bics	r2, r1
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	228c      	movs	r2, #140	@ 0x8c
 800432a:	2120      	movs	r1, #32
 800432c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2284      	movs	r2, #132	@ 0x84
 8004332:	2100      	movs	r1, #0
 8004334:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e012      	b.n	8004360 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2288      	movs	r2, #136	@ 0x88
 800433e:	2120      	movs	r1, #32
 8004340:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	228c      	movs	r2, #140	@ 0x8c
 8004346:	2120      	movs	r1, #32
 8004348:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2284      	movs	r2, #132	@ 0x84
 800435a:	2100      	movs	r1, #0
 800435c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b010      	add	sp, #64	@ 0x40
 8004366:	bd80      	pop	{r7, pc}
 8004368:	01ffffff 	.word	0x01ffffff
 800436c:	fffffedf 	.word	0xfffffedf

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	1dfb      	adds	r3, r7, #7
 800437e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e051      	b.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3301      	adds	r3, #1
 8004386:	d04e      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004388:	f7fc fedc 	bl	8001144 <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e051      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2204      	movs	r2, #4
 80043aa:	4013      	ands	r3, r2
 80043ac:	d03b      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b80      	cmp	r3, #128	@ 0x80
 80043b2:	d038      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b40      	cmp	r3, #64	@ 0x40
 80043b8:	d035      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2208      	movs	r2, #8
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d111      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2208      	movs	r2, #8
 80043ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	0018      	movs	r0, r3
 80043d4:	f000 f83c 	bl	8004450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2290      	movs	r2, #144	@ 0x90
 80043dc:	2108      	movs	r1, #8
 80043de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2284      	movs	r2, #132	@ 0x84
 80043e4:	2100      	movs	r1, #0
 80043e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e02c      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	401a      	ands	r2, r3
 80043f8:	2380      	movs	r3, #128	@ 0x80
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d112      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	0018      	movs	r0, r3
 800440e:	f000 f81f 	bl	8004450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2290      	movs	r2, #144	@ 0x90
 8004416:	2120      	movs	r1, #32
 8004418:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2284      	movs	r2, #132	@ 0x84
 800441e:	2100      	movs	r1, #0
 8004420:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	425a      	negs	r2, r3
 8004436:	4153      	adcs	r3, r2
 8004438:	b2db      	uxtb	r3, r3
 800443a:	001a      	movs	r2, r3
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d09e      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	@ 0x38
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004458:	f3ef 8310 	mrs	r3, PRIMASK
 800445c:	617b      	str	r3, [r7, #20]
  return(result);
 800445e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004460:	637b      	str	r3, [r7, #52]	@ 0x34
 8004462:	2301      	movs	r3, #1
 8004464:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4926      	ldr	r1, [pc, #152]	@ (8004514 <UART_EndRxTransfer+0xc4>)
 800447a:	400a      	ands	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448a:	f3ef 8310 	mrs	r3, PRIMASK
 800448e:	623b      	str	r3, [r7, #32]
  return(result);
 8004490:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004492:	633b      	str	r3, [r7, #48]	@ 0x30
 8004494:	2301      	movs	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	491b      	ldr	r1, [pc, #108]	@ (8004518 <UART_EndRxTransfer+0xc8>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d118      	bne.n	80044f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c4:	f3ef 8310 	mrs	r3, PRIMASK
 80044c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ce:	2301      	movs	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f383 8810 	msr	PRIMASK, r3
}
 80044d8:	46c0      	nop			@ (mov r8, r8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2110      	movs	r1, #16
 80044e6:	438a      	bics	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f383 8810 	msr	PRIMASK, r3
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	228c      	movs	r2, #140	@ 0x8c
 80044fa:	2120      	movs	r1, #32
 80044fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	b00e      	add	sp, #56	@ 0x38
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	fffffedf 	.word	0xfffffedf
 8004518:	effffffe 	.word	0xeffffffe

0800451c <sniprintf>:
 800451c:	b40c      	push	{r2, r3}
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	4b17      	ldr	r3, [pc, #92]	@ (8004580 <sniprintf+0x64>)
 8004522:	000c      	movs	r4, r1
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	b09d      	sub	sp, #116	@ 0x74
 8004528:	2900      	cmp	r1, #0
 800452a:	da08      	bge.n	800453e <sniprintf+0x22>
 800452c:	238b      	movs	r3, #139	@ 0x8b
 800452e:	2001      	movs	r0, #1
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	4240      	negs	r0, r0
 8004534:	b01d      	add	sp, #116	@ 0x74
 8004536:	bc30      	pop	{r4, r5}
 8004538:	bc08      	pop	{r3}
 800453a:	b002      	add	sp, #8
 800453c:	4718      	bx	r3
 800453e:	2382      	movs	r3, #130	@ 0x82
 8004540:	466a      	mov	r2, sp
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	8293      	strh	r3, [r2, #20]
 8004546:	2300      	movs	r3, #0
 8004548:	9002      	str	r0, [sp, #8]
 800454a:	9006      	str	r0, [sp, #24]
 800454c:	4299      	cmp	r1, r3
 800454e:	d000      	beq.n	8004552 <sniprintf+0x36>
 8004550:	1e4b      	subs	r3, r1, #1
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	9307      	str	r3, [sp, #28]
 8004556:	2301      	movs	r3, #1
 8004558:	466a      	mov	r2, sp
 800455a:	425b      	negs	r3, r3
 800455c:	82d3      	strh	r3, [r2, #22]
 800455e:	0028      	movs	r0, r5
 8004560:	ab21      	add	r3, sp, #132	@ 0x84
 8004562:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004564:	a902      	add	r1, sp, #8
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	f000 f99c 	bl	80048a4 <_svfiprintf_r>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	da01      	bge.n	8004574 <sniprintf+0x58>
 8004570:	238b      	movs	r3, #139	@ 0x8b
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	2c00      	cmp	r4, #0
 8004576:	d0dd      	beq.n	8004534 <sniprintf+0x18>
 8004578:	2200      	movs	r2, #0
 800457a:	9b02      	ldr	r3, [sp, #8]
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e7d9      	b.n	8004534 <sniprintf+0x18>
 8004580:	2000000c 	.word	0x2000000c

08004584 <memset>:
 8004584:	0003      	movs	r3, r0
 8004586:	1882      	adds	r2, r0, r2
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	7019      	strb	r1, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	@ (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	2000000c 	.word	0x2000000c

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4c0c      	ldr	r4, [pc, #48]	@ (80045d8 <__libc_init_array+0x38>)
 80045a6:	4d0d      	ldr	r5, [pc, #52]	@ (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	2600      	movs	r6, #0
 80045b2:	f000 fc65 	bl	8004e80 <_init>
 80045b6:	4c0a      	ldr	r4, [pc, #40]	@ (80045e0 <__libc_init_array+0x40>)
 80045b8:	4d0a      	ldr	r5, [pc, #40]	@ (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	00b3      	lsls	r3, r6, #2
 80045c6:	58eb      	ldr	r3, [r5, r3]
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	00b3      	lsls	r3, r6, #2
 80045d0:	58eb      	ldr	r3, [r5, r3]
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08004f64 	.word	0x08004f64
 80045dc:	08004f64 	.word	0x08004f64
 80045e0:	08004f68 	.word	0x08004f68
 80045e4:	08004f64 	.word	0x08004f64

080045e8 <__retarget_lock_acquire_recursive>:
 80045e8:	4770      	bx	lr

080045ea <__retarget_lock_release_recursive>:
 80045ea:	4770      	bx	lr

080045ec <_free_r>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	0005      	movs	r5, r0
 80045f0:	1e0c      	subs	r4, r1, #0
 80045f2:	d010      	beq.n	8004616 <_free_r+0x2a>
 80045f4:	3c04      	subs	r4, #4
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da00      	bge.n	80045fe <_free_r+0x12>
 80045fc:	18e4      	adds	r4, r4, r3
 80045fe:	0028      	movs	r0, r5
 8004600:	f000 f8e0 	bl	80047c4 <__malloc_lock>
 8004604:	4a1d      	ldr	r2, [pc, #116]	@ (800467c <_free_r+0x90>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <_free_r+0x2c>
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	6014      	str	r4, [r2, #0]
 8004610:	0028      	movs	r0, r5
 8004612:	f000 f8df 	bl	80047d4 <__malloc_unlock>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	42a3      	cmp	r3, r4
 800461a:	d908      	bls.n	800462e <_free_r+0x42>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	1821      	adds	r1, r4, r0
 8004620:	428b      	cmp	r3, r1
 8004622:	d1f3      	bne.n	800460c <_free_r+0x20>
 8004624:	6819      	ldr	r1, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	1809      	adds	r1, r1, r0
 800462a:	6021      	str	r1, [r4, #0]
 800462c:	e7ee      	b.n	800460c <_free_r+0x20>
 800462e:	001a      	movs	r2, r3
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <_free_r+0x4e>
 8004636:	42a3      	cmp	r3, r4
 8004638:	d9f9      	bls.n	800462e <_free_r+0x42>
 800463a:	6811      	ldr	r1, [r2, #0]
 800463c:	1850      	adds	r0, r2, r1
 800463e:	42a0      	cmp	r0, r4
 8004640:	d10b      	bne.n	800465a <_free_r+0x6e>
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	1809      	adds	r1, r1, r0
 8004646:	1850      	adds	r0, r2, r1
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	4283      	cmp	r3, r0
 800464c:	d1e0      	bne.n	8004610 <_free_r+0x24>
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	1841      	adds	r1, r0, r1
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	6053      	str	r3, [r2, #4]
 8004658:	e7da      	b.n	8004610 <_free_r+0x24>
 800465a:	42a0      	cmp	r0, r4
 800465c:	d902      	bls.n	8004664 <_free_r+0x78>
 800465e:	230c      	movs	r3, #12
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	e7d5      	b.n	8004610 <_free_r+0x24>
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	1821      	adds	r1, r4, r0
 8004668:	428b      	cmp	r3, r1
 800466a:	d103      	bne.n	8004674 <_free_r+0x88>
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1809      	adds	r1, r1, r0
 8004672:	6021      	str	r1, [r4, #0]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	6054      	str	r4, [r2, #4]
 8004678:	e7ca      	b.n	8004610 <_free_r+0x24>
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	20000430 	.word	0x20000430

08004680 <sbrk_aligned>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4e0f      	ldr	r6, [pc, #60]	@ (80046c0 <sbrk_aligned+0x40>)
 8004684:	000d      	movs	r5, r1
 8004686:	6831      	ldr	r1, [r6, #0]
 8004688:	0004      	movs	r4, r0
 800468a:	2900      	cmp	r1, #0
 800468c:	d102      	bne.n	8004694 <sbrk_aligned+0x14>
 800468e:	f000 fb99 	bl	8004dc4 <_sbrk_r>
 8004692:	6030      	str	r0, [r6, #0]
 8004694:	0029      	movs	r1, r5
 8004696:	0020      	movs	r0, r4
 8004698:	f000 fb94 	bl	8004dc4 <_sbrk_r>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d103      	bne.n	80046a8 <sbrk_aligned+0x28>
 80046a0:	2501      	movs	r5, #1
 80046a2:	426d      	negs	r5, r5
 80046a4:	0028      	movs	r0, r5
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	2303      	movs	r3, #3
 80046aa:	1cc5      	adds	r5, r0, #3
 80046ac:	439d      	bics	r5, r3
 80046ae:	42a8      	cmp	r0, r5
 80046b0:	d0f8      	beq.n	80046a4 <sbrk_aligned+0x24>
 80046b2:	1a29      	subs	r1, r5, r0
 80046b4:	0020      	movs	r0, r4
 80046b6:	f000 fb85 	bl	8004dc4 <_sbrk_r>
 80046ba:	3001      	adds	r0, #1
 80046bc:	d1f2      	bne.n	80046a4 <sbrk_aligned+0x24>
 80046be:	e7ef      	b.n	80046a0 <sbrk_aligned+0x20>
 80046c0:	2000042c 	.word	0x2000042c

080046c4 <_malloc_r>:
 80046c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c6:	2203      	movs	r2, #3
 80046c8:	1ccb      	adds	r3, r1, #3
 80046ca:	4393      	bics	r3, r2
 80046cc:	3308      	adds	r3, #8
 80046ce:	0005      	movs	r5, r0
 80046d0:	001f      	movs	r7, r3
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d234      	bcs.n	8004740 <_malloc_r+0x7c>
 80046d6:	270c      	movs	r7, #12
 80046d8:	42b9      	cmp	r1, r7
 80046da:	d833      	bhi.n	8004744 <_malloc_r+0x80>
 80046dc:	0028      	movs	r0, r5
 80046de:	f000 f871 	bl	80047c4 <__malloc_lock>
 80046e2:	4e37      	ldr	r6, [pc, #220]	@ (80047c0 <_malloc_r+0xfc>)
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	001c      	movs	r4, r3
 80046e8:	2c00      	cmp	r4, #0
 80046ea:	d12f      	bne.n	800474c <_malloc_r+0x88>
 80046ec:	0039      	movs	r1, r7
 80046ee:	0028      	movs	r0, r5
 80046f0:	f7ff ffc6 	bl	8004680 <sbrk_aligned>
 80046f4:	0004      	movs	r4, r0
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d15f      	bne.n	80047ba <_malloc_r+0xf6>
 80046fa:	6834      	ldr	r4, [r6, #0]
 80046fc:	9400      	str	r4, [sp, #0]
 80046fe:	9b00      	ldr	r3, [sp, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d14a      	bne.n	800479a <_malloc_r+0xd6>
 8004704:	2c00      	cmp	r4, #0
 8004706:	d052      	beq.n	80047ae <_malloc_r+0xea>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	0028      	movs	r0, r5
 800470c:	18e3      	adds	r3, r4, r3
 800470e:	9900      	ldr	r1, [sp, #0]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	f000 fb57 	bl	8004dc4 <_sbrk_r>
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	4283      	cmp	r3, r0
 800471a:	d148      	bne.n	80047ae <_malloc_r+0xea>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	0028      	movs	r0, r5
 8004720:	1aff      	subs	r7, r7, r3
 8004722:	0039      	movs	r1, r7
 8004724:	f7ff ffac 	bl	8004680 <sbrk_aligned>
 8004728:	3001      	adds	r0, #1
 800472a:	d040      	beq.n	80047ae <_malloc_r+0xea>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	19db      	adds	r3, r3, r7
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	6833      	ldr	r3, [r6, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	2a00      	cmp	r2, #0
 8004738:	d133      	bne.n	80047a2 <_malloc_r+0xde>
 800473a:	9b00      	ldr	r3, [sp, #0]
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	e019      	b.n	8004774 <_malloc_r+0xb0>
 8004740:	2b00      	cmp	r3, #0
 8004742:	dac9      	bge.n	80046d8 <_malloc_r+0x14>
 8004744:	230c      	movs	r3, #12
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800474c:	6821      	ldr	r1, [r4, #0]
 800474e:	1bc9      	subs	r1, r1, r7
 8004750:	d420      	bmi.n	8004794 <_malloc_r+0xd0>
 8004752:	290b      	cmp	r1, #11
 8004754:	d90a      	bls.n	800476c <_malloc_r+0xa8>
 8004756:	19e2      	adds	r2, r4, r7
 8004758:	6027      	str	r7, [r4, #0]
 800475a:	42a3      	cmp	r3, r4
 800475c:	d104      	bne.n	8004768 <_malloc_r+0xa4>
 800475e:	6032      	str	r2, [r6, #0]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	6011      	str	r1, [r2, #0]
 8004764:	6053      	str	r3, [r2, #4]
 8004766:	e005      	b.n	8004774 <_malloc_r+0xb0>
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	e7f9      	b.n	8004760 <_malloc_r+0x9c>
 800476c:	6862      	ldr	r2, [r4, #4]
 800476e:	42a3      	cmp	r3, r4
 8004770:	d10e      	bne.n	8004790 <_malloc_r+0xcc>
 8004772:	6032      	str	r2, [r6, #0]
 8004774:	0028      	movs	r0, r5
 8004776:	f000 f82d 	bl	80047d4 <__malloc_unlock>
 800477a:	0020      	movs	r0, r4
 800477c:	2207      	movs	r2, #7
 800477e:	300b      	adds	r0, #11
 8004780:	1d23      	adds	r3, r4, #4
 8004782:	4390      	bics	r0, r2
 8004784:	1ac2      	subs	r2, r0, r3
 8004786:	4298      	cmp	r0, r3
 8004788:	d0df      	beq.n	800474a <_malloc_r+0x86>
 800478a:	1a1b      	subs	r3, r3, r0
 800478c:	50a3      	str	r3, [r4, r2]
 800478e:	e7dc      	b.n	800474a <_malloc_r+0x86>
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	e7ef      	b.n	8004774 <_malloc_r+0xb0>
 8004794:	0023      	movs	r3, r4
 8004796:	6864      	ldr	r4, [r4, #4]
 8004798:	e7a6      	b.n	80046e8 <_malloc_r+0x24>
 800479a:	9c00      	ldr	r4, [sp, #0]
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	e7ad      	b.n	80046fe <_malloc_r+0x3a>
 80047a2:	001a      	movs	r2, r3
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	42a3      	cmp	r3, r4
 80047a8:	d1fb      	bne.n	80047a2 <_malloc_r+0xde>
 80047aa:	2300      	movs	r3, #0
 80047ac:	e7da      	b.n	8004764 <_malloc_r+0xa0>
 80047ae:	230c      	movs	r3, #12
 80047b0:	0028      	movs	r0, r5
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f000 f80e 	bl	80047d4 <__malloc_unlock>
 80047b8:	e7c6      	b.n	8004748 <_malloc_r+0x84>
 80047ba:	6007      	str	r7, [r0, #0]
 80047bc:	e7da      	b.n	8004774 <_malloc_r+0xb0>
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	20000430 	.word	0x20000430

080047c4 <__malloc_lock>:
 80047c4:	b510      	push	{r4, lr}
 80047c6:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <__malloc_lock+0xc>)
 80047c8:	f7ff ff0e 	bl	80045e8 <__retarget_lock_acquire_recursive>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	20000428 	.word	0x20000428

080047d4 <__malloc_unlock>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4802      	ldr	r0, [pc, #8]	@ (80047e0 <__malloc_unlock+0xc>)
 80047d8:	f7ff ff07 	bl	80045ea <__retarget_lock_release_recursive>
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	20000428 	.word	0x20000428

080047e4 <__ssputs_r>:
 80047e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e6:	688e      	ldr	r6, [r1, #8]
 80047e8:	b085      	sub	sp, #20
 80047ea:	001f      	movs	r7, r3
 80047ec:	000c      	movs	r4, r1
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	9002      	str	r0, [sp, #8]
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	42be      	cmp	r6, r7
 80047f6:	d830      	bhi.n	800485a <__ssputs_r+0x76>
 80047f8:	210c      	movs	r1, #12
 80047fa:	5e62      	ldrsh	r2, [r4, r1]
 80047fc:	2190      	movs	r1, #144	@ 0x90
 80047fe:	00c9      	lsls	r1, r1, #3
 8004800:	420a      	tst	r2, r1
 8004802:	d028      	beq.n	8004856 <__ssputs_r+0x72>
 8004804:	2003      	movs	r0, #3
 8004806:	6921      	ldr	r1, [r4, #16]
 8004808:	1a5b      	subs	r3, r3, r1
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	6963      	ldr	r3, [r4, #20]
 800480e:	4343      	muls	r3, r0
 8004810:	9801      	ldr	r0, [sp, #4]
 8004812:	0fdd      	lsrs	r5, r3, #31
 8004814:	18ed      	adds	r5, r5, r3
 8004816:	1c7b      	adds	r3, r7, #1
 8004818:	181b      	adds	r3, r3, r0
 800481a:	106d      	asrs	r5, r5, #1
 800481c:	42ab      	cmp	r3, r5
 800481e:	d900      	bls.n	8004822 <__ssputs_r+0x3e>
 8004820:	001d      	movs	r5, r3
 8004822:	0552      	lsls	r2, r2, #21
 8004824:	d528      	bpl.n	8004878 <__ssputs_r+0x94>
 8004826:	0029      	movs	r1, r5
 8004828:	9802      	ldr	r0, [sp, #8]
 800482a:	f7ff ff4b 	bl	80046c4 <_malloc_r>
 800482e:	1e06      	subs	r6, r0, #0
 8004830:	d02c      	beq.n	800488c <__ssputs_r+0xa8>
 8004832:	9a01      	ldr	r2, [sp, #4]
 8004834:	6921      	ldr	r1, [r4, #16]
 8004836:	f000 fae2 	bl	8004dfe <memcpy>
 800483a:	89a2      	ldrh	r2, [r4, #12]
 800483c:	4b18      	ldr	r3, [pc, #96]	@ (80048a0 <__ssputs_r+0xbc>)
 800483e:	401a      	ands	r2, r3
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	4313      	orrs	r3, r2
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	6126      	str	r6, [r4, #16]
 800484a:	18f6      	adds	r6, r6, r3
 800484c:	6026      	str	r6, [r4, #0]
 800484e:	003e      	movs	r6, r7
 8004850:	6165      	str	r5, [r4, #20]
 8004852:	1aed      	subs	r5, r5, r3
 8004854:	60a5      	str	r5, [r4, #8]
 8004856:	42be      	cmp	r6, r7
 8004858:	d900      	bls.n	800485c <__ssputs_r+0x78>
 800485a:	003e      	movs	r6, r7
 800485c:	0032      	movs	r2, r6
 800485e:	9903      	ldr	r1, [sp, #12]
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	f000 fa9b 	bl	8004d9c <memmove>
 8004866:	2000      	movs	r0, #0
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	1b9b      	subs	r3, r3, r6
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	199b      	adds	r3, r3, r6
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	b005      	add	sp, #20
 8004876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004878:	002a      	movs	r2, r5
 800487a:	9802      	ldr	r0, [sp, #8]
 800487c:	f000 fac8 	bl	8004e10 <_realloc_r>
 8004880:	1e06      	subs	r6, r0, #0
 8004882:	d1e0      	bne.n	8004846 <__ssputs_r+0x62>
 8004884:	6921      	ldr	r1, [r4, #16]
 8004886:	9802      	ldr	r0, [sp, #8]
 8004888:	f7ff feb0 	bl	80045ec <_free_r>
 800488c:	230c      	movs	r3, #12
 800488e:	2001      	movs	r0, #1
 8004890:	9a02      	ldr	r2, [sp, #8]
 8004892:	4240      	negs	r0, r0
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	89a2      	ldrh	r2, [r4, #12]
 8004898:	3334      	adds	r3, #52	@ 0x34
 800489a:	4313      	orrs	r3, r2
 800489c:	81a3      	strh	r3, [r4, #12]
 800489e:	e7e9      	b.n	8004874 <__ssputs_r+0x90>
 80048a0:	fffffb7f 	.word	0xfffffb7f

080048a4 <_svfiprintf_r>:
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a6:	b0a1      	sub	sp, #132	@ 0x84
 80048a8:	9003      	str	r0, [sp, #12]
 80048aa:	001d      	movs	r5, r3
 80048ac:	898b      	ldrh	r3, [r1, #12]
 80048ae:	000f      	movs	r7, r1
 80048b0:	0016      	movs	r6, r2
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	d511      	bpl.n	80048da <_svfiprintf_r+0x36>
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10e      	bne.n	80048da <_svfiprintf_r+0x36>
 80048bc:	2140      	movs	r1, #64	@ 0x40
 80048be:	f7ff ff01 	bl	80046c4 <_malloc_r>
 80048c2:	6038      	str	r0, [r7, #0]
 80048c4:	6138      	str	r0, [r7, #16]
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d105      	bne.n	80048d6 <_svfiprintf_r+0x32>
 80048ca:	230c      	movs	r3, #12
 80048cc:	9a03      	ldr	r2, [sp, #12]
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	2001      	movs	r0, #1
 80048d2:	4240      	negs	r0, r0
 80048d4:	e0cf      	b.n	8004a76 <_svfiprintf_r+0x1d2>
 80048d6:	2340      	movs	r3, #64	@ 0x40
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	2300      	movs	r3, #0
 80048dc:	ac08      	add	r4, sp, #32
 80048de:	6163      	str	r3, [r4, #20]
 80048e0:	3320      	adds	r3, #32
 80048e2:	7663      	strb	r3, [r4, #25]
 80048e4:	3310      	adds	r3, #16
 80048e6:	76a3      	strb	r3, [r4, #26]
 80048e8:	9507      	str	r5, [sp, #28]
 80048ea:	0035      	movs	r5, r6
 80048ec:	782b      	ldrb	r3, [r5, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <_svfiprintf_r+0x52>
 80048f2:	2b25      	cmp	r3, #37	@ 0x25
 80048f4:	d148      	bne.n	8004988 <_svfiprintf_r+0xe4>
 80048f6:	1bab      	subs	r3, r5, r6
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	42b5      	cmp	r5, r6
 80048fc:	d00b      	beq.n	8004916 <_svfiprintf_r+0x72>
 80048fe:	0032      	movs	r2, r6
 8004900:	0039      	movs	r1, r7
 8004902:	9803      	ldr	r0, [sp, #12]
 8004904:	f7ff ff6e 	bl	80047e4 <__ssputs_r>
 8004908:	3001      	adds	r0, #1
 800490a:	d100      	bne.n	800490e <_svfiprintf_r+0x6a>
 800490c:	e0ae      	b.n	8004a6c <_svfiprintf_r+0x1c8>
 800490e:	6963      	ldr	r3, [r4, #20]
 8004910:	9a05      	ldr	r2, [sp, #20]
 8004912:	189b      	adds	r3, r3, r2
 8004914:	6163      	str	r3, [r4, #20]
 8004916:	782b      	ldrb	r3, [r5, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d100      	bne.n	800491e <_svfiprintf_r+0x7a>
 800491c:	e0a6      	b.n	8004a6c <_svfiprintf_r+0x1c8>
 800491e:	2201      	movs	r2, #1
 8004920:	2300      	movs	r3, #0
 8004922:	4252      	negs	r2, r2
 8004924:	6062      	str	r2, [r4, #4]
 8004926:	a904      	add	r1, sp, #16
 8004928:	3254      	adds	r2, #84	@ 0x54
 800492a:	1852      	adds	r2, r2, r1
 800492c:	1c6e      	adds	r6, r5, #1
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	60e3      	str	r3, [r4, #12]
 8004932:	60a3      	str	r3, [r4, #8]
 8004934:	7013      	strb	r3, [r2, #0]
 8004936:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004938:	4b54      	ldr	r3, [pc, #336]	@ (8004a8c <_svfiprintf_r+0x1e8>)
 800493a:	2205      	movs	r2, #5
 800493c:	0018      	movs	r0, r3
 800493e:	7831      	ldrb	r1, [r6, #0]
 8004940:	9305      	str	r3, [sp, #20]
 8004942:	f000 fa51 	bl	8004de8 <memchr>
 8004946:	1c75      	adds	r5, r6, #1
 8004948:	2800      	cmp	r0, #0
 800494a:	d11f      	bne.n	800498c <_svfiprintf_r+0xe8>
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	06d3      	lsls	r3, r2, #27
 8004950:	d504      	bpl.n	800495c <_svfiprintf_r+0xb8>
 8004952:	2353      	movs	r3, #83	@ 0x53
 8004954:	a904      	add	r1, sp, #16
 8004956:	185b      	adds	r3, r3, r1
 8004958:	2120      	movs	r1, #32
 800495a:	7019      	strb	r1, [r3, #0]
 800495c:	0713      	lsls	r3, r2, #28
 800495e:	d504      	bpl.n	800496a <_svfiprintf_r+0xc6>
 8004960:	2353      	movs	r3, #83	@ 0x53
 8004962:	a904      	add	r1, sp, #16
 8004964:	185b      	adds	r3, r3, r1
 8004966:	212b      	movs	r1, #43	@ 0x2b
 8004968:	7019      	strb	r1, [r3, #0]
 800496a:	7833      	ldrb	r3, [r6, #0]
 800496c:	2b2a      	cmp	r3, #42	@ 0x2a
 800496e:	d016      	beq.n	800499e <_svfiprintf_r+0xfa>
 8004970:	0035      	movs	r5, r6
 8004972:	2100      	movs	r1, #0
 8004974:	200a      	movs	r0, #10
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	782a      	ldrb	r2, [r5, #0]
 800497a:	1c6e      	adds	r6, r5, #1
 800497c:	3a30      	subs	r2, #48	@ 0x30
 800497e:	2a09      	cmp	r2, #9
 8004980:	d950      	bls.n	8004a24 <_svfiprintf_r+0x180>
 8004982:	2900      	cmp	r1, #0
 8004984:	d111      	bne.n	80049aa <_svfiprintf_r+0x106>
 8004986:	e017      	b.n	80049b8 <_svfiprintf_r+0x114>
 8004988:	3501      	adds	r5, #1
 800498a:	e7af      	b.n	80048ec <_svfiprintf_r+0x48>
 800498c:	9b05      	ldr	r3, [sp, #20]
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	1ac0      	subs	r0, r0, r3
 8004992:	2301      	movs	r3, #1
 8004994:	4083      	lsls	r3, r0
 8004996:	4313      	orrs	r3, r2
 8004998:	002e      	movs	r6, r5
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	e7cc      	b.n	8004938 <_svfiprintf_r+0x94>
 800499e:	9b07      	ldr	r3, [sp, #28]
 80049a0:	1d19      	adds	r1, r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	9107      	str	r1, [sp, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db01      	blt.n	80049ae <_svfiprintf_r+0x10a>
 80049aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049ac:	e004      	b.n	80049b8 <_svfiprintf_r+0x114>
 80049ae:	425b      	negs	r3, r3
 80049b0:	60e3      	str	r3, [r4, #12]
 80049b2:	2302      	movs	r3, #2
 80049b4:	4313      	orrs	r3, r2
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	782b      	ldrb	r3, [r5, #0]
 80049ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80049bc:	d10c      	bne.n	80049d8 <_svfiprintf_r+0x134>
 80049be:	786b      	ldrb	r3, [r5, #1]
 80049c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c2:	d134      	bne.n	8004a2e <_svfiprintf_r+0x18a>
 80049c4:	9b07      	ldr	r3, [sp, #28]
 80049c6:	3502      	adds	r5, #2
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	9207      	str	r2, [sp, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	da01      	bge.n	80049d6 <_svfiprintf_r+0x132>
 80049d2:	2301      	movs	r3, #1
 80049d4:	425b      	negs	r3, r3
 80049d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d8:	4e2d      	ldr	r6, [pc, #180]	@ (8004a90 <_svfiprintf_r+0x1ec>)
 80049da:	2203      	movs	r2, #3
 80049dc:	0030      	movs	r0, r6
 80049de:	7829      	ldrb	r1, [r5, #0]
 80049e0:	f000 fa02 	bl	8004de8 <memchr>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d006      	beq.n	80049f6 <_svfiprintf_r+0x152>
 80049e8:	2340      	movs	r3, #64	@ 0x40
 80049ea:	1b80      	subs	r0, r0, r6
 80049ec:	4083      	lsls	r3, r0
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	3501      	adds	r5, #1
 80049f2:	4313      	orrs	r3, r2
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	7829      	ldrb	r1, [r5, #0]
 80049f8:	2206      	movs	r2, #6
 80049fa:	4826      	ldr	r0, [pc, #152]	@ (8004a94 <_svfiprintf_r+0x1f0>)
 80049fc:	1c6e      	adds	r6, r5, #1
 80049fe:	7621      	strb	r1, [r4, #24]
 8004a00:	f000 f9f2 	bl	8004de8 <memchr>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d038      	beq.n	8004a7a <_svfiprintf_r+0x1d6>
 8004a08:	4b23      	ldr	r3, [pc, #140]	@ (8004a98 <_svfiprintf_r+0x1f4>)
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d122      	bne.n	8004a54 <_svfiprintf_r+0x1b0>
 8004a0e:	2207      	movs	r2, #7
 8004a10:	9b07      	ldr	r3, [sp, #28]
 8004a12:	3307      	adds	r3, #7
 8004a14:	4393      	bics	r3, r2
 8004a16:	3308      	adds	r3, #8
 8004a18:	9307      	str	r3, [sp, #28]
 8004a1a:	6963      	ldr	r3, [r4, #20]
 8004a1c:	9a04      	ldr	r2, [sp, #16]
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	6163      	str	r3, [r4, #20]
 8004a22:	e762      	b.n	80048ea <_svfiprintf_r+0x46>
 8004a24:	4343      	muls	r3, r0
 8004a26:	0035      	movs	r5, r6
 8004a28:	2101      	movs	r1, #1
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	e7a4      	b.n	8004978 <_svfiprintf_r+0xd4>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	200a      	movs	r0, #10
 8004a32:	0019      	movs	r1, r3
 8004a34:	3501      	adds	r5, #1
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	782a      	ldrb	r2, [r5, #0]
 8004a3a:	1c6e      	adds	r6, r5, #1
 8004a3c:	3a30      	subs	r2, #48	@ 0x30
 8004a3e:	2a09      	cmp	r2, #9
 8004a40:	d903      	bls.n	8004a4a <_svfiprintf_r+0x1a6>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0c8      	beq.n	80049d8 <_svfiprintf_r+0x134>
 8004a46:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a48:	e7c6      	b.n	80049d8 <_svfiprintf_r+0x134>
 8004a4a:	4341      	muls	r1, r0
 8004a4c:	0035      	movs	r5, r6
 8004a4e:	2301      	movs	r3, #1
 8004a50:	1889      	adds	r1, r1, r2
 8004a52:	e7f1      	b.n	8004a38 <_svfiprintf_r+0x194>
 8004a54:	aa07      	add	r2, sp, #28
 8004a56:	9200      	str	r2, [sp, #0]
 8004a58:	0021      	movs	r1, r4
 8004a5a:	003a      	movs	r2, r7
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a9c <_svfiprintf_r+0x1f8>)
 8004a5e:	9803      	ldr	r0, [sp, #12]
 8004a60:	e000      	b.n	8004a64 <_svfiprintf_r+0x1c0>
 8004a62:	bf00      	nop
 8004a64:	9004      	str	r0, [sp, #16]
 8004a66:	9b04      	ldr	r3, [sp, #16]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	d1d6      	bne.n	8004a1a <_svfiprintf_r+0x176>
 8004a6c:	89bb      	ldrh	r3, [r7, #12]
 8004a6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004a70:	065b      	lsls	r3, r3, #25
 8004a72:	d500      	bpl.n	8004a76 <_svfiprintf_r+0x1d2>
 8004a74:	e72c      	b.n	80048d0 <_svfiprintf_r+0x2c>
 8004a76:	b021      	add	sp, #132	@ 0x84
 8004a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7a:	aa07      	add	r2, sp, #28
 8004a7c:	9200      	str	r2, [sp, #0]
 8004a7e:	0021      	movs	r1, r4
 8004a80:	003a      	movs	r2, r7
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <_svfiprintf_r+0x1f8>)
 8004a84:	9803      	ldr	r0, [sp, #12]
 8004a86:	f000 f87b 	bl	8004b80 <_printf_i>
 8004a8a:	e7eb      	b.n	8004a64 <_svfiprintf_r+0x1c0>
 8004a8c:	08004f30 	.word	0x08004f30
 8004a90:	08004f36 	.word	0x08004f36
 8004a94:	08004f3a 	.word	0x08004f3a
 8004a98:	00000000 	.word	0x00000000
 8004a9c:	080047e5 	.word	0x080047e5

08004aa0 <_printf_common>:
 8004aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa2:	0016      	movs	r6, r2
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	688a      	ldr	r2, [r1, #8]
 8004aa8:	690b      	ldr	r3, [r1, #16]
 8004aaa:	000c      	movs	r4, r1
 8004aac:	9000      	str	r0, [sp, #0]
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	da00      	bge.n	8004ab4 <_printf_common+0x14>
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	0022      	movs	r2, r4
 8004ab6:	6033      	str	r3, [r6, #0]
 8004ab8:	3243      	adds	r2, #67	@ 0x43
 8004aba:	7812      	ldrb	r2, [r2, #0]
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	d001      	beq.n	8004ac4 <_printf_common+0x24>
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	6033      	str	r3, [r6, #0]
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	069b      	lsls	r3, r3, #26
 8004ac8:	d502      	bpl.n	8004ad0 <_printf_common+0x30>
 8004aca:	6833      	ldr	r3, [r6, #0]
 8004acc:	3302      	adds	r3, #2
 8004ace:	6033      	str	r3, [r6, #0]
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	2306      	movs	r3, #6
 8004ad4:	0015      	movs	r5, r2
 8004ad6:	401d      	ands	r5, r3
 8004ad8:	421a      	tst	r2, r3
 8004ada:	d027      	beq.n	8004b2c <_printf_common+0x8c>
 8004adc:	0023      	movs	r3, r4
 8004ade:	3343      	adds	r3, #67	@ 0x43
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	1e5a      	subs	r2, r3, #1
 8004ae4:	4193      	sbcs	r3, r2
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d430      	bmi.n	8004b4e <_printf_common+0xae>
 8004aec:	0022      	movs	r2, r4
 8004aee:	9901      	ldr	r1, [sp, #4]
 8004af0:	9800      	ldr	r0, [sp, #0]
 8004af2:	9d08      	ldr	r5, [sp, #32]
 8004af4:	3243      	adds	r2, #67	@ 0x43
 8004af6:	47a8      	blx	r5
 8004af8:	3001      	adds	r0, #1
 8004afa:	d025      	beq.n	8004b48 <_printf_common+0xa8>
 8004afc:	2206      	movs	r2, #6
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	2500      	movs	r5, #0
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d105      	bne.n	8004b14 <_printf_common+0x74>
 8004b08:	6833      	ldr	r3, [r6, #0]
 8004b0a:	68e5      	ldr	r5, [r4, #12]
 8004b0c:	1aed      	subs	r5, r5, r3
 8004b0e:	43eb      	mvns	r3, r5
 8004b10:	17db      	asrs	r3, r3, #31
 8004b12:	401d      	ands	r5, r3
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	6922      	ldr	r2, [r4, #16]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	dd01      	ble.n	8004b20 <_printf_common+0x80>
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	18ed      	adds	r5, r5, r3
 8004b20:	2600      	movs	r6, #0
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d120      	bne.n	8004b68 <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e010      	b.n	8004b4c <_printf_common+0xac>
 8004b2a:	3501      	adds	r5, #1
 8004b2c:	68e3      	ldr	r3, [r4, #12]
 8004b2e:	6832      	ldr	r2, [r6, #0]
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	42ab      	cmp	r3, r5
 8004b34:	ddd2      	ble.n	8004adc <_printf_common+0x3c>
 8004b36:	0022      	movs	r2, r4
 8004b38:	2301      	movs	r3, #1
 8004b3a:	9901      	ldr	r1, [sp, #4]
 8004b3c:	9800      	ldr	r0, [sp, #0]
 8004b3e:	9f08      	ldr	r7, [sp, #32]
 8004b40:	3219      	adds	r2, #25
 8004b42:	47b8      	blx	r7
 8004b44:	3001      	adds	r0, #1
 8004b46:	d1f0      	bne.n	8004b2a <_printf_common+0x8a>
 8004b48:	2001      	movs	r0, #1
 8004b4a:	4240      	negs	r0, r0
 8004b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b4e:	2030      	movs	r0, #48	@ 0x30
 8004b50:	18e1      	adds	r1, r4, r3
 8004b52:	3143      	adds	r1, #67	@ 0x43
 8004b54:	7008      	strb	r0, [r1, #0]
 8004b56:	0021      	movs	r1, r4
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	3145      	adds	r1, #69	@ 0x45
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	18a2      	adds	r2, r4, r2
 8004b60:	3243      	adds	r2, #67	@ 0x43
 8004b62:	3302      	adds	r3, #2
 8004b64:	7011      	strb	r1, [r2, #0]
 8004b66:	e7c1      	b.n	8004aec <_printf_common+0x4c>
 8004b68:	0022      	movs	r2, r4
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	9901      	ldr	r1, [sp, #4]
 8004b6e:	9800      	ldr	r0, [sp, #0]
 8004b70:	9f08      	ldr	r7, [sp, #32]
 8004b72:	321a      	adds	r2, #26
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	d0e6      	beq.n	8004b48 <_printf_common+0xa8>
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7d1      	b.n	8004b22 <_printf_common+0x82>
	...

08004b80 <_printf_i>:
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b08b      	sub	sp, #44	@ 0x2c
 8004b84:	9206      	str	r2, [sp, #24]
 8004b86:	000a      	movs	r2, r1
 8004b88:	3243      	adds	r2, #67	@ 0x43
 8004b8a:	9307      	str	r3, [sp, #28]
 8004b8c:	9005      	str	r0, [sp, #20]
 8004b8e:	9203      	str	r2, [sp, #12]
 8004b90:	7e0a      	ldrb	r2, [r1, #24]
 8004b92:	000c      	movs	r4, r1
 8004b94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b96:	2a78      	cmp	r2, #120	@ 0x78
 8004b98:	d809      	bhi.n	8004bae <_printf_i+0x2e>
 8004b9a:	2a62      	cmp	r2, #98	@ 0x62
 8004b9c:	d80b      	bhi.n	8004bb6 <_printf_i+0x36>
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	d100      	bne.n	8004ba4 <_printf_i+0x24>
 8004ba2:	e0bc      	b.n	8004d1e <_printf_i+0x19e>
 8004ba4:	497b      	ldr	r1, [pc, #492]	@ (8004d94 <_printf_i+0x214>)
 8004ba6:	9104      	str	r1, [sp, #16]
 8004ba8:	2a58      	cmp	r2, #88	@ 0x58
 8004baa:	d100      	bne.n	8004bae <_printf_i+0x2e>
 8004bac:	e090      	b.n	8004cd0 <_printf_i+0x150>
 8004bae:	0025      	movs	r5, r4
 8004bb0:	3542      	adds	r5, #66	@ 0x42
 8004bb2:	702a      	strb	r2, [r5, #0]
 8004bb4:	e022      	b.n	8004bfc <_printf_i+0x7c>
 8004bb6:	0010      	movs	r0, r2
 8004bb8:	3863      	subs	r0, #99	@ 0x63
 8004bba:	2815      	cmp	r0, #21
 8004bbc:	d8f7      	bhi.n	8004bae <_printf_i+0x2e>
 8004bbe:	f7fb fa9d 	bl	80000fc <__gnu_thumb1_case_shi>
 8004bc2:	0016      	.short	0x0016
 8004bc4:	fff6001f 	.word	0xfff6001f
 8004bc8:	fff6fff6 	.word	0xfff6fff6
 8004bcc:	001ffff6 	.word	0x001ffff6
 8004bd0:	fff6fff6 	.word	0xfff6fff6
 8004bd4:	fff6fff6 	.word	0xfff6fff6
 8004bd8:	003600a1 	.word	0x003600a1
 8004bdc:	fff60080 	.word	0xfff60080
 8004be0:	00b2fff6 	.word	0x00b2fff6
 8004be4:	0036fff6 	.word	0x0036fff6
 8004be8:	fff6fff6 	.word	0xfff6fff6
 8004bec:	0084      	.short	0x0084
 8004bee:	0025      	movs	r5, r4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	3542      	adds	r5, #66	@ 0x42
 8004bf4:	1d11      	adds	r1, r2, #4
 8004bf6:	6019      	str	r1, [r3, #0]
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	702b      	strb	r3, [r5, #0]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0a0      	b.n	8004d42 <_printf_i+0x1c2>
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	6809      	ldr	r1, [r1, #0]
 8004c04:	1d02      	adds	r2, r0, #4
 8004c06:	060d      	lsls	r5, r1, #24
 8004c08:	d50b      	bpl.n	8004c22 <_printf_i+0xa2>
 8004c0a:	6806      	ldr	r6, [r0, #0]
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	2e00      	cmp	r6, #0
 8004c10:	da03      	bge.n	8004c1a <_printf_i+0x9a>
 8004c12:	232d      	movs	r3, #45	@ 0x2d
 8004c14:	9a03      	ldr	r2, [sp, #12]
 8004c16:	4276      	negs	r6, r6
 8004c18:	7013      	strb	r3, [r2, #0]
 8004c1a:	4b5e      	ldr	r3, [pc, #376]	@ (8004d94 <_printf_i+0x214>)
 8004c1c:	270a      	movs	r7, #10
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	e018      	b.n	8004c54 <_printf_i+0xd4>
 8004c22:	6806      	ldr	r6, [r0, #0]
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	0649      	lsls	r1, r1, #25
 8004c28:	d5f1      	bpl.n	8004c0e <_printf_i+0x8e>
 8004c2a:	b236      	sxth	r6, r6
 8004c2c:	e7ef      	b.n	8004c0e <_printf_i+0x8e>
 8004c2e:	6808      	ldr	r0, [r1, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	c940      	ldmia	r1!, {r6}
 8004c34:	0605      	lsls	r5, r0, #24
 8004c36:	d402      	bmi.n	8004c3e <_printf_i+0xbe>
 8004c38:	0640      	lsls	r0, r0, #25
 8004c3a:	d500      	bpl.n	8004c3e <_printf_i+0xbe>
 8004c3c:	b2b6      	uxth	r6, r6
 8004c3e:	6019      	str	r1, [r3, #0]
 8004c40:	4b54      	ldr	r3, [pc, #336]	@ (8004d94 <_printf_i+0x214>)
 8004c42:	270a      	movs	r7, #10
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	2a6f      	cmp	r2, #111	@ 0x6f
 8004c48:	d100      	bne.n	8004c4c <_printf_i+0xcc>
 8004c4a:	3f02      	subs	r7, #2
 8004c4c:	0023      	movs	r3, r4
 8004c4e:	2200      	movs	r2, #0
 8004c50:	3343      	adds	r3, #67	@ 0x43
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	60a3      	str	r3, [r4, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db03      	blt.n	8004c64 <_printf_i+0xe4>
 8004c5c:	2104      	movs	r1, #4
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	438a      	bics	r2, r1
 8004c62:	6022      	str	r2, [r4, #0]
 8004c64:	2e00      	cmp	r6, #0
 8004c66:	d102      	bne.n	8004c6e <_printf_i+0xee>
 8004c68:	9d03      	ldr	r5, [sp, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <_printf_i+0x108>
 8004c6e:	9d03      	ldr	r5, [sp, #12]
 8004c70:	0030      	movs	r0, r6
 8004c72:	0039      	movs	r1, r7
 8004c74:	f7fb fad2 	bl	800021c <__aeabi_uidivmod>
 8004c78:	9b04      	ldr	r3, [sp, #16]
 8004c7a:	3d01      	subs	r5, #1
 8004c7c:	5c5b      	ldrb	r3, [r3, r1]
 8004c7e:	702b      	strb	r3, [r5, #0]
 8004c80:	0033      	movs	r3, r6
 8004c82:	0006      	movs	r6, r0
 8004c84:	429f      	cmp	r7, r3
 8004c86:	d9f3      	bls.n	8004c70 <_printf_i+0xf0>
 8004c88:	2f08      	cmp	r7, #8
 8004c8a:	d109      	bne.n	8004ca0 <_printf_i+0x120>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	07db      	lsls	r3, r3, #31
 8004c90:	d506      	bpl.n	8004ca0 <_printf_i+0x120>
 8004c92:	6862      	ldr	r2, [r4, #4]
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	dc02      	bgt.n	8004ca0 <_printf_i+0x120>
 8004c9a:	2330      	movs	r3, #48	@ 0x30
 8004c9c:	3d01      	subs	r5, #1
 8004c9e:	702b      	strb	r3, [r5, #0]
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	1b5b      	subs	r3, r3, r5
 8004ca4:	6123      	str	r3, [r4, #16]
 8004ca6:	9b07      	ldr	r3, [sp, #28]
 8004ca8:	0021      	movs	r1, r4
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	9805      	ldr	r0, [sp, #20]
 8004cae:	9b06      	ldr	r3, [sp, #24]
 8004cb0:	aa09      	add	r2, sp, #36	@ 0x24
 8004cb2:	f7ff fef5 	bl	8004aa0 <_printf_common>
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d148      	bne.n	8004d4c <_printf_i+0x1cc>
 8004cba:	2001      	movs	r0, #1
 8004cbc:	4240      	negs	r0, r0
 8004cbe:	b00b      	add	sp, #44	@ 0x2c
 8004cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	6809      	ldr	r1, [r1, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	6022      	str	r2, [r4, #0]
 8004cca:	2278      	movs	r2, #120	@ 0x78
 8004ccc:	4932      	ldr	r1, [pc, #200]	@ (8004d98 <_printf_i+0x218>)
 8004cce:	9104      	str	r1, [sp, #16]
 8004cd0:	0021      	movs	r1, r4
 8004cd2:	3145      	adds	r1, #69	@ 0x45
 8004cd4:	700a      	strb	r2, [r1, #0]
 8004cd6:	6819      	ldr	r1, [r3, #0]
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	c940      	ldmia	r1!, {r6}
 8004cdc:	0610      	lsls	r0, r2, #24
 8004cde:	d402      	bmi.n	8004ce6 <_printf_i+0x166>
 8004ce0:	0650      	lsls	r0, r2, #25
 8004ce2:	d500      	bpl.n	8004ce6 <_printf_i+0x166>
 8004ce4:	b2b6      	uxth	r6, r6
 8004ce6:	6019      	str	r1, [r3, #0]
 8004ce8:	07d3      	lsls	r3, r2, #31
 8004cea:	d502      	bpl.n	8004cf2 <_printf_i+0x172>
 8004cec:	2320      	movs	r3, #32
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d001      	beq.n	8004cfa <_printf_i+0x17a>
 8004cf6:	2710      	movs	r7, #16
 8004cf8:	e7a8      	b.n	8004c4c <_printf_i+0xcc>
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	4393      	bics	r3, r2
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	e7f8      	b.n	8004cf6 <_printf_i+0x176>
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	680d      	ldr	r5, [r1, #0]
 8004d08:	1d10      	adds	r0, r2, #4
 8004d0a:	6949      	ldr	r1, [r1, #20]
 8004d0c:	6018      	str	r0, [r3, #0]
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	062e      	lsls	r6, r5, #24
 8004d12:	d501      	bpl.n	8004d18 <_printf_i+0x198>
 8004d14:	6019      	str	r1, [r3, #0]
 8004d16:	e002      	b.n	8004d1e <_printf_i+0x19e>
 8004d18:	066d      	lsls	r5, r5, #25
 8004d1a:	d5fb      	bpl.n	8004d14 <_printf_i+0x194>
 8004d1c:	8019      	strh	r1, [r3, #0]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9d03      	ldr	r5, [sp, #12]
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	e7bf      	b.n	8004ca6 <_printf_i+0x126>
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	1d11      	adds	r1, r2, #4
 8004d2a:	6019      	str	r1, [r3, #0]
 8004d2c:	6815      	ldr	r5, [r2, #0]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	0028      	movs	r0, r5
 8004d32:	6862      	ldr	r2, [r4, #4]
 8004d34:	f000 f858 	bl	8004de8 <memchr>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d001      	beq.n	8004d40 <_printf_i+0x1c0>
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9a03      	ldr	r2, [sp, #12]
 8004d48:	7013      	strb	r3, [r2, #0]
 8004d4a:	e7ac      	b.n	8004ca6 <_printf_i+0x126>
 8004d4c:	002a      	movs	r2, r5
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	9906      	ldr	r1, [sp, #24]
 8004d52:	9805      	ldr	r0, [sp, #20]
 8004d54:	9d07      	ldr	r5, [sp, #28]
 8004d56:	47a8      	blx	r5
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d0ae      	beq.n	8004cba <_printf_i+0x13a>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	079b      	lsls	r3, r3, #30
 8004d60:	d415      	bmi.n	8004d8e <_printf_i+0x20e>
 8004d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d64:	68e0      	ldr	r0, [r4, #12]
 8004d66:	4298      	cmp	r0, r3
 8004d68:	daa9      	bge.n	8004cbe <_printf_i+0x13e>
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	e7a7      	b.n	8004cbe <_printf_i+0x13e>
 8004d6e:	0022      	movs	r2, r4
 8004d70:	2301      	movs	r3, #1
 8004d72:	9906      	ldr	r1, [sp, #24]
 8004d74:	9805      	ldr	r0, [sp, #20]
 8004d76:	9e07      	ldr	r6, [sp, #28]
 8004d78:	3219      	adds	r2, #25
 8004d7a:	47b0      	blx	r6
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d09c      	beq.n	8004cba <_printf_i+0x13a>
 8004d80:	3501      	adds	r5, #1
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dcf0      	bgt.n	8004d6e <_printf_i+0x1ee>
 8004d8c:	e7e9      	b.n	8004d62 <_printf_i+0x1e2>
 8004d8e:	2500      	movs	r5, #0
 8004d90:	e7f7      	b.n	8004d82 <_printf_i+0x202>
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	08004f41 	.word	0x08004f41
 8004d98:	08004f52 	.word	0x08004f52

08004d9c <memmove>:
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	4288      	cmp	r0, r1
 8004da0:	d806      	bhi.n	8004db0 <memmove+0x14>
 8004da2:	2300      	movs	r3, #0
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d008      	beq.n	8004dba <memmove+0x1e>
 8004da8:	5ccc      	ldrb	r4, [r1, r3]
 8004daa:	54c4      	strb	r4, [r0, r3]
 8004dac:	3301      	adds	r3, #1
 8004dae:	e7f9      	b.n	8004da4 <memmove+0x8>
 8004db0:	188b      	adds	r3, r1, r2
 8004db2:	4298      	cmp	r0, r3
 8004db4:	d2f5      	bcs.n	8004da2 <memmove+0x6>
 8004db6:	3a01      	subs	r2, #1
 8004db8:	d200      	bcs.n	8004dbc <memmove+0x20>
 8004dba:	bd10      	pop	{r4, pc}
 8004dbc:	5c8b      	ldrb	r3, [r1, r2]
 8004dbe:	5483      	strb	r3, [r0, r2]
 8004dc0:	e7f9      	b.n	8004db6 <memmove+0x1a>
	...

08004dc4 <_sbrk_r>:
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	b570      	push	{r4, r5, r6, lr}
 8004dc8:	4d06      	ldr	r5, [pc, #24]	@ (8004de4 <_sbrk_r+0x20>)
 8004dca:	0004      	movs	r4, r0
 8004dcc:	0008      	movs	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc f8d6 	bl	8000f80 <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_sbrk_r+0x1c>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d000      	beq.n	8004de0 <_sbrk_r+0x1c>
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000424 	.word	0x20000424

08004de8 <memchr>:
 8004de8:	b2c9      	uxtb	r1, r1
 8004dea:	1882      	adds	r2, r0, r2
 8004dec:	4290      	cmp	r0, r2
 8004dee:	d101      	bne.n	8004df4 <memchr+0xc>
 8004df0:	2000      	movs	r0, #0
 8004df2:	4770      	bx	lr
 8004df4:	7803      	ldrb	r3, [r0, #0]
 8004df6:	428b      	cmp	r3, r1
 8004df8:	d0fb      	beq.n	8004df2 <memchr+0xa>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	e7f6      	b.n	8004dec <memchr+0x4>

08004dfe <memcpy>:
 8004dfe:	2300      	movs	r3, #0
 8004e00:	b510      	push	{r4, lr}
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d100      	bne.n	8004e08 <memcpy+0xa>
 8004e06:	bd10      	pop	{r4, pc}
 8004e08:	5ccc      	ldrb	r4, [r1, r3]
 8004e0a:	54c4      	strb	r4, [r0, r3]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	e7f8      	b.n	8004e02 <memcpy+0x4>

08004e10 <_realloc_r>:
 8004e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e12:	0006      	movs	r6, r0
 8004e14:	000c      	movs	r4, r1
 8004e16:	0015      	movs	r5, r2
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	d105      	bne.n	8004e28 <_realloc_r+0x18>
 8004e1c:	0011      	movs	r1, r2
 8004e1e:	f7ff fc51 	bl	80046c4 <_malloc_r>
 8004e22:	0004      	movs	r4, r0
 8004e24:	0020      	movs	r0, r4
 8004e26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e28:	2a00      	cmp	r2, #0
 8004e2a:	d103      	bne.n	8004e34 <_realloc_r+0x24>
 8004e2c:	f7ff fbde 	bl	80045ec <_free_r>
 8004e30:	2400      	movs	r4, #0
 8004e32:	e7f7      	b.n	8004e24 <_realloc_r+0x14>
 8004e34:	f000 f81b 	bl	8004e6e <_malloc_usable_size_r>
 8004e38:	0007      	movs	r7, r0
 8004e3a:	4285      	cmp	r5, r0
 8004e3c:	d802      	bhi.n	8004e44 <_realloc_r+0x34>
 8004e3e:	0843      	lsrs	r3, r0, #1
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	d3ef      	bcc.n	8004e24 <_realloc_r+0x14>
 8004e44:	0029      	movs	r1, r5
 8004e46:	0030      	movs	r0, r6
 8004e48:	f7ff fc3c 	bl	80046c4 <_malloc_r>
 8004e4c:	9001      	str	r0, [sp, #4]
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d0ee      	beq.n	8004e30 <_realloc_r+0x20>
 8004e52:	002a      	movs	r2, r5
 8004e54:	42bd      	cmp	r5, r7
 8004e56:	d900      	bls.n	8004e5a <_realloc_r+0x4a>
 8004e58:	003a      	movs	r2, r7
 8004e5a:	0021      	movs	r1, r4
 8004e5c:	9801      	ldr	r0, [sp, #4]
 8004e5e:	f7ff ffce 	bl	8004dfe <memcpy>
 8004e62:	0021      	movs	r1, r4
 8004e64:	0030      	movs	r0, r6
 8004e66:	f7ff fbc1 	bl	80045ec <_free_r>
 8004e6a:	9c01      	ldr	r4, [sp, #4]
 8004e6c:	e7da      	b.n	8004e24 <_realloc_r+0x14>

08004e6e <_malloc_usable_size_r>:
 8004e6e:	1f0b      	subs	r3, r1, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1f18      	subs	r0, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	da01      	bge.n	8004e7c <_malloc_usable_size_r+0xe>
 8004e78:	580b      	ldr	r3, [r1, r0]
 8004e7a:	18c0      	adds	r0, r0, r3
 8004e7c:	4770      	bx	lr
	...

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	46c0      	nop			@ (mov r8, r8)
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
