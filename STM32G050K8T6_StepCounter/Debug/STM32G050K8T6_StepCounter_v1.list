
STM32G050K8T6_StepCounter_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003850  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800397c  0800397c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800397c  0800397c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800397c  0800397c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800397c  0800397c  0000497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003984  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  08003990  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003990  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001571d  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  0001a751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0001cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  0001e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f0  00000000  00000000  0001f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001771b  00000000  00000000  000363bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a87  00000000  00000000  0004dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e555f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a04  00000000  00000000  000e55a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000e9fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000000c 	.word	0x2000000c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080038ec 	.word	0x080038ec

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000010 	.word	0x20000010
 80000f8:	080038ec 	.word	0x080038ec

080000fc <__udivsi3>:
 80000fc:	2200      	movs	r2, #0
 80000fe:	0843      	lsrs	r3, r0, #1
 8000100:	428b      	cmp	r3, r1
 8000102:	d374      	bcc.n	80001ee <__udivsi3+0xf2>
 8000104:	0903      	lsrs	r3, r0, #4
 8000106:	428b      	cmp	r3, r1
 8000108:	d35f      	bcc.n	80001ca <__udivsi3+0xce>
 800010a:	0a03      	lsrs	r3, r0, #8
 800010c:	428b      	cmp	r3, r1
 800010e:	d344      	bcc.n	800019a <__udivsi3+0x9e>
 8000110:	0b03      	lsrs	r3, r0, #12
 8000112:	428b      	cmp	r3, r1
 8000114:	d328      	bcc.n	8000168 <__udivsi3+0x6c>
 8000116:	0c03      	lsrs	r3, r0, #16
 8000118:	428b      	cmp	r3, r1
 800011a:	d30d      	bcc.n	8000138 <__udivsi3+0x3c>
 800011c:	22ff      	movs	r2, #255	@ 0xff
 800011e:	0209      	lsls	r1, r1, #8
 8000120:	ba12      	rev	r2, r2
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d302      	bcc.n	800012e <__udivsi3+0x32>
 8000128:	1212      	asrs	r2, r2, #8
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	d065      	beq.n	80001fa <__udivsi3+0xfe>
 800012e:	0b03      	lsrs	r3, r0, #12
 8000130:	428b      	cmp	r3, r1
 8000132:	d319      	bcc.n	8000168 <__udivsi3+0x6c>
 8000134:	e000      	b.n	8000138 <__udivsi3+0x3c>
 8000136:	0a09      	lsrs	r1, r1, #8
 8000138:	0bc3      	lsrs	r3, r0, #15
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x46>
 800013e:	03cb      	lsls	r3, r1, #15
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b83      	lsrs	r3, r0, #14
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x52>
 800014a:	038b      	lsls	r3, r1, #14
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b43      	lsrs	r3, r0, #13
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x5e>
 8000156:	034b      	lsls	r3, r1, #13
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x6a>
 8000162:	030b      	lsls	r3, r1, #12
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0ac3      	lsrs	r3, r0, #11
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x76>
 800016e:	02cb      	lsls	r3, r1, #11
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a83      	lsrs	r3, r0, #10
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x82>
 800017a:	028b      	lsls	r3, r1, #10
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a43      	lsrs	r3, r0, #9
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x8e>
 8000186:	024b      	lsls	r3, r1, #9
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a03      	lsrs	r3, r0, #8
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x9a>
 8000192:	020b      	lsls	r3, r1, #8
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	d2cd      	bcs.n	8000136 <__udivsi3+0x3a>
 800019a:	09c3      	lsrs	r3, r0, #7
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xa8>
 80001a0:	01cb      	lsls	r3, r1, #7
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0983      	lsrs	r3, r0, #6
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xb4>
 80001ac:	018b      	lsls	r3, r1, #6
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0943      	lsrs	r3, r0, #5
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xc0>
 80001b8:	014b      	lsls	r3, r1, #5
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0903      	lsrs	r3, r0, #4
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xcc>
 80001c4:	010b      	lsls	r3, r1, #4
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	08c3      	lsrs	r3, r0, #3
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xd8>
 80001d0:	00cb      	lsls	r3, r1, #3
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0883      	lsrs	r3, r0, #2
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xe4>
 80001dc:	008b      	lsls	r3, r1, #2
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xf0>
 80001e8:	004b      	lsls	r3, r1, #1
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	1a41      	subs	r1, r0, r1
 80001f0:	d200      	bcs.n	80001f4 <__udivsi3+0xf8>
 80001f2:	4601      	mov	r1, r0
 80001f4:	4152      	adcs	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4770      	bx	lr
 80001fa:	e7ff      	b.n	80001fc <__udivsi3+0x100>
 80001fc:	b501      	push	{r0, lr}
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f806 	bl	8000210 <__aeabi_idiv0>
 8000204:	bd02      	pop	{r1, pc}
 8000206:	46c0      	nop			@ (mov r8, r8)

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f7      	beq.n	80001fc <__udivsi3+0x100>
 800020c:	e776      	b.n	80000fc <__udivsi3>
 800020e:	4770      	bx	lr

08000210 <__aeabi_idiv0>:
 8000210:	4770      	bx	lr
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fc9e 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f810 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 fa16 	bl	8000650 <MX_GPIO_Init>
  MX_DMA_Init();
 8000224:	f000 f9f6 	bl	8000614 <MX_DMA_Init>
  MX_ADC1_Init();
 8000228:	f000 f852 	bl	80002d0 <MX_ADC1_Init>
  MX_I2C2_Init();
 800022c:	f000 f8de 	bl	80003ec <MX_I2C2_Init>
  MX_SPI2_Init();
 8000230:	f000 f91c 	bl	800046c <MX_SPI2_Init>
  MX_TIM3_Init();
 8000234:	f000 f958 	bl	80004e8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f9b8 	bl	80005ac <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	e7fd      	b.n	800023c <main+0x28>

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b093      	sub	sp, #76	@ 0x4c
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	2414      	movs	r4, #20
 8000248:	193b      	adds	r3, r7, r4
 800024a:	0018      	movs	r0, r3
 800024c:	2334      	movs	r3, #52	@ 0x34
 800024e:	001a      	movs	r2, r3
 8000250:	2100      	movs	r1, #0
 8000252:	f003 fb1f 	bl	8003894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	0018      	movs	r0, r3
 800025a:	2310      	movs	r3, #16
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f003 fb18 	bl	8003894 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f001 fe85 	bl	8001f78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2202      	movs	r2, #2
 8000272:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2280      	movs	r2, #128	@ 0x80
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2200      	movs	r2, #0
 8000280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2240      	movs	r2, #64	@ 0x40
 8000286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	193b      	adds	r3, r7, r4
 8000290:	0018      	movs	r0, r3
 8000292:	f001 febd 	bl	8002010 <HAL_RCC_OscConfig>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800029a:	f000 fa15 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2100      	movs	r1, #0
 80002ba:	0018      	movs	r0, r3
 80002bc:	f002 f9b8 	bl	8002630 <HAL_RCC_ClockConfig>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002c4:	f000 fa00 	bl	80006c8 <Error_Handler>
  }
}
 80002c8:	46c0      	nop			@ (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b013      	add	sp, #76	@ 0x4c
 80002ce:	bd90      	pop	{r4, r7, pc}

080002d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	0018      	movs	r0, r3
 80002da:	230c      	movs	r3, #12
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f003 fad8 	bl	8003894 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002e4:	4b3c      	ldr	r3, [pc, #240]	@ (80003d8 <MX_ADC1_Init+0x108>)
 80002e6:	4a3d      	ldr	r2, [pc, #244]	@ (80003dc <MX_ADC1_Init+0x10c>)
 80002e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002ea:	4b3b      	ldr	r3, [pc, #236]	@ (80003d8 <MX_ADC1_Init+0x108>)
 80002ec:	2280      	movs	r2, #128	@ 0x80
 80002ee:	05d2      	lsls	r2, r2, #23
 80002f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002f2:	4b39      	ldr	r3, [pc, #228]	@ (80003d8 <MX_ADC1_Init+0x108>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <MX_ADC1_Init+0x108>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002fe:	4b36      	ldr	r3, [pc, #216]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000300:	2280      	movs	r2, #128	@ 0x80
 8000302:	0392      	lsls	r2, r2, #14
 8000304:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000306:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000308:	2208      	movs	r2, #8
 800030a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030c:	4b32      	ldr	r3, [pc, #200]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800030e:	2200      	movs	r2, #0
 8000310:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000312:	4b31      	ldr	r3, [pc, #196]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000314:	2200      	movs	r2, #0
 8000316:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000318:	4b2f      	ldr	r3, [pc, #188]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800031a:	2201      	movs	r2, #1
 800031c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 800031e:	4b2e      	ldr	r3, [pc, #184]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000320:	2203      	movs	r2, #3
 8000322:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b2c      	ldr	r3, [pc, #176]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b2b      	ldr	r3, [pc, #172]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800032c:	2200      	movs	r2, #0
 800032e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000330:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000332:	222c      	movs	r2, #44	@ 0x2c
 8000334:	2100      	movs	r1, #0
 8000336:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000338:	4b27      	ldr	r3, [pc, #156]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800033a:	2200      	movs	r2, #0
 800033c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000340:	2200      	movs	r2, #0
 8000342:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000344:	4b24      	ldr	r3, [pc, #144]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000346:	2200      	movs	r2, #0
 8000348:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800034a:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800034c:	223c      	movs	r2, #60	@ 0x3c
 800034e:	2100      	movs	r1, #0
 8000350:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000352:	4b21      	ldr	r3, [pc, #132]	@ (80003d8 <MX_ADC1_Init+0x108>)
 8000354:	2200      	movs	r2, #0
 8000356:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800035a:	0018      	movs	r0, r3
 800035c:	f000 fd80 	bl	8000e60 <HAL_ADC_Init>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000364:	f000 f9b0 	bl	80006c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4a1d      	ldr	r2, [pc, #116]	@ (80003e0 <MX_ADC1_Init+0x110>)
 800036c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037a:	1d3a      	adds	r2, r7, #4
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800037e:	0011      	movs	r1, r2
 8000380:	0018      	movs	r0, r3
 8000382:	f000 ff15 	bl	80011b0 <HAL_ADC_ConfigChannel>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800038a:	f000 f99d 	bl	80006c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <MX_ADC1_Init+0x114>)
 8000392:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2204      	movs	r2, #4
 8000398:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3a      	adds	r2, r7, #4
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_ADC1_Init+0x108>)
 800039e:	0011      	movs	r1, r2
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 ff05 	bl	80011b0 <HAL_ADC_ConfigChannel>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003aa:	f000 f98d 	bl	80006c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4a0d      	ldr	r2, [pc, #52]	@ (80003e8 <MX_ADC1_Init+0x118>)
 80003b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2208      	movs	r2, #8
 80003b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ba:	1d3a      	adds	r2, r7, #4
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_ADC1_Init+0x108>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 fef5 	bl	80011b0 <HAL_ADC_ConfigChannel>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80003ca:	f000 f97d 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b004      	add	sp, #16
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40012400 	.word	0x40012400
 80003e0:	14000020 	.word	0x14000020
 80003e4:	18000040 	.word	0x18000040
 80003e8:	1c000080 	.word	0x1c000080

080003ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_I2C2_Init+0x74>)
 80003f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000464 <MX_I2C2_Init+0x78>)
 80003f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300617;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <MX_I2C2_Init+0x74>)
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <MX_I2C2_Init+0x7c>)
 80003fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_I2C2_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000402:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <MX_I2C2_Init+0x74>)
 8000404:	2201      	movs	r2, #1
 8000406:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_I2C2_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800040e:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <MX_I2C2_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_I2C2_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_I2C2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_I2C2_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_I2C2_Init+0x74>)
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fc67 	bl	8001cfc <HAL_I2C_Init>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000432:	f000 f949 	bl	80006c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000436:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <MX_I2C2_Init+0x74>)
 8000438:	2100      	movs	r1, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fd04 	bl	8001e48 <HAL_I2CEx_ConfigAnalogFilter>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000444:	f000 f940 	bl	80006c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000448:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <MX_I2C2_Init+0x74>)
 800044a:	2100      	movs	r1, #0
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fd47 	bl	8001ee0 <HAL_I2CEx_ConfigDigitalFilter>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000456:	f000 f937 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000e8 	.word	0x200000e8
 8000464:	40005800 	.word	0x40005800
 8000468:	00300617 	.word	0x00300617

0800046c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_SPI2_Init+0x74>)
 8000472:	4a1c      	ldr	r2, [pc, #112]	@ (80004e4 <MX_SPI2_Init+0x78>)
 8000474:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <MX_SPI2_Init+0x74>)
 8000478:	2282      	movs	r2, #130	@ 0x82
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800047e:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_SPI2_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <MX_SPI2_Init+0x74>)
 8000486:	22e0      	movs	r2, #224	@ 0xe0
 8000488:	00d2      	lsls	r2, r2, #3
 800048a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <MX_SPI2_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000492:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <MX_SPI2_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_SPI2_Init+0x74>)
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004b8:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004ba:	2207      	movs	r2, #7
 80004bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004c6:	2208      	movs	r2, #8
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004ca:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <MX_SPI2_Init+0x74>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f002 fa59 	bl	8002984 <HAL_SPI_Init>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f8f7 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000013c 	.word	0x2000013c
 80004e4:	40003800 	.word	0x40003800

080004e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b08d      	sub	sp, #52	@ 0x34
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ee:	240c      	movs	r4, #12
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2324      	movs	r3, #36	@ 0x24
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f003 f9cb 	bl	8003894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	230c      	movs	r3, #12
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f003 f9c4 	bl	8003894 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800050c:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 800050e:	4a26      	ldr	r2, [pc, #152]	@ (80005a8 <MX_TIM3_Init+0xc0>)
 8000510:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000512:	4b24      	ldr	r3, [pc, #144]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800051e:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 8000520:	22ff      	movs	r2, #255	@ 0xff
 8000522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052a:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2203      	movs	r2, #3
 8000536:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2202      	movs	r2, #2
 800053c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000568:	187a      	adds	r2, r7, r1
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f002 fac0 	bl	8002af4 <HAL_TIM_Encoder_Init>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000578:	f000 f8a6 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000588:	003a      	movs	r2, r7
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_TIM3_Init+0xbc>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fd0c 	bl	8002fac <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000598:	f000 f896 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b00d      	add	sp, #52	@ 0x34
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	200001a0 	.word	0x200001a0
 80005a8:	40000400 	.word	0x40000400

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b16      	ldr	r3, [pc, #88]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_USART2_UART_Init+0x64>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b6:	4b15      	ldr	r3, [pc, #84]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005b8:	22e1      	movs	r2, #225	@ 0xe1
 80005ba:	0252      	lsls	r2, r2, #9
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <MX_USART2_UART_Init+0x60>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 fd58 	bl	80030ac <HAL_UART_Init>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000600:	f000 f862 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	200001ec 	.word	0x200001ec
 8000610:	40004400 	.word	0x40004400

08000614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_DMA_Init+0x38>)
 800061c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <MX_DMA_Init+0x38>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	639a      	str	r2, [r3, #56]	@ 0x38
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_DMA_Init+0x38>)
 8000628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	2009      	movs	r0, #9
 8000638:	f001 f83e 	bl	80016b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800063c:	2009      	movs	r0, #9
 800063e:	f001 f850 	bl	80016e2 <HAL_NVIC_EnableIRQ>

}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b089      	sub	sp, #36	@ 0x24
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	240c      	movs	r4, #12
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2314      	movs	r3, #20
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f003 f917 	bl	8003894 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_GPIO_Init+0x70>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_GPIO_Init+0x70>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_GPIO_Init+0x70>)
 8000674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_GPIO_Init+0x70>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_GPIO_Init+0x70>)
 8000684:	2102      	movs	r1, #2
 8000686:	430a      	orrs	r2, r1
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_GPIO_Init+0x70>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068e:	2202      	movs	r2, #2
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2208      	movs	r2, #8
 800069a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2288      	movs	r2, #136	@ 0x88
 80006a0:	0352      	lsls	r2, r2, #13
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <MX_GPIO_Init+0x74>)
 80006ae:	0019      	movs	r1, r3
 80006b0:	0010      	movs	r0, r2
 80006b2:	f001 f9bf 	bl	8001a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b009      	add	sp, #36	@ 0x24
 80006bc:	bd90      	pop	{r4, r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	40021000 	.word	0x40021000
 80006c4:	50000400 	.word	0x50000400

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <HAL_MspInit+0x44>)
 80006dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <HAL_MspInit+0x44>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <HAL_MspInit+0x44>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <HAL_MspInit+0x44>)
 80006f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_MspInit+0x44>)
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	0549      	lsls	r1, r1, #21
 80006fc:	430a      	orrs	r2, r1
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <HAL_MspInit+0x44>)
 8000702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	055b      	lsls	r3, r3, #21
 8000708:	4013      	ands	r3, r2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08b      	sub	sp, #44	@ 0x2c
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	2414      	movs	r4, #20
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	2314      	movs	r3, #20
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 f8b0 	bl	8003894 <memset>
  if(hadc->Instance==ADC1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a2d      	ldr	r2, [pc, #180]	@ (80007f0 <HAL_ADC_MspInit+0xd4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d154      	bne.n	80007e8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <HAL_ADC_MspInit+0xd8>)
 8000740:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <HAL_ADC_MspInit+0xd8>)
 8000744:	2180      	movs	r1, #128	@ 0x80
 8000746:	0349      	lsls	r1, r1, #13
 8000748:	430a      	orrs	r2, r1
 800074a:	641a      	str	r2, [r3, #64]	@ 0x40
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <HAL_ADC_MspInit+0xd8>)
 800074e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	035b      	lsls	r3, r3, #13
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <HAL_ADC_MspInit+0xd8>)
 800075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800075e:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <HAL_ADC_MspInit+0xd8>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <HAL_ADC_MspInit+0xd8>)
 8000768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	22e0      	movs	r2, #224	@ 0xe0
 8000776:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2203      	movs	r2, #3
 800077c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	193a      	adds	r2, r7, r4
 8000786:	23a0      	movs	r3, #160	@ 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 f951 	bl	8001a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 8000794:	4a19      	ldr	r2, [pc, #100]	@ (80007fc <HAL_ADC_MspInit+0xe0>)
 8000796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 800079a:	2205      	movs	r2, #5
 800079c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007b2:	2280      	movs	r2, #128	@ 0x80
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007c2:	2220      	movs	r2, #32
 80007c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 ffa4 	bl	800171c <HAL_DMA_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80007d8:	f7ff ff76 	bl	80006c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a06      	ldr	r2, [pc, #24]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_ADC_MspInit+0xdc>)
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b00b      	add	sp, #44	@ 0x2c
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	40012400 	.word	0x40012400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	40020008 	.word	0x40020008

08000800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08b      	sub	sp, #44	@ 0x2c
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	2414      	movs	r4, #20
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2314      	movs	r3, #20
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f003 f83e 	bl	8003894 <memset>
  if(hi2c->Instance==I2C2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <HAL_I2C_MspInit+0x90>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d131      	bne.n	8000886 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_I2C_MspInit+0x94>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <HAL_I2C_MspInit+0x94>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <HAL_I2C_MspInit+0x94>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	22c0      	movs	r2, #192	@ 0xc0
 800083e:	0152      	lsls	r2, r2, #5
 8000840:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2212      	movs	r2, #18
 8000848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2206      	movs	r2, #6
 800085a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	187a      	adds	r2, r7, r1
 800085e:	23a0      	movs	r3, #160	@ 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 f8e5 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <HAL_I2C_MspInit+0x94>)
 800086c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_I2C_MspInit+0x94>)
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	03c9      	lsls	r1, r1, #15
 8000874:	430a      	orrs	r2, r1
 8000876:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_I2C_MspInit+0x94>)
 800087a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	03db      	lsls	r3, r3, #15
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b00b      	add	sp, #44	@ 0x2c
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	40005800 	.word	0x40005800
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	@ 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f002 fff2 	bl	8003894 <memset>
  if(hspi->Instance==SPI2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a26      	ldr	r2, [pc, #152]	@ (8000950 <HAL_SPI_MspInit+0xb8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d145      	bne.n	8000946 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <HAL_SPI_MspInit+0xbc>)
 80008bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008be:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <HAL_SPI_MspInit+0xbc>)
 80008c0:	2180      	movs	r1, #128	@ 0x80
 80008c2:	01c9      	lsls	r1, r1, #7
 80008c4:	430a      	orrs	r2, r1
 80008c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <HAL_SPI_MspInit+0xbc>)
 80008ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	01db      	lsls	r3, r3, #7
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <HAL_SPI_MspInit+0xbc>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008da:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <HAL_SPI_MspInit+0xbc>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <HAL_SPI_MspInit+0xbc>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2240      	movs	r2, #64	@ 0x40
 80008f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2202      	movs	r2, #2
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2204      	movs	r2, #4
 800090a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	193b      	adds	r3, r7, r4
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <HAL_SPI_MspInit+0xc0>)
 8000910:	0019      	movs	r1, r3
 8000912:	0010      	movs	r0, r2
 8000914:	f001 f88e 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000918:	0021      	movs	r1, r4
 800091a:	187b      	adds	r3, r7, r1
 800091c:	22c0      	movs	r2, #192	@ 0xc0
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2202      	movs	r2, #2
 8000926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	187b      	adds	r3, r7, r1
 800093c:	4a06      	ldr	r2, [pc, #24]	@ (8000958 <HAL_SPI_MspInit+0xc0>)
 800093e:	0019      	movs	r1, r3
 8000940:	0010      	movs	r0, r2
 8000942:	f001 f877 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b00b      	add	sp, #44	@ 0x2c
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	40003800 	.word	0x40003800
 8000954:	40021000 	.word	0x40021000
 8000958:	50000400 	.word	0x50000400

0800095c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b08b      	sub	sp, #44	@ 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	2414      	movs	r4, #20
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	2314      	movs	r3, #20
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f002 ff90 	bl	8003894 <memset>
  if(htim_encoder->Instance==TIM3)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0x98>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d135      	bne.n	80009ea <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000984:	2102      	movs	r1, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	63da      	str	r2, [r3, #60]	@ 0x3c
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800098c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800098e:	2202      	movs	r2, #2
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800099c:	2102      	movs	r1, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80009a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a6:	2202      	movs	r2, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2230      	movs	r2, #48	@ 0x30
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_TIM_Encoder_MspInit+0xa0>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f001 f82d 	bl	8001a34 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2010      	movs	r0, #16
 80009e0:	f000 fe6a 	bl	80016b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009e4:	2010      	movs	r0, #16
 80009e6:	f000 fe7c 	bl	80016e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b00b      	add	sp, #44	@ 0x2c
 80009f0:	bd90      	pop	{r4, r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	40000400 	.word	0x40000400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	50000400 	.word	0x50000400

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	@ 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2414      	movs	r4, #20
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f002 ff3e 	bl	8003894 <memset>
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <HAL_UART_MspInit+0x8c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d130      	bne.n	8000a84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	0289      	lsls	r1, r1, #10
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	029b      	lsls	r3, r3, #10
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <HAL_UART_MspInit+0x90>)
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	23a0      	movs	r3, #160	@ 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 ffd8 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b00b      	add	sp, #44	@ 0x2c
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40004400 	.word	0x40004400
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	e7fd      	b.n	8000a98 <NMI_Handler+0x4>

08000a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	e7fd      	b.n	8000aa0 <HardFault_Handler+0x4>

08000aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8b6 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <DMA1_Channel1_IRQHandler+0x14>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 feae 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global Interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <TIM3_IRQHandler+0x14>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 f8ac 	bl	8002c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	200001a0 	.word	0x200001a0

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b08:	f7ff fff6 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	@ (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b32:	f002 feb7 	bl	80038a4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b36:	f7ff fb6d 	bl	8000214 <main>

08000b3a <LoopForever>:

LoopForever:
  b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b48:	08003984 	.word	0x08003984
  ldr r2, =_sbss
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b50:	20000284 	.word	0x20000284

08000b54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_Init+0x3c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_Init+0x3c>)
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	0049      	lsls	r1, r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 f810 	bl	8000b98 <HAL_InitTick>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	e001      	b.n	8000b88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fda6 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_InitTick+0x88>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d02b      	beq.n	8000c08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <HAL_InitTick+0x8c>)
 8000bb2:	681c      	ldr	r4, [r3, #0]
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_InitTick+0x88>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	0019      	movs	r1, r3
 8000bba:	23fa      	movs	r3, #250	@ 0xfa
 8000bbc:	0098      	lsls	r0, r3, #2
 8000bbe:	f7ff fa9d 	bl	80000fc <__udivsi3>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	0020      	movs	r0, r4
 8000bc8:	f7ff fa98 	bl	80000fc <__udivsi3>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fd97 	bl	8001702 <HAL_SYSTICK_Config>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d112      	bne.n	8000bfe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d80a      	bhi.n	8000bf4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2301      	movs	r3, #1
 8000be2:	425b      	negs	r3, r3
 8000be4:	2200      	movs	r2, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fd66 	bl	80016b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_InitTick+0x90>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	e00d      	b.n	8000c10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	e008      	b.n	8000c10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfe:	230f      	movs	r3, #15
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e003      	b.n	8000c10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
}
 8000c16:	0018      	movs	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b005      	add	sp, #20
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	18d2      	adds	r2, r2, r3
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000280 	.word	0x20000280

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	@ (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	20000280 	.word	0x20000280

08000c64 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c74:	401a      	ands	r2, r3
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	fe3fffff 	.word	0xfe3fffff

08000c8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	23e0      	movs	r3, #224	@ 0xe0
 8000c9a:	045b      	lsls	r3, r3, #17
 8000c9c:	4013      	ands	r3, r2
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	2104      	movs	r1, #4
 8000cba:	400a      	ands	r2, r1
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	4091      	lsls	r1, r2
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	43d2      	mvns	r2, r2
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2104      	movs	r1, #4
 8000cca:	400b      	ands	r3, r1
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	4099      	lsls	r1, r3
 8000cd0:	000b      	movs	r3, r1
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	2107      	movs	r1, #7
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2104      	movs	r1, #4
 8000d00:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d02:	40da      	lsrs	r2, r3
 8000d04:	0013      	movs	r3, r2
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	211f      	movs	r1, #31
 8000d22:	400a      	ands	r2, r1
 8000d24:	210f      	movs	r1, #15
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	43d2      	mvns	r2, r2
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0e9b      	lsrs	r3, r3, #26
 8000d32:	210f      	movs	r1, #15
 8000d34:	4019      	ands	r1, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	201f      	movs	r0, #31
 8000d3a:	4003      	ands	r3, r0
 8000d3c:	4099      	lsls	r1, r3
 8000d3e:	000b      	movs	r3, r1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b004      	add	sp, #16
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	035b      	lsls	r3, r3, #13
 8000d60:	0b5b      	lsrs	r3, r3, #13
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	0352      	lsls	r2, r2, #13
 8000d82:	0b52      	lsrs	r2, r2, #13
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	401a      	ands	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	400b      	ands	r3, r1
 8000db4:	4904      	ldr	r1, [pc, #16]	@ (8000dc8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000db6:	400b      	ands	r3, r1
 8000db8:	431a      	orrs	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	07ffff00 	.word	0x07ffff00

08000dcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2280      	movs	r2, #128	@ 0x80
 8000dde:	0552      	lsls	r2, r2, #21
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	6fffffe8 	.word	0x6fffffe8

08000df4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	055b      	lsls	r3, r3, #21
 8000e04:	401a      	ands	r2, r3
 8000e06:	2380      	movs	r3, #128	@ 0x80
 8000e08:	055b      	lsls	r3, r3, #21
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d101      	bne.n	8000e12 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <LL_ADC_IsEnabled+0x18>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <LL_ADC_IsEnabled+0x1a>
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d101      	bne.n	8000e56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	231f      	movs	r3, #31
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e17f      	b.n	8001186 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10a      	bne.n	8000ea4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff fc43 	bl	800071c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2254      	movs	r2, #84	@ 0x54
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ffa3 	bl	8000df4 <LL_ADC_IsInternalRegulatorEnabled>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d115      	bne.n	8000ede <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff ff88 	bl	8000dcc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ebc:	4bb4      	ldr	r3, [pc, #720]	@ (8001190 <HAL_ADC_Init+0x330>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	49b4      	ldr	r1, [pc, #720]	@ (8001194 <HAL_ADC_Init+0x334>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff f91a 	bl	80000fc <__udivsi3>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	3301      	adds	r3, #1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ed0:	e002      	b.n	8000ed8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f9      	bne.n	8000ed2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff ff86 	bl	8000df4 <LL_ADC_IsInternalRegulatorEnabled>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d10f      	bne.n	8000f0c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000efc:	2201      	movs	r2, #1
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f04:	231f      	movs	r3, #31
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ff94 	bl	8000e3e <LL_ADC_REG_IsConversionOngoing>
 8000f16:	0003      	movs	r3, r0
 8000f18:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	2210      	movs	r2, #16
 8000f20:	4013      	ands	r3, r2
 8000f22:	d000      	beq.n	8000f26 <HAL_ADC_Init+0xc6>
 8000f24:	e122      	b.n	800116c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d000      	beq.n	8000f2e <HAL_ADC_Init+0xce>
 8000f2c:	e11e      	b.n	800116c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f32:	4a99      	ldr	r2, [pc, #612]	@ (8001198 <HAL_ADC_Init+0x338>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	2202      	movs	r2, #2
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ff6a 	bl	8000e1c <LL_ADC_IsEnabled>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d000      	beq.n	8000f4e <HAL_ADC_Init+0xee>
 8000f4c:	e0ad      	b.n	80010aa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7e1b      	ldrb	r3, [r3, #24]
 8000f56:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000f58:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7e5b      	ldrb	r3, [r3, #25]
 8000f5e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f60:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7e9b      	ldrb	r3, [r3, #26]
 8000f66:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f68:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <HAL_ADC_Init+0x118>
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	015b      	lsls	r3, r3, #5
 8000f76:	e000      	b.n	8000f7a <HAL_ADC_Init+0x11a>
 8000f78:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f7a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f80:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da04      	bge.n	8000f94 <HAL_ADC_Init+0x134>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	e001      	b.n	8000f98 <HAL_ADC_Init+0x138>
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000f98:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	212c      	movs	r1, #44	@ 0x2c
 8000f9e:	5c5b      	ldrb	r3, [r3, r1]
 8000fa0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fa2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2220      	movs	r2, #32
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d115      	bne.n	8000fe0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7e9b      	ldrb	r3, [r3, #26]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	0252      	lsls	r2, r2, #9
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fcc:	2220      	movs	r2, #32
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd8:	2201      	movs	r2, #1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00a      	beq.n	8000ffe <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fec:	23e0      	movs	r3, #224	@ 0xe0
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a65      	ldr	r2, [pc, #404]	@ (800119c <HAL_ADC_Init+0x33c>)
 8001006:	4013      	ands	r3, r2
 8001008:	0019      	movs	r1, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	430a      	orrs	r2, r1
 8001012:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	0f9b      	lsrs	r3, r3, #30
 800101a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001020:	4313      	orrs	r3, r2
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	223c      	movs	r2, #60	@ 0x3c
 800102c:	5c9b      	ldrb	r3, [r3, r2]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d111      	bne.n	8001056 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	0f9b      	lsrs	r3, r3, #30
 8001038:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800103e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001044:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800104a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	4313      	orrs	r3, r2
 8001050:	2201      	movs	r2, #1
 8001052:	4313      	orrs	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a50      	ldr	r2, [pc, #320]	@ (80011a0 <HAL_ADC_Init+0x340>)
 800105e:	4013      	ands	r3, r2
 8001060:	0019      	movs	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	430a      	orrs	r2, r1
 800106a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	23c0      	movs	r3, #192	@ 0xc0
 8001072:	061b      	lsls	r3, r3, #24
 8001074:	429a      	cmp	r2, r3
 8001076:	d018      	beq.n	80010aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	429a      	cmp	r2, r3
 8001082:	d012      	beq.n	80010aa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	061b      	lsls	r3, r3, #24
 800108c:	429a      	cmp	r2, r3
 800108e:	d00c      	beq.n	80010aa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001090:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <HAL_ADC_Init+0x344>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a44      	ldr	r2, [pc, #272]	@ (80011a8 <HAL_ADC_Init+0x348>)
 8001096:	4013      	ands	r3, r2
 8001098:	0019      	movs	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	23f0      	movs	r3, #240	@ 0xf0
 80010a0:	039b      	lsls	r3, r3, #14
 80010a2:	401a      	ands	r2, r3
 80010a4:	4b3f      	ldr	r3, [pc, #252]	@ (80011a4 <HAL_ADC_Init+0x344>)
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b2:	001a      	movs	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f7ff fdf6 	bl	8000ca6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c2:	493a      	ldr	r1, [pc, #232]	@ (80011ac <HAL_ADC_Init+0x34c>)
 80010c4:	001a      	movs	r2, r3
 80010c6:	f7ff fdee 	bl	8000ca6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2110      	movs	r1, #16
 80010de:	4249      	negs	r1, r1
 80010e0:	430a      	orrs	r2, r1
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80010e4:	e018      	b.n	8001118 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	039b      	lsls	r3, r3, #14
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d112      	bne.n	8001118 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	221c      	movs	r2, #28
 8001102:	4013      	ands	r3, r2
 8001104:	2210      	movs	r2, #16
 8001106:	4252      	negs	r2, r2
 8001108:	409a      	lsls	r2, r3
 800110a:	0011      	movs	r1, r2
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fdde 	bl	8000ce0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001124:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800112a:	429a      	cmp	r2, r3
 800112c:	d10b      	bne.n	8001146 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001138:	2203      	movs	r2, #3
 800113a:	4393      	bics	r3, r2
 800113c:	2201      	movs	r2, #1
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001144:	e01c      	b.n	8001180 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114a:	2212      	movs	r2, #18
 800114c:	4393      	bics	r3, r2
 800114e:	2210      	movs	r2, #16
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115a:	2201      	movs	r2, #1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001162:	231f      	movs	r3, #31
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800116a:	e009      	b.n	8001180 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	2210      	movs	r2, #16
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001178:	231f      	movs	r3, #31
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001180:	231f      	movs	r3, #31
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
}
 8001186:	0018      	movs	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	b008      	add	sp, #32
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	20000000 	.word	0x20000000
 8001194:	00030d40 	.word	0x00030d40
 8001198:	fffffefd 	.word	0xfffffefd
 800119c:	ffde0201 	.word	0xffde0201
 80011a0:	1ffffc02 	.word	0x1ffffc02
 80011a4:	40012708 	.word	0x40012708
 80011a8:	ffc3ffff 	.word	0xffc3ffff
 80011ac:	07ffff04 	.word	0x07ffff04

080011b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ba:	2317      	movs	r3, #23
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2254      	movs	r2, #84	@ 0x54
 80011ca:	5c9b      	ldrb	r3, [r3, r2]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x24>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e1c0      	b.n	8001556 <HAL_ADC_ConfigChannel+0x3a6>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2254      	movs	r2, #84	@ 0x54
 80011d8:	2101      	movs	r1, #1
 80011da:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff fe2c 	bl	8000e3e <LL_ADC_REG_IsConversionOngoing>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d000      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x3c>
 80011ea:	e1a3      	b.n	8001534 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d100      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x46>
 80011f4:	e143      	b.n	800147e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	429a      	cmp	r2, r3
 8001200:	d004      	beq.n	800120c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001206:	4ac1      	ldr	r2, [pc, #772]	@ (800150c <HAL_ADC_ConfigChannel+0x35c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d108      	bne.n	800121e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0019      	movs	r1, r3
 8001216:	0010      	movs	r0, r2
 8001218:	f7ff fd99 	bl	8000d4e <LL_ADC_REG_SetSequencerChAdd>
 800121c:	e0c9      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	211f      	movs	r1, #31
 8001228:	400b      	ands	r3, r1
 800122a:	210f      	movs	r1, #15
 800122c:	4099      	lsls	r1, r3
 800122e:	000b      	movs	r3, r1
 8001230:	43db      	mvns	r3, r3
 8001232:	4013      	ands	r3, r2
 8001234:	0019      	movs	r1, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	035b      	lsls	r3, r3, #13
 800123c:	0b5b      	lsrs	r3, r3, #13
 800123e:	d105      	bne.n	800124c <HAL_ADC_ConfigChannel+0x9c>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0e9b      	lsrs	r3, r3, #26
 8001246:	221f      	movs	r2, #31
 8001248:	4013      	ands	r3, r2
 800124a:	e098      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	d000      	beq.n	8001258 <HAL_ADC_ConfigChannel+0xa8>
 8001256:	e091      	b.n	800137c <HAL_ADC_ConfigChannel+0x1cc>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d000      	beq.n	8001264 <HAL_ADC_ConfigChannel+0xb4>
 8001262:	e089      	b.n	8001378 <HAL_ADC_ConfigChannel+0x1c8>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2204      	movs	r2, #4
 800126a:	4013      	ands	r3, r2
 800126c:	d000      	beq.n	8001270 <HAL_ADC_ConfigChannel+0xc0>
 800126e:	e081      	b.n	8001374 <HAL_ADC_ConfigChannel+0x1c4>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2208      	movs	r2, #8
 8001276:	4013      	ands	r3, r2
 8001278:	d000      	beq.n	800127c <HAL_ADC_ConfigChannel+0xcc>
 800127a:	e079      	b.n	8001370 <HAL_ADC_ConfigChannel+0x1c0>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2210      	movs	r2, #16
 8001282:	4013      	ands	r3, r2
 8001284:	d000      	beq.n	8001288 <HAL_ADC_ConfigChannel+0xd8>
 8001286:	e071      	b.n	800136c <HAL_ADC_ConfigChannel+0x1bc>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2220      	movs	r2, #32
 800128e:	4013      	ands	r3, r2
 8001290:	d000      	beq.n	8001294 <HAL_ADC_ConfigChannel+0xe4>
 8001292:	e069      	b.n	8001368 <HAL_ADC_ConfigChannel+0x1b8>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2240      	movs	r2, #64	@ 0x40
 800129a:	4013      	ands	r3, r2
 800129c:	d000      	beq.n	80012a0 <HAL_ADC_ConfigChannel+0xf0>
 800129e:	e061      	b.n	8001364 <HAL_ADC_ConfigChannel+0x1b4>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2280      	movs	r2, #128	@ 0x80
 80012a6:	4013      	ands	r3, r2
 80012a8:	d000      	beq.n	80012ac <HAL_ADC_ConfigChannel+0xfc>
 80012aa:	e059      	b.n	8001360 <HAL_ADC_ConfigChannel+0x1b0>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4013      	ands	r3, r2
 80012b6:	d151      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1ac>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d149      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1a8>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	d141      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1a4>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	4013      	ands	r3, r2
 80012da:	d139      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1a0>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	@ 0x80
 80012e2:	015b      	lsls	r3, r3, #5
 80012e4:	4013      	ands	r3, r2
 80012e6:	d131      	bne.n	800134c <HAL_ADC_ConfigChannel+0x19c>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	019b      	lsls	r3, r3, #6
 80012f0:	4013      	ands	r3, r2
 80012f2:	d129      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x198>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4013      	ands	r3, r2
 80012fe:	d121      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x194>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	4013      	ands	r3, r2
 800130a:	d119      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x190>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	025b      	lsls	r3, r3, #9
 8001314:	4013      	ands	r3, r2
 8001316:	d111      	bne.n	800133c <HAL_ADC_ConfigChannel+0x18c>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d109      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x188>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	02db      	lsls	r3, r3, #11
 800132c:	4013      	ands	r3, r2
 800132e:	d001      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x184>
 8001330:	2312      	movs	r3, #18
 8001332:	e024      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001334:	2300      	movs	r3, #0
 8001336:	e022      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001338:	2311      	movs	r3, #17
 800133a:	e020      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 800133c:	2310      	movs	r3, #16
 800133e:	e01e      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001340:	230f      	movs	r3, #15
 8001342:	e01c      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001344:	230e      	movs	r3, #14
 8001346:	e01a      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001348:	230d      	movs	r3, #13
 800134a:	e018      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 800134c:	230c      	movs	r3, #12
 800134e:	e016      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001350:	230b      	movs	r3, #11
 8001352:	e014      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001354:	230a      	movs	r3, #10
 8001356:	e012      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001358:	2309      	movs	r3, #9
 800135a:	e010      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 800135c:	2308      	movs	r3, #8
 800135e:	e00e      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001360:	2307      	movs	r3, #7
 8001362:	e00c      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001364:	2306      	movs	r3, #6
 8001366:	e00a      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001368:	2305      	movs	r3, #5
 800136a:	e008      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 800136c:	2304      	movs	r3, #4
 800136e:	e006      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001370:	2303      	movs	r3, #3
 8001372:	e004      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_ADC_ConfigChannel+0x1ce>
 800137c:	2300      	movs	r3, #0
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	6852      	ldr	r2, [r2, #4]
 8001382:	201f      	movs	r0, #31
 8001384:	4002      	ands	r2, r0
 8001386:	4093      	lsls	r3, r2
 8001388:	000a      	movs	r2, r1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	d808      	bhi.n	80013b2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	001a      	movs	r2, r3
 80013ae:	f7ff fcae 	bl	8000d0e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	001a      	movs	r2, r3
 80013c0:	f7ff fce8 	bl	8000d94 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db00      	blt.n	80013ce <HAL_ADC_ConfigChannel+0x21e>
 80013cc:	e0bc      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013ce:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff fc5b 	bl	8000c8c <LL_ADC_GetCommonPathInternalCh>
 80013d6:	0003      	movs	r3, r0
 80013d8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a4d      	ldr	r2, [pc, #308]	@ (8001514 <HAL_ADC_ConfigChannel+0x364>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d122      	bne.n	800142a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	041b      	lsls	r3, r3, #16
 80013ea:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013ec:	d11d      	bne.n	800142a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	2280      	movs	r2, #128	@ 0x80
 80013f2:	0412      	lsls	r2, r2, #16
 80013f4:	4313      	orrs	r3, r2
 80013f6:	4a46      	ldr	r2, [pc, #280]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 80013f8:	0019      	movs	r1, r3
 80013fa:	0010      	movs	r0, r2
 80013fc:	f7ff fc32 	bl	8000c64 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001400:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <HAL_ADC_ConfigChannel+0x368>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4945      	ldr	r1, [pc, #276]	@ (800151c <HAL_ADC_ConfigChannel+0x36c>)
 8001406:	0018      	movs	r0, r3
 8001408:	f7fe fe78 	bl	80000fc <__udivsi3>
 800140c:	0003      	movs	r3, r0
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	0013      	movs	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	189b      	adds	r3, r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800141a:	e002      	b.n	8001422 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001428:	e08e      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3c      	ldr	r2, [pc, #240]	@ (8001520 <HAL_ADC_ConfigChannel+0x370>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d10e      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	2380      	movs	r3, #128	@ 0x80
 8001438:	045b      	lsls	r3, r3, #17
 800143a:	4013      	ands	r3, r2
 800143c:	d109      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	0452      	lsls	r2, r2, #17
 8001444:	4313      	orrs	r3, r2
 8001446:	4a32      	ldr	r2, [pc, #200]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 8001448:	0019      	movs	r1, r3
 800144a:	0010      	movs	r0, r2
 800144c:	f7ff fc0a 	bl	8000c64 <LL_ADC_SetCommonPathInternalCh>
 8001450:	e07a      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a33      	ldr	r2, [pc, #204]	@ (8001524 <HAL_ADC_ConfigChannel+0x374>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d000      	beq.n	800145e <HAL_ADC_ConfigChannel+0x2ae>
 800145c:	e074      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	03db      	lsls	r3, r3, #15
 8001464:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001466:	d000      	beq.n	800146a <HAL_ADC_ConfigChannel+0x2ba>
 8001468:	e06e      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	03d2      	lsls	r2, r2, #15
 8001470:	4313      	orrs	r3, r2
 8001472:	4a27      	ldr	r2, [pc, #156]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 8001474:	0019      	movs	r1, r3
 8001476:	0010      	movs	r0, r2
 8001478:	f7ff fbf4 	bl	8000c64 <LL_ADC_SetCommonPathInternalCh>
 800147c:	e064      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	429a      	cmp	r2, r3
 8001488:	d004      	beq.n	8001494 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <HAL_ADC_ConfigChannel+0x35c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d107      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0019      	movs	r1, r3
 800149e:	0010      	movs	r0, r2
 80014a0:	f7ff fc66 	bl	8000d70 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da4d      	bge.n	8001548 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff fbec 	bl	8000c8c <LL_ADC_GetCommonPathInternalCh>
 80014b4:	0003      	movs	r3, r0
 80014b6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a15      	ldr	r2, [pc, #84]	@ (8001514 <HAL_ADC_ConfigChannel+0x364>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d108      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <HAL_ADC_ConfigChannel+0x378>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	4a11      	ldr	r2, [pc, #68]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 80014ca:	0019      	movs	r1, r3
 80014cc:	0010      	movs	r0, r2
 80014ce:	f7ff fbc9 	bl	8000c64 <LL_ADC_SetCommonPathInternalCh>
 80014d2:	e039      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a11      	ldr	r2, [pc, #68]	@ (8001520 <HAL_ADC_ConfigChannel+0x370>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d108      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4a12      	ldr	r2, [pc, #72]	@ (800152c <HAL_ADC_ConfigChannel+0x37c>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f7ff fbbb 	bl	8000c64 <LL_ADC_SetCommonPathInternalCh>
 80014ee:	e02b      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <HAL_ADC_ConfigChannel+0x374>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d126      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <HAL_ADC_ConfigChannel+0x380>)
 80014fe:	4013      	ands	r3, r2
 8001500:	4a03      	ldr	r2, [pc, #12]	@ (8001510 <HAL_ADC_ConfigChannel+0x360>)
 8001502:	0019      	movs	r1, r3
 8001504:	0010      	movs	r0, r2
 8001506:	f7ff fbad 	bl	8000c64 <LL_ADC_SetCommonPathInternalCh>
 800150a:	e01d      	b.n	8001548 <HAL_ADC_ConfigChannel+0x398>
 800150c:	80000004 	.word	0x80000004
 8001510:	40012708 	.word	0x40012708
 8001514:	b0001000 	.word	0xb0001000
 8001518:	20000000 	.word	0x20000000
 800151c:	00030d40 	.word	0x00030d40
 8001520:	b8004000 	.word	0xb8004000
 8001524:	b4002000 	.word	0xb4002000
 8001528:	ff7fffff 	.word	0xff7fffff
 800152c:	feffffff 	.word	0xfeffffff
 8001530:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	2220      	movs	r2, #32
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001540:	2317      	movs	r3, #23
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2254      	movs	r2, #84	@ 0x54
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001550:	2317      	movs	r3, #23
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	781b      	ldrb	r3, [r3, #0]
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b006      	add	sp, #24
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b7f      	cmp	r3, #127	@ 0x7f
 8001572:	d809      	bhi.n	8001588 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001574:	1dfb      	adds	r3, r7, #7
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	001a      	movs	r2, r3
 800157a:	231f      	movs	r3, #31
 800157c:	401a      	ands	r2, r3
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_EnableIRQ+0x30>)
 8001580:	2101      	movs	r1, #1
 8001582:	4091      	lsls	r1, r2
 8001584:	000a      	movs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	0002      	movs	r2, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a8:	d828      	bhi.n	80015fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <__NVIC_SetPriority+0xd4>)
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	33c0      	adds	r3, #192	@ 0xc0
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	589b      	ldr	r3, [r3, r2]
 80015ba:	1dfa      	adds	r2, r7, #7
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	0011      	movs	r1, r2
 80015c0:	2203      	movs	r2, #3
 80015c2:	400a      	ands	r2, r1
 80015c4:	00d2      	lsls	r2, r2, #3
 80015c6:	21ff      	movs	r1, #255	@ 0xff
 80015c8:	4091      	lsls	r1, r2
 80015ca:	000a      	movs	r2, r1
 80015cc:	43d2      	mvns	r2, r2
 80015ce:	401a      	ands	r2, r3
 80015d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	22ff      	movs	r2, #255	@ 0xff
 80015d8:	401a      	ands	r2, r3
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0018      	movs	r0, r3
 80015e0:	2303      	movs	r3, #3
 80015e2:	4003      	ands	r3, r0
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015e8:	481f      	ldr	r0, [pc, #124]	@ (8001668 <__NVIC_SetPriority+0xd4>)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	430a      	orrs	r2, r1
 80015f4:	33c0      	adds	r3, #192	@ 0xc0
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015fa:	e031      	b.n	8001660 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <__NVIC_SetPriority+0xd8>)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0019      	movs	r1, r3
 8001604:	230f      	movs	r3, #15
 8001606:	400b      	ands	r3, r1
 8001608:	3b08      	subs	r3, #8
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3306      	adds	r3, #6
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	3304      	adds	r3, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	1dfa      	adds	r2, r7, #7
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	0011      	movs	r1, r2
 800161c:	2203      	movs	r2, #3
 800161e:	400a      	ands	r2, r1
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	21ff      	movs	r1, #255	@ 0xff
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	22ff      	movs	r2, #255	@ 0xff
 8001634:	401a      	ands	r2, r3
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	2303      	movs	r3, #3
 800163e:	4003      	ands	r3, r0
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <__NVIC_SetPriority+0xd8>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	001c      	movs	r4, r3
 800164c:	230f      	movs	r3, #15
 800164e:	4023      	ands	r3, r4
 8001650:	3b08      	subs	r3, #8
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	430a      	orrs	r2, r1
 8001656:	3306      	adds	r3, #6
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	18c3      	adds	r3, r0, r3
 800165c:	3304      	adds	r3, #4
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b003      	add	sp, #12
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	045b      	lsls	r3, r3, #17
 8001680:	429a      	cmp	r2, r3
 8001682:	d301      	bcc.n	8001688 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001684:	2301      	movs	r3, #1
 8001686:	e010      	b.n	80016aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <SysTick_Config+0x44>)
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	3a01      	subs	r2, #1
 800168e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001690:	2301      	movs	r3, #1
 8001692:	425b      	negs	r3, r3
 8001694:	2103      	movs	r1, #3
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff ff7c 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SysTick_Config+0x44>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SysTick_Config+0x44>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	210f      	movs	r1, #15
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	1c02      	adds	r2, r0, #0
 80016c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	0002      	movs	r2, r0
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff ff33 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff ffaf 	bl	8001670 <SysTick_Config>
 8001712:	0003      	movs	r3, r0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e077      	b.n	800181e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3d      	ldr	r2, [pc, #244]	@ (8001828 <HAL_DMA_Init+0x10c>)
 8001734:	4694      	mov	ip, r2
 8001736:	4463      	add	r3, ip
 8001738:	2114      	movs	r1, #20
 800173a:	0018      	movs	r0, r3
 800173c:	f7fe fcde 	bl	80000fc <__udivsi3>
 8001740:	0003      	movs	r3, r0
 8001742:	009a      	lsls	r2, r3, #2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2225      	movs	r2, #37	@ 0x25
 800174c:	2102      	movs	r1, #2
 800174e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4934      	ldr	r1, [pc, #208]	@ (800182c <HAL_DMA_Init+0x110>)
 800175c:	400a      	ands	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 f8fb 	bl	8001994 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	01db      	lsls	r3, r3, #7
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d102      	bne.n	80017b0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b8:	213f      	movs	r1, #63	@ 0x3f
 80017ba:	400a      	ands	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d011      	beq.n	80017f4 <HAL_DMA_Init+0xd8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d80d      	bhi.n	80017f4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f906 	bl	80019ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	e008      	b.n	8001806 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2225      	movs	r2, #37	@ 0x25
 8001810:	2101      	movs	r1, #1
 8001812:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	@ 0x24
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	bffdfff8 	.word	0xbffdfff8
 800182c:	ffff800f 	.word	0xffff800f

08001830 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001838:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	221c      	movs	r2, #28
 800184c:	4013      	ands	r3, r2
 800184e:	2204      	movs	r2, #4
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	d027      	beq.n	80018aa <HAL_DMA_IRQHandler+0x7a>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2204      	movs	r2, #4
 800185e:	4013      	ands	r3, r2
 8001860:	d023      	beq.n	80018aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2220      	movs	r2, #32
 800186a:	4013      	ands	r3, r2
 800186c:	d107      	bne.n	800187e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2104      	movs	r1, #4
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800187e:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	221c      	movs	r2, #28
 8001888:	4013      	ands	r3, r2
 800188a:	2204      	movs	r2, #4
 800188c:	409a      	lsls	r2, r3
 800188e:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 8001890:	430a      	orrs	r2, r1
 8001892:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	2b00      	cmp	r3, #0
 800189a:	d100      	bne.n	800189e <HAL_DMA_IRQHandler+0x6e>
 800189c:	e073      	b.n	8001986 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	0010      	movs	r0, r2
 80018a6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80018a8:	e06d      	b.n	8001986 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	221c      	movs	r2, #28
 80018b0:	4013      	ands	r3, r2
 80018b2:	2202      	movs	r2, #2
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	d02e      	beq.n	800191c <HAL_DMA_IRQHandler+0xec>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d02a      	beq.n	800191c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2220      	movs	r2, #32
 80018ce:	4013      	ands	r3, r2
 80018d0:	d10b      	bne.n	80018ea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	210a      	movs	r1, #10
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2225      	movs	r2, #37	@ 0x25
 80018e6:	2101      	movs	r1, #1
 80018e8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80018ea:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	221c      	movs	r2, #28
 80018f4:	4013      	ands	r3, r2
 80018f6:	2202      	movs	r2, #2
 80018f8:	409a      	lsls	r2, r3
 80018fa:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	@ 0x24
 8001904:	2100      	movs	r1, #0
 8001906:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d03a      	beq.n	8001986 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	0010      	movs	r0, r2
 8001918:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800191a:	e034      	b.n	8001986 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	221c      	movs	r2, #28
 8001922:	4013      	ands	r3, r2
 8001924:	2208      	movs	r2, #8
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	d02b      	beq.n	8001988 <HAL_DMA_IRQHandler+0x158>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2208      	movs	r2, #8
 8001934:	4013      	ands	r3, r2
 8001936:	d027      	beq.n	8001988 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	210e      	movs	r1, #14
 8001944:	438a      	bics	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	221c      	movs	r2, #28
 8001952:	4013      	ands	r3, r2
 8001954:	2201      	movs	r2, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_DMA_IRQHandler+0x160>)
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2225      	movs	r2, #37	@ 0x25
 8001968:	2101      	movs	r1, #1
 800196a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	@ 0x24
 8001970:	2100      	movs	r1, #0
 8001972:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	0010      	movs	r0, r2
 8001984:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	46c0      	nop			@ (mov r8, r8)
}
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020000 	.word	0x40020000

08001994 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80019a4:	4694      	mov	ip, r2
 80019a6:	4463      	add	r3, ip
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	001a      	movs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	001a      	movs	r2, r3
 80019b6:	23ff      	movs	r3, #255	@ 0xff
 80019b8:	4013      	ands	r3, r2
 80019ba:	3b08      	subs	r3, #8
 80019bc:	2114      	movs	r1, #20
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fb9c 	bl	80000fc <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80019cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	221f      	movs	r2, #31
 80019d2:	4013      	ands	r3, r2
 80019d4:	2201      	movs	r2, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b004      	add	sp, #16
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	10008200 	.word	0x10008200
 80019e8:	40020880 	.word	0x40020880

080019ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	223f      	movs	r2, #63	@ 0x3f
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a02:	4694      	mov	ip, r2
 8001a04:	4463      	add	r3, ip
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	001a      	movs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b004      	add	sp, #16
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	1000823f 	.word	0x1000823f
 8001a30:	40020940 	.word	0x40020940

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e147      	b.n	8001cd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4091      	lsls	r1, r2
 8001a4e:	000a      	movs	r2, r1
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d100      	bne.n	8001a5c <HAL_GPIO_Init+0x28>
 8001a5a:	e138      	b.n	8001cce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x40>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	43da      	mvns	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2203      	movs	r2, #3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	58d3      	ldr	r3, [r2, r3]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4013      	ands	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2107      	movs	r1, #7
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	0013      	movs	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	6939      	ldr	r1, [r7, #16]
 8001b64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	43da      	mvns	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	401a      	ands	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	23c0      	movs	r3, #192	@ 0xc0
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_GPIO_Init+0x174>
 8001ba6:	e092      	b.n	8001cce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ba8:	4a50      	ldr	r2, [pc, #320]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3318      	adds	r3, #24
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	589b      	ldr	r3, [r3, r2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	4013      	ands	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	23a0      	movs	r3, #160	@ 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x1ca>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a45      	ldr	r2, [pc, #276]	@ (8001cf0 <HAL_GPIO_Init+0x2bc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x1c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a44      	ldr	r2, [pc, #272]	@ (8001cf4 <HAL_GPIO_Init+0x2c0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x1c2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a43      	ldr	r2, [pc, #268]	@ (8001cf8 <HAL_GPIO_Init+0x2c4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x1be>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e004      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x1cc>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	2103      	movs	r1, #3
 8001c04:	400a      	ands	r2, r1
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	4093      	lsls	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c10:	4936      	ldr	r1, [pc, #216]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3318      	adds	r3, #24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	035b      	lsls	r3, r3, #13
 8001c36:	4013      	ands	r3, r2
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	039b      	lsls	r3, r3, #14
 8001c60:	4013      	ands	r3, r2
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c72:	4a1e      	ldr	r2, [pc, #120]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c74:	2384      	movs	r3, #132	@ 0x84
 8001c76:	58d3      	ldr	r3, [r2, r3]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c98:	4914      	ldr	r1, [pc, #80]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001c9a:	2284      	movs	r2, #132	@ 0x84
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	58d3      	ldr	r3, [r2, r3]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	025b      	lsls	r3, r3, #9
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc6:	4909      	ldr	r1, [pc, #36]	@ (8001cec <HAL_GPIO_Init+0x2b8>)
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	40da      	lsrs	r2, r3
 8001cdc:	1e13      	subs	r3, r2, #0
 8001cde:	d000      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ae>
 8001ce0:	e6b0      	b.n	8001a44 <HAL_GPIO_Init+0x10>
  }
}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b006      	add	sp, #24
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	50000400 	.word	0x50000400
 8001cf4:	50000800 	.word	0x50000800
 8001cf8:	50000c00 	.word	0x50000c00

08001cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08f      	b.n	8001e2e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2241      	movs	r2, #65	@ 0x41
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2240      	movs	r2, #64	@ 0x40
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7fe fd6b 	bl	8000800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2241      	movs	r2, #65	@ 0x41
 8001d2e:	2124      	movs	r1, #36	@ 0x24
 8001d30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	438a      	bics	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	493b      	ldr	r1, [pc, #236]	@ (8001e38 <HAL_I2C_Init+0x13c>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4938      	ldr	r1, [pc, #224]	@ (8001e3c <HAL_I2C_Init+0x140>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d108      	bne.n	8001d7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0209      	lsls	r1, r1, #8
 8001d74:	430a      	orrs	r2, r1
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	e007      	b.n	8001d8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2184      	movs	r1, #132	@ 0x84
 8001d84:	0209      	lsls	r1, r1, #8
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d109      	bne.n	8001da6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0109      	lsls	r1, r1, #4
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e007      	b.n	8001db6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4923      	ldr	r1, [pc, #140]	@ (8001e40 <HAL_I2C_Init+0x144>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4920      	ldr	r1, [pc, #128]	@ (8001e44 <HAL_I2C_Init+0x148>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	491a      	ldr	r1, [pc, #104]	@ (8001e3c <HAL_I2C_Init+0x140>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	431a      	orrs	r2, r3
 8001de0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69d9      	ldr	r1, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2241      	movs	r2, #65	@ 0x41
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2242      	movs	r2, #66	@ 0x42
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	f0ffffff 	.word	0xf0ffffff
 8001e3c:	ffff7fff 	.word	0xffff7fff
 8001e40:	fffff7ff 	.word	0xfffff7ff
 8001e44:	02008000 	.word	0x02008000

08001e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2241      	movs	r2, #65	@ 0x41
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d138      	bne.n	8001ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2240      	movs	r2, #64	@ 0x40
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e032      	b.n	8001ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2240      	movs	r2, #64	@ 0x40
 8001e70:	2101      	movs	r1, #1
 8001e72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2241      	movs	r2, #65	@ 0x41
 8001e78:	2124      	movs	r1, #36	@ 0x24
 8001e7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	438a      	bics	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4911      	ldr	r1, [pc, #68]	@ (8001edc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2241      	movs	r2, #65	@ 0x41
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2240      	movs	r2, #64	@ 0x40
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	ffffefff 	.word	0xffffefff

08001ee0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2241      	movs	r2, #65	@ 0x41
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d139      	bne.n	8001f6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2240      	movs	r2, #64	@ 0x40
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e033      	b.n	8001f6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2240      	movs	r2, #64	@ 0x40
 8001f08:	2101      	movs	r1, #1
 8001f0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2241      	movs	r2, #65	@ 0x41
 8001f10:	2124      	movs	r1, #36	@ 0x24
 8001f12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2241      	movs	r2, #65	@ 0x41
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2240      	movs	r2, #64	@ 0x40
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
  }
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	fffff0ff 	.word	0xfffff0ff

08001f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d11f      	bne.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	189b      	adds	r3, r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4912      	ldr	r1, [pc, #72]	@ (8001ff4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7fe f8a6 	bl	80000fc <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	e008      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e001      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e009      	b.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d0ed      	beq.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	fffff9ff 	.word	0xfffff9ff
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	000f4240 	.word	0x000f4240

08001ff8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ffc:	4b03      	ldr	r3, [pc, #12]	@ (800200c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	23e0      	movs	r3, #224	@ 0xe0
 8002002:	01db      	lsls	r3, r3, #7
 8002004:	4013      	ands	r3, r2
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e2f3      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_RCC_OscConfig+0x1e>
 800202c:	e07c      	b.n	8002128 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202e:	4bc3      	ldr	r3, [pc, #780]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2238      	movs	r2, #56	@ 0x38
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002038:	4bc0      	ldr	r3, [pc, #768]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2203      	movs	r2, #3
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0x3e>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d002      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4bb9      	ldr	r3, [pc, #740]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	4013      	ands	r3, r2
 800205e:	d062      	beq.n	8002126 <HAL_RCC_OscConfig+0x116>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d15e      	bne.n	8002126 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e2ce      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x78>
 8002078:	4bb0      	ldr	r3, [pc, #704]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4baf      	ldr	r3, [pc, #700]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	0249      	lsls	r1, r1, #9
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e020      	b.n	80020ca <HAL_RCC_OscConfig+0xba>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	23a0      	movs	r3, #160	@ 0xa0
 800208e:	02db      	lsls	r3, r3, #11
 8002090:	429a      	cmp	r2, r3
 8002092:	d10e      	bne.n	80020b2 <HAL_RCC_OscConfig+0xa2>
 8002094:	4ba9      	ldr	r3, [pc, #676]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4ba8      	ldr	r3, [pc, #672]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	02c9      	lsls	r1, r1, #11
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	4ba6      	ldr	r3, [pc, #664]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4ba5      	ldr	r3, [pc, #660]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	0249      	lsls	r1, r1, #9
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0xba>
 80020b2:	4ba2      	ldr	r3, [pc, #648]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4ba1      	ldr	r3, [pc, #644]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020b8:	49a1      	ldr	r1, [pc, #644]	@ (8002340 <HAL_RCC_OscConfig+0x330>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	4b9f      	ldr	r3, [pc, #636]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b9e      	ldr	r3, [pc, #632]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020c4:	499f      	ldr	r1, [pc, #636]	@ (8002344 <HAL_RCC_OscConfig+0x334>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d014      	beq.n	80020fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7fe fdbd 	bl	8000c50 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fdb8 	bl	8000c50 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e28d      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4b93      	ldr	r3, [pc, #588]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xcc>
 80020fa:	e015      	b.n	8002128 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fda8 	bl	8000c50 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002106:	f7fe fda3 	bl	8000c50 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	@ 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e278      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002118:	4b88      	ldr	r3, [pc, #544]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	029b      	lsls	r3, r3, #10
 8002120:	4013      	ands	r3, r2
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0xf6>
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d100      	bne.n	8002134 <HAL_RCC_OscConfig+0x124>
 8002132:	e099      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002134:	4b81      	ldr	r3, [pc, #516]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2238      	movs	r2, #56	@ 0x38
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213e:	4b7f      	ldr	r3, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x144>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d002      	beq.n	800215a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d135      	bne.n	80021c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215a:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4013      	ands	r3, r2
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x162>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e24b      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a74      	ldr	r2, [pc, #464]	@ (8002348 <HAL_RCC_OscConfig+0x338>)
 8002178:	4013      	ands	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	021a      	lsls	r2, r3, #8
 8002182:	4b6e      	ldr	r3, [pc, #440]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002184:	430a      	orrs	r2, r1
 8002186:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d112      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800218e:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6e      	ldr	r2, [pc, #440]	@ (800234c <HAL_RCC_OscConfig+0x33c>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	4b67      	ldr	r3, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021a2:	4b66      	ldr	r3, [pc, #408]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0adb      	lsrs	r3, r3, #11
 80021a8:	2207      	movs	r2, #7
 80021aa:	4013      	ands	r3, r2
 80021ac:	4a68      	ldr	r2, [pc, #416]	@ (8002350 <HAL_RCC_OscConfig+0x340>)
 80021ae:	40da      	lsrs	r2, r3
 80021b0:	4b68      	ldr	r3, [pc, #416]	@ (8002354 <HAL_RCC_OscConfig+0x344>)
 80021b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021b4:	4b68      	ldr	r3, [pc, #416]	@ (8002358 <HAL_RCC_OscConfig+0x348>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fe fced 	bl	8000b98 <HAL_InitTick>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d051      	beq.n	8002266 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e221      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d030      	beq.n	8002230 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021ce:	4b5b      	ldr	r3, [pc, #364]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5e      	ldr	r2, [pc, #376]	@ (800234c <HAL_RCC_OscConfig+0x33c>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	4b57      	ldr	r3, [pc, #348]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021e2:	4b56      	ldr	r3, [pc, #344]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b55      	ldr	r3, [pc, #340]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	0049      	lsls	r1, r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fd2e 	bl	8000c50 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe fd29 	bl	8000c50 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1fe      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220c:	4b4b      	ldr	r3, [pc, #300]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b48      	ldr	r3, [pc, #288]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a4a      	ldr	r2, [pc, #296]	@ (8002348 <HAL_RCC_OscConfig+0x338>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	021a      	lsls	r2, r3, #8
 8002228:	4b44      	ldr	r3, [pc, #272]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	e01b      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002230:	4b42      	ldr	r3, [pc, #264]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b41      	ldr	r3, [pc, #260]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002236:	4949      	ldr	r1, [pc, #292]	@ (800235c <HAL_RCC_OscConfig+0x34c>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fd08 	bl	8000c50 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fd03 	bl	8000c50 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1d8      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002258:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4013      	ands	r3, r2
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x236>
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002266:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	4013      	ands	r3, r2
 8002270:	d047      	beq.n	8002302 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002272:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	@ 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	2b18      	cmp	r3, #24
 800227c:	d10a      	bne.n	8002294 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d03c      	beq.n	8002302 <HAL_RCC_OscConfig+0x2f2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d138      	bne.n	8002302 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e1ba      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 800229e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022a0:	4b26      	ldr	r3, [pc, #152]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fcd2 	bl	8000c50 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b2:	f7fe fccd 	bl	8000c50 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1a2      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d0f1      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2a2>
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80022d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	438a      	bics	r2, r1
 80022da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fcb8 	bl	8000c50 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe fcb3 	bl	8000c50 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e188      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d1f1      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCC_OscConfig+0x2fe>
 800230c:	e0c6      	b.n	800249c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	231f      	movs	r3, #31
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2238      	movs	r2, #56	@ 0x38
 800231c:	4013      	ands	r3, r2
 800231e:	2b20      	cmp	r3, #32
 8002320:	d11e      	bne.n	8002360 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_RCC_OscConfig+0x32c>)
 8002324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d100      	bne.n	800232e <HAL_RCC_OscConfig+0x31e>
 800232c:	e0b6      	b.n	800249c <HAL_RCC_OscConfig+0x48c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d000      	beq.n	8002338 <HAL_RCC_OscConfig+0x328>
 8002336:	e0b1      	b.n	800249c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e166      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
 800233c:	40021000 	.word	0x40021000
 8002340:	fffeffff 	.word	0xfffeffff
 8002344:	fffbffff 	.word	0xfffbffff
 8002348:	ffff80ff 	.word	0xffff80ff
 800234c:	ffffc7ff 	.word	0xffffc7ff
 8002350:	00f42400 	.word	0x00f42400
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004
 800235c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002360:	4bac      	ldr	r3, [pc, #688]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	4013      	ands	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x360>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x362>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4ba7      	ldr	r3, [pc, #668]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800237a:	4ba6      	ldr	r3, [pc, #664]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	0549      	lsls	r1, r1, #21
 8002380:	430a      	orrs	r2, r1
 8002382:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002384:	4ba3      	ldr	r3, [pc, #652]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	055b      	lsls	r3, r3, #21
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002392:	231f      	movs	r3, #31
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	4b9f      	ldr	r3, [pc, #636]	@ (8002618 <HAL_RCC_OscConfig+0x608>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a6:	4b9c      	ldr	r3, [pc, #624]	@ (8002618 <HAL_RCC_OscConfig+0x608>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b9b      	ldr	r3, [pc, #620]	@ (8002618 <HAL_RCC_OscConfig+0x608>)
 80023ac:	2180      	movs	r1, #128	@ 0x80
 80023ae:	0049      	lsls	r1, r1, #1
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fc4c 	bl	8000c50 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe fc47 	bl	8000c50 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e11c      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d0:	4b91      	ldr	r3, [pc, #580]	@ (8002618 <HAL_RCC_OscConfig+0x608>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3e2>
 80023e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80023e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	430a      	orrs	r2, r1
 80023ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x404>
 80023fa:	4b86      	ldr	r3, [pc, #536]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80023fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023fe:	4b85      	ldr	r3, [pc, #532]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002400:	2104      	movs	r1, #4
 8002402:	430a      	orrs	r2, r1
 8002404:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002406:	4b83      	ldr	r3, [pc, #524]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002408:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800240a:	4b82      	ldr	r3, [pc, #520]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800240c:	2101      	movs	r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
 8002414:	4b7f      	ldr	r3, [pc, #508]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002416:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002418:	4b7e      	ldr	r3, [pc, #504]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800241a:	2101      	movs	r1, #1
 800241c:	438a      	bics	r2, r1
 800241e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002420:	4b7c      	ldr	r3, [pc, #496]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002424:	4b7b      	ldr	r3, [pc, #492]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002426:	2104      	movs	r1, #4
 8002428:	438a      	bics	r2, r1
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d014      	beq.n	800245e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fc0c 	bl	8000c50 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243c:	e009      	b.n	8002452 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fc07 	bl	8000c50 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a74      	ldr	r2, [pc, #464]	@ (800261c <HAL_RCC_OscConfig+0x60c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0db      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b70      	ldr	r3, [pc, #448]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x42e>
 800245c:	e013      	b.n	8002486 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fbf7 	bl	8000c50 <HAL_GetTick>
 8002462:	0003      	movs	r3, r0
 8002464:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002466:	e009      	b.n	800247c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fbf2 	bl	8000c50 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	4a6a      	ldr	r2, [pc, #424]	@ (800261c <HAL_RCC_OscConfig+0x60c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0c6      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	4b65      	ldr	r3, [pc, #404]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002486:	231f      	movs	r3, #31
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b60      	ldr	r3, [pc, #384]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002494:	4b5f      	ldr	r3, [pc, #380]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002496:	4962      	ldr	r1, [pc, #392]	@ (8002620 <HAL_RCC_OscConfig+0x610>)
 8002498:	400a      	ands	r2, r1
 800249a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x496>
 80024a4:	e0b0      	b.n	8002608 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2238      	movs	r2, #56	@ 0x38
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d100      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4a4>
 80024b2:	e078      	b.n	80025a6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d153      	bne.n	8002564 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b55      	ldr	r3, [pc, #340]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b54      	ldr	r3, [pc, #336]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80024c2:	4958      	ldr	r1, [pc, #352]	@ (8002624 <HAL_RCC_OscConfig+0x614>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fbc2 	bl	8000c50 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fbbd 	bl	8000c50 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e092      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	@ 0x80
 80024ea:	049b      	lsls	r3, r3, #18
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b48      	ldr	r3, [pc, #288]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002628 <HAL_RCC_OscConfig+0x618>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	431a      	orrs	r2, r3
 8002518:	4b3e      	ldr	r3, [pc, #248]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800251a:	430a      	orrs	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251e:	4b3d      	ldr	r3, [pc, #244]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b3c      	ldr	r3, [pc, #240]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	0449      	lsls	r1, r1, #17
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800252c:	4b39      	ldr	r3, [pc, #228]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	0549      	lsls	r1, r1, #21
 8002536:	430a      	orrs	r2, r1
 8002538:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fb89 	bl	8000c50 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fb84 	bl	8000c50 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e059      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	049b      	lsls	r3, r3, #18
 800255e:	4013      	ands	r3, r2
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x534>
 8002562:	e051      	b.n	8002608 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800256a:	492e      	ldr	r1, [pc, #184]	@ (8002624 <HAL_RCC_OscConfig+0x614>)
 800256c:	400a      	ands	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fb6e 	bl	8000c50 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fb69 	bl	8000c50 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e03e      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	049b      	lsls	r3, r3, #18
 8002594:	4013      	ands	r3, r2
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002598:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 800259e:	4923      	ldr	r1, [pc, #140]	@ (800262c <HAL_RCC_OscConfig+0x61c>)
 80025a0:	400a      	ands	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e030      	b.n	8002608 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e02b      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025b2:	4b18      	ldr	r3, [pc, #96]	@ (8002614 <HAL_RCC_OscConfig+0x604>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2203      	movs	r2, #3
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d11e      	bne.n	8002604 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2270      	movs	r2, #112	@ 0x70
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d117      	bne.n	8002604 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	23fe      	movs	r3, #254	@ 0xfe
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10e      	bne.n	8002604 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	23f8      	movs	r3, #248	@ 0xf8
 80025ea:	039b      	lsls	r3, r3, #14
 80025ec:	401a      	ands	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	0f5b      	lsrs	r3, r3, #29
 80025fa:	075a      	lsls	r2, r3, #29
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b008      	add	sp, #32
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
 800261c:	00001388 	.word	0x00001388
 8002620:	efffffff 	.word	0xefffffff
 8002624:	feffffff 	.word	0xfeffffff
 8002628:	1fc1808c 	.word	0x1fc1808c
 800262c:	effefffc 	.word	0xeffefffc

08002630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0e9      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b76      	ldr	r3, [pc, #472]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2207      	movs	r2, #7
 800264a:	4013      	ands	r3, r2
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d91e      	bls.n	8002690 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b73      	ldr	r3, [pc, #460]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2207      	movs	r2, #7
 8002658:	4393      	bics	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	4b70      	ldr	r3, [pc, #448]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002664:	f7fe faf4 	bl	8000c50 <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800266c:	e009      	b.n	8002682 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266e:	f7fe faef 	bl	8000c50 <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	4a6a      	ldr	r2, [pc, #424]	@ (8002824 <HAL_RCC_ClockConfig+0x1f4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0ca      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002682:	4b67      	ldr	r3, [pc, #412]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2207      	movs	r2, #7
 8002688:	4013      	ands	r3, r2
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d015      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2204      	movs	r2, #4
 80026a0:	4013      	ands	r3, r2
 80026a2:	d006      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026a4:	4b60      	ldr	r3, [pc, #384]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80026aa:	21e0      	movs	r1, #224	@ 0xe0
 80026ac:	01c9      	lsls	r1, r1, #7
 80026ae:	430a      	orrs	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4a5d      	ldr	r2, [pc, #372]	@ (800282c <HAL_RCC_ClockConfig+0x1fc>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	d057      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	4013      	ands	r3, r2
 80026e2:	d12b      	bne.n	800273c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e097      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	049b      	lsls	r3, r3, #18
 80026f8:	4013      	ands	r3, r2
 80026fa:	d11f      	bne.n	800273c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e08b      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4013      	ands	r3, r2
 8002712:	d113      	bne.n	800273c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e07f      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d106      	bne.n	800272e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002720:	4b41      	ldr	r3, [pc, #260]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002724:	2202      	movs	r2, #2
 8002726:	4013      	ands	r3, r2
 8002728:	d108      	bne.n	800273c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e074      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272e:	4b3e      	ldr	r3, [pc, #248]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	2202      	movs	r2, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e06d      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800273c:	4b3a      	ldr	r3, [pc, #232]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2207      	movs	r2, #7
 8002742:	4393      	bics	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 800274c:	430a      	orrs	r2, r1
 800274e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fa7e 	bl	8000c50 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002758:	e009      	b.n	800276e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275a:	f7fe fa79 	bl	8000c50 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	4a2f      	ldr	r2, [pc, #188]	@ (8002824 <HAL_RCC_ClockConfig+0x1f4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e054      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2238      	movs	r2, #56	@ 0x38
 8002774:	401a      	ands	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	429a      	cmp	r2, r3
 800277e:	d1ec      	bne.n	800275a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2207      	movs	r2, #7
 8002786:	4013      	ands	r3, r2
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d21e      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2207      	movs	r2, #7
 8002794:	4393      	bics	r3, r2
 8002796:	0019      	movs	r1, r3
 8002798:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027a0:	f7fe fa56 	bl	8000c50 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027a8:	e009      	b.n	80027be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027aa:	f7fe fa51 	bl	8000c50 <HAL_GetTick>
 80027ae:	0002      	movs	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_RCC_ClockConfig+0x1f4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e02c      	b.n	8002818 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027be:	4b18      	ldr	r3, [pc, #96]	@ (8002820 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <HAL_RCC_ClockConfig+0x200>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027ea:	f000 f829 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027ee:	0001      	movs	r1, r0
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	220f      	movs	r2, #15
 80027f8:	401a      	ands	r2, r3
 80027fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <HAL_RCC_ClockConfig+0x204>)
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	58d3      	ldr	r3, [r2, r3]
 8002800:	221f      	movs	r2, #31
 8002802:	4013      	ands	r3, r2
 8002804:	000a      	movs	r2, r1
 8002806:	40da      	lsrs	r2, r3
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_ClockConfig+0x208>)
 800280a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_ClockConfig+0x20c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0018      	movs	r0, r3
 8002812:	f7fe f9c1 	bl	8000b98 <HAL_InitTick>
 8002816:	0003      	movs	r3, r0
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40022000 	.word	0x40022000
 8002824:	00001388 	.word	0x00001388
 8002828:	40021000 	.word	0x40021000
 800282c:	fffff0ff 	.word	0xfffff0ff
 8002830:	ffff8fff 	.word	0xffff8fff
 8002834:	08003904 	.word	0x08003904
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	4b3c      	ldr	r3, [pc, #240]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2238      	movs	r2, #56	@ 0x38
 800284c:	4013      	ands	r3, r2
 800284e:	d10f      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002850:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0adb      	lsrs	r3, r3, #11
 8002856:	2207      	movs	r2, #7
 8002858:	4013      	ands	r3, r2
 800285a:	2201      	movs	r2, #1
 800285c:	409a      	lsls	r2, r3
 800285e:	0013      	movs	r3, r2
 8002860:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	4835      	ldr	r0, [pc, #212]	@ (800293c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002866:	f7fd fc49 	bl	80000fc <__udivsi3>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e05d      	b.n	800292c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002870:	4b31      	ldr	r3, [pc, #196]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2238      	movs	r2, #56	@ 0x38
 8002876:	4013      	ands	r3, r2
 8002878:	2b08      	cmp	r3, #8
 800287a:	d102      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800287c:	4b30      	ldr	r3, [pc, #192]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x100>)
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e054      	b.n	800292c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002882:	4b2d      	ldr	r3, [pc, #180]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2238      	movs	r2, #56	@ 0x38
 8002888:	4013      	ands	r3, r2
 800288a:	2b10      	cmp	r3, #16
 800288c:	d138      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800288e:	4b2a      	ldr	r3, [pc, #168]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2203      	movs	r2, #3
 8002894:	4013      	ands	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002898:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	3301      	adds	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4824      	ldr	r0, [pc, #144]	@ (8002940 <HAL_RCC_GetSysClockFreq+0x100>)
 80028b0:	f7fd fc24 	bl	80000fc <__udivsi3>
 80028b4:	0003      	movs	r3, r0
 80028b6:	0019      	movs	r1, r3
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	227f      	movs	r2, #127	@ 0x7f
 80028c0:	4013      	ands	r3, r2
 80028c2:	434b      	muls	r3, r1
 80028c4:	617b      	str	r3, [r7, #20]
        break;
 80028c6:	e00d      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	481c      	ldr	r0, [pc, #112]	@ (800293c <HAL_RCC_GetSysClockFreq+0xfc>)
 80028cc:	f7fd fc16 	bl	80000fc <__udivsi3>
 80028d0:	0003      	movs	r3, r0
 80028d2:	0019      	movs	r1, r3
 80028d4:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	227f      	movs	r2, #127	@ 0x7f
 80028dc:	4013      	ands	r3, r2
 80028de:	434b      	muls	r3, r1
 80028e0:	617b      	str	r3, [r7, #20]
        break;
 80028e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80028e4:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0f5b      	lsrs	r3, r3, #29
 80028ea:	2207      	movs	r2, #7
 80028ec:	4013      	ands	r3, r2
 80028ee:	3301      	adds	r3, #1
 80028f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	6978      	ldr	r0, [r7, #20]
 80028f6:	f7fd fc01 	bl	80000fc <__udivsi3>
 80028fa:	0003      	movs	r3, r0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e015      	b.n	800292c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002900:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2238      	movs	r2, #56	@ 0x38
 8002906:	4013      	ands	r3, r2
 8002908:	2b20      	cmp	r3, #32
 800290a:	d103      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e00b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2238      	movs	r2, #56	@ 0x38
 800291a:	4013      	ands	r3, r2
 800291c:	2b18      	cmp	r3, #24
 800291e:	d103      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002920:	23fa      	movs	r3, #250	@ 0xfa
 8002922:	01db      	lsls	r3, r3, #7
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e001      	b.n	800292c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800292c:	693b      	ldr	r3, [r7, #16]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b006      	add	sp, #24
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	40021000 	.word	0x40021000
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200

08002944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b02      	ldr	r3, [pc, #8]	@ (8002954 <HAL_RCC_GetHCLKFreq+0x10>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800295c:	f7ff fff2 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002960:	0004      	movs	r4, r0
 8002962:	f7ff fb49 	bl	8001ff8 <LL_RCC_GetAPB1Prescaler>
 8002966:	0003      	movs	r3, r0
 8002968:	0b1a      	lsrs	r2, r3, #12
 800296a:	4b05      	ldr	r3, [pc, #20]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x28>)
 800296c:	0092      	lsls	r2, r2, #2
 800296e:	58d3      	ldr	r3, [r2, r3]
 8002970:	221f      	movs	r2, #31
 8002972:	4013      	ands	r3, r2
 8002974:	40dc      	lsrs	r4, r3
 8002976:	0023      	movs	r3, r4
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bdb0      	pop	{r4, r5, r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	08003944 	.word	0x08003944

08002984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0a8      	b.n	8002ae8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	2382      	movs	r3, #130	@ 0x82
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d009      	beq.n	80029be <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
 80029b0:	e005      	b.n	80029be <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	225d      	movs	r2, #93	@ 0x5d
 80029c8:	5c9b      	ldrb	r3, [r3, r2]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	225c      	movs	r2, #92	@ 0x5c
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fd ff5c 	bl	8000898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	225d      	movs	r2, #93	@ 0x5d
 80029e4:	2102      	movs	r1, #2
 80029e6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2140      	movs	r1, #64	@ 0x40
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	23e0      	movs	r3, #224	@ 0xe0
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d902      	bls.n	8002a0a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e002      	b.n	8002a10 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	23f0      	movs	r3, #240	@ 0xf0
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d008      	beq.n	8002a2e <HAL_SPI_Init+0xaa>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	23e0      	movs	r3, #224	@ 0xe0
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	2382      	movs	r3, #130	@ 0x82
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	401a      	ands	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	2384      	movs	r3, #132	@ 0x84
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	400b      	ands	r3, r1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2102      	movs	r1, #2
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2101      	movs	r1, #1
 8002a54:	400b      	ands	r3, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6999      	ldr	r1, [r3, #24]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	400b      	ands	r3, r1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2138      	movs	r1, #56	@ 0x38
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	2180      	movs	r1, #128	@ 0x80
 8002a74:	400b      	ands	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	0011      	movs	r1, r2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	401a      	ands	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	2204      	movs	r2, #4
 8002a94:	401a      	ands	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	23f0      	movs	r3, #240	@ 0xf0
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	015b      	lsls	r3, r3, #5
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69da      	ldr	r2, [r3, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <HAL_SPI_Init+0x16c>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	225d      	movs	r2, #93	@ 0x5d
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	fffff7ff 	.word	0xfffff7ff

08002af4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e090      	b.n	8002c2a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	223d      	movs	r2, #61	@ 0x3d
 8002b0c:	5c9b      	ldrb	r3, [r3, r2]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	223c      	movs	r2, #60	@ 0x3c
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd ff1c 	bl	800095c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	223d      	movs	r2, #61	@ 0x3d
 8002b28:	2102      	movs	r1, #2
 8002b2a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	493f      	ldr	r1, [pc, #252]	@ (8002c34 <HAL_TIM_Encoder_Init+0x140>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	0019      	movs	r1, r3
 8002b46:	0010      	movs	r0, r2
 8002b48:	f000 f9ac 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4a31      	ldr	r2, [pc, #196]	@ (8002c38 <HAL_TIM_Encoder_Init+0x144>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	4313      	orrs	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c3c <HAL_TIM_Encoder_Init+0x148>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4a2b      	ldr	r2, [pc, #172]	@ (8002c40 <HAL_TIM_Encoder_Init+0x14c>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	011a      	lsls	r2, r3, #4
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	031b      	lsls	r3, r3, #12
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2222      	movs	r2, #34	@ 0x22
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2288      	movs	r2, #136	@ 0x88
 8002bca:	4393      	bics	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2248      	movs	r2, #72	@ 0x48
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223e      	movs	r2, #62	@ 0x3e
 8002c04:	2101      	movs	r1, #1
 8002c06:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	223f      	movs	r2, #63	@ 0x3f
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2244      	movs	r2, #68	@ 0x44
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2245      	movs	r2, #69	@ 0x45
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223d      	movs	r2, #61	@ 0x3d
 8002c24:	2101      	movs	r1, #1
 8002c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b006      	add	sp, #24
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	fffebff8 	.word	0xfffebff8
 8002c38:	fffffcfc 	.word	0xfffffcfc
 8002c3c:	fffff3f3 	.word	0xfffff3f3
 8002c40:	ffff0f0f 	.word	0xffff0f0f

08002c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4013      	ands	r3, r2
 8002c62:	d021      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d01d      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2203      	movs	r2, #3
 8002c72:	4252      	negs	r2, r2
 8002c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2203      	movs	r2, #3
 8002c84:	4013      	ands	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 f8f2 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e007      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f8e5 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 f8f1 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d01e      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	23c0      	movs	r3, #192	@ 0xc0
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f8cb 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002cde:	e007      	b.n	8002cf0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f8be 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f8ca 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d021      	beq.n	8002d42 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2208      	movs	r2, #8
 8002d02:	4013      	ands	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2209      	movs	r2, #9
 8002d0c:	4252      	negs	r2, r2
 8002d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2204      	movs	r2, #4
 8002d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f8a5 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002d2a:	e007      	b.n	8002d3c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f898 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 f8a4 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2210      	movs	r2, #16
 8002d46:	4013      	ands	r3, r2
 8002d48:	d022      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d01e      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2211      	movs	r2, #17
 8002d58:	4252      	negs	r2, r2
 8002d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	23c0      	movs	r3, #192	@ 0xc0
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f87e 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e007      	b.n	8002d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 f871 	bl	8002e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f87d 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	d00c      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d008      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2202      	movs	r2, #2
 8002da6:	4252      	negs	r2, r2
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f851 	bl	8002e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	4013      	ands	r3, r2
 8002db8:	d104      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002dc2:	d00b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2280      	movs	r2, #128	@ 0x80
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <HAL_TIM_IRQHandler+0x208>)
 8002dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f958 	bl	800308c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	4013      	ands	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a17      	ldr	r2, [pc, #92]	@ (8002e50 <HAL_TIM_IRQHandler+0x20c>)
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 f94f 	bl	800309c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2240      	movs	r2, #64	@ 0x40
 8002e02:	4013      	ands	r3, r2
 8002e04:	d00c      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2240      	movs	r2, #64	@ 0x40
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d008      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2241      	movs	r2, #65	@ 0x41
 8002e14:	4252      	negs	r2, r2
 8002e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f83a 	bl	8002e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2220      	movs	r2, #32
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00c      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d008      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2221      	movs	r2, #33	@ 0x21
 8002e36:	4252      	negs	r2, r2
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 f91d 	bl	800307c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	ffffdf7f 	.word	0xffffdf7f
 8002e50:	fffffeff 	.word	0xfffffeff

08002e54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e5c:	46c0      	nop			@ (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a36      	ldr	r2, [pc, #216]	@ (8002f90 <TIM_Base_SetConfig+0xec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x20>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a35      	ldr	r2, [pc, #212]	@ (8002f94 <TIM_Base_SetConfig+0xf0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2270      	movs	r2, #112	@ 0x70
 8002ec8:	4393      	bics	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f90 <TIM_Base_SetConfig+0xec>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f94 <TIM_Base_SetConfig+0xf0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <TIM_Base_SetConfig+0xf4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f9c <TIM_Base_SetConfig+0xf8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <TIM_Base_SetConfig+0xfc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a28      	ldr	r2, [pc, #160]	@ (8002fa4 <TIM_Base_SetConfig+0x100>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a27      	ldr	r2, [pc, #156]	@ (8002fa8 <TIM_Base_SetConfig+0x104>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	001a      	movs	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a13      	ldr	r2, [pc, #76]	@ (8002f90 <TIM_Base_SetConfig+0xec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0xba>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <TIM_Base_SetConfig+0xf8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0xba>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a13      	ldr	r2, [pc, #76]	@ (8002fa0 <TIM_Base_SetConfig+0xfc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0xba>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <TIM_Base_SetConfig+0x100>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d103      	bne.n	8002f66 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4393      	bics	r3, r2
 8002f80:	001a      	movs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
  }
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40002000 	.word	0x40002000
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40014400 	.word	0x40014400
 8002fa4:	40014800 	.word	0x40014800
 8002fa8:	fffffcff 	.word	0xfffffcff

08002fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	223c      	movs	r2, #60	@ 0x3c
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e04f      	b.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	223c      	movs	r2, #60	@ 0x3c
 8002fc8:	2101      	movs	r1, #1
 8002fca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	223d      	movs	r2, #61	@ 0x3d
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a20      	ldr	r2, [pc, #128]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2270      	movs	r2, #112	@ 0x70
 8003004:	4393      	bics	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a13      	ldr	r2, [pc, #76]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a11      	ldr	r2, [pc, #68]	@ (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10c      	bne.n	8003052 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2280      	movs	r2, #128	@ 0x80
 800303c:	4393      	bics	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4313      	orrs	r3, r2
 8003048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223d      	movs	r2, #61	@ 0x3d
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	223c      	movs	r2, #60	@ 0x3c
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40012c00 	.word	0x40012c00
 8003070:	ff0fffff 	.word	0xff0fffff
 8003074:	40000400 	.word	0x40000400
 8003078:	40014000 	.word	0x40014000

0800307c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003094:	46c0      	nop			@ (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030a4:	46c0      	nop			@ (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e046      	b.n	800314c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2288      	movs	r2, #136	@ 0x88
 80030c2:	589b      	ldr	r3, [r3, r2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2284      	movs	r2, #132	@ 0x84
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7fd fc94 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2288      	movs	r2, #136	@ 0x88
 80030dc:	2124      	movs	r1, #36	@ 0x24
 80030de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f996 	bl	800342c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f828 	bl	8003158 <UART_SetConfig>
 8003108:	0003      	movs	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e01c      	b.n	800314c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	490d      	ldr	r1, [pc, #52]	@ (8003154 <HAL_UART_Init+0xa8>)
 800311e:	400a      	ands	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	212a      	movs	r1, #42	@ 0x2a
 800312e:	438a      	bics	r2, r1
 8003130:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0018      	movs	r0, r3
 8003146:	f000 fa25 	bl	8003594 <UART_CheckIdleState>
 800314a:	0003      	movs	r3, r0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}
 8003154:	ffffb7ff 	.word	0xffffb7ff

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003160:	231a      	movs	r3, #26
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	4313      	orrs	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4aa1      	ldr	r2, [pc, #644]	@ (800340c <UART_SetConfig+0x2b4>)
 8003188:	4013      	ands	r3, r2
 800318a:	0019      	movs	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a9c      	ldr	r2, [pc, #624]	@ (8003410 <UART_SetConfig+0x2b8>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a93      	ldr	r2, [pc, #588]	@ (8003414 <UART_SetConfig+0x2bc>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	220f      	movs	r2, #15
 80031dc:	4393      	bics	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a89      	ldr	r2, [pc, #548]	@ (8003418 <UART_SetConfig+0x2c0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d127      	bne.n	8003246 <UART_SetConfig+0xee>
 80031f6:	4b89      	ldr	r3, [pc, #548]	@ (800341c <UART_SetConfig+0x2c4>)
 80031f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fa:	2203      	movs	r2, #3
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d017      	beq.n	8003232 <UART_SetConfig+0xda>
 8003202:	d81b      	bhi.n	800323c <UART_SetConfig+0xe4>
 8003204:	2b02      	cmp	r3, #2
 8003206:	d00a      	beq.n	800321e <UART_SetConfig+0xc6>
 8003208:	d818      	bhi.n	800323c <UART_SetConfig+0xe4>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <UART_SetConfig+0xbc>
 800320e:	2b01      	cmp	r3, #1
 8003210:	d00a      	beq.n	8003228 <UART_SetConfig+0xd0>
 8003212:	e013      	b.n	800323c <UART_SetConfig+0xe4>
 8003214:	231b      	movs	r3, #27
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e021      	b.n	8003262 <UART_SetConfig+0x10a>
 800321e:	231b      	movs	r3, #27
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e01c      	b.n	8003262 <UART_SetConfig+0x10a>
 8003228:	231b      	movs	r3, #27
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2204      	movs	r2, #4
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e017      	b.n	8003262 <UART_SetConfig+0x10a>
 8003232:	231b      	movs	r3, #27
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2208      	movs	r2, #8
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e012      	b.n	8003262 <UART_SetConfig+0x10a>
 800323c:	231b      	movs	r3, #27
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2210      	movs	r2, #16
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e00d      	b.n	8003262 <UART_SetConfig+0x10a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	@ (8003420 <UART_SetConfig+0x2c8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d104      	bne.n	800325a <UART_SetConfig+0x102>
 8003250:	231b      	movs	r3, #27
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e003      	b.n	8003262 <UART_SetConfig+0x10a>
 800325a:	231b      	movs	r3, #27
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2210      	movs	r2, #16
 8003260:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	429a      	cmp	r2, r3
 800326c:	d000      	beq.n	8003270 <UART_SetConfig+0x118>
 800326e:	e065      	b.n	800333c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003270:	231b      	movs	r3, #27
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b08      	cmp	r3, #8
 8003278:	d015      	beq.n	80032a6 <UART_SetConfig+0x14e>
 800327a:	dc18      	bgt.n	80032ae <UART_SetConfig+0x156>
 800327c:	2b04      	cmp	r3, #4
 800327e:	d00d      	beq.n	800329c <UART_SetConfig+0x144>
 8003280:	dc15      	bgt.n	80032ae <UART_SetConfig+0x156>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <UART_SetConfig+0x134>
 8003286:	2b02      	cmp	r3, #2
 8003288:	d005      	beq.n	8003296 <UART_SetConfig+0x13e>
 800328a:	e010      	b.n	80032ae <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7ff fb64 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003290:	0003      	movs	r3, r0
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e012      	b.n	80032bc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003296:	4b63      	ldr	r3, [pc, #396]	@ (8003424 <UART_SetConfig+0x2cc>)
 8003298:	617b      	str	r3, [r7, #20]
        break;
 800329a:	e00f      	b.n	80032bc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329c:	f7ff fad0 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80032a0:	0003      	movs	r3, r0
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e00a      	b.n	80032bc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	617b      	str	r3, [r7, #20]
        break;
 80032ac:	e006      	b.n	80032bc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032b2:	231a      	movs	r3, #26
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
        break;
 80032ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <UART_SetConfig+0x16c>
 80032c2:	e08d      	b.n	80033e0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c8:	4b57      	ldr	r3, [pc, #348]	@ (8003428 <UART_SetConfig+0x2d0>)
 80032ca:	0052      	lsls	r2, r2, #1
 80032cc:	5ad3      	ldrh	r3, [r2, r3]
 80032ce:	0019      	movs	r1, r3
 80032d0:	6978      	ldr	r0, [r7, #20]
 80032d2:	f7fc ff13 	bl	80000fc <__udivsi3>
 80032d6:	0003      	movs	r3, r0
 80032d8:	005a      	lsls	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	18d2      	adds	r2, r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0019      	movs	r1, r3
 80032e8:	0010      	movs	r0, r2
 80032ea:	f7fc ff07 	bl	80000fc <__udivsi3>
 80032ee:	0003      	movs	r3, r0
 80032f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d91c      	bls.n	8003332 <UART_SetConfig+0x1da>
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	025b      	lsls	r3, r3, #9
 80032fe:	429a      	cmp	r2, r3
 8003300:	d217      	bcs.n	8003332 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	b29a      	uxth	r2, r3
 8003306:	200e      	movs	r0, #14
 8003308:	183b      	adds	r3, r7, r0
 800330a:	210f      	movs	r1, #15
 800330c:	438a      	bics	r2, r1
 800330e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	2207      	movs	r2, #7
 8003318:	4013      	ands	r3, r2
 800331a:	b299      	uxth	r1, r3
 800331c:	183b      	adds	r3, r7, r0
 800331e:	183a      	adds	r2, r7, r0
 8003320:	8812      	ldrh	r2, [r2, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	183a      	adds	r2, r7, r0
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	e056      	b.n	80033e0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003332:	231a      	movs	r3, #26
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e051      	b.n	80033e0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800333c:	231b      	movs	r3, #27
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d015      	beq.n	8003372 <UART_SetConfig+0x21a>
 8003346:	dc18      	bgt.n	800337a <UART_SetConfig+0x222>
 8003348:	2b04      	cmp	r3, #4
 800334a:	d00d      	beq.n	8003368 <UART_SetConfig+0x210>
 800334c:	dc15      	bgt.n	800337a <UART_SetConfig+0x222>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <UART_SetConfig+0x200>
 8003352:	2b02      	cmp	r3, #2
 8003354:	d005      	beq.n	8003362 <UART_SetConfig+0x20a>
 8003356:	e010      	b.n	800337a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003358:	f7ff fafe 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 800335c:	0003      	movs	r3, r0
 800335e:	617b      	str	r3, [r7, #20]
        break;
 8003360:	e012      	b.n	8003388 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003362:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <UART_SetConfig+0x2cc>)
 8003364:	617b      	str	r3, [r7, #20]
        break;
 8003366:	e00f      	b.n	8003388 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003368:	f7ff fa6a 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 800336c:	0003      	movs	r3, r0
 800336e:	617b      	str	r3, [r7, #20]
        break;
 8003370:	e00a      	b.n	8003388 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	617b      	str	r3, [r7, #20]
        break;
 8003378:	e006      	b.n	8003388 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800337e:	231a      	movs	r3, #26
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
        break;
 8003386:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d028      	beq.n	80033e0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003392:	4b25      	ldr	r3, [pc, #148]	@ (8003428 <UART_SetConfig+0x2d0>)
 8003394:	0052      	lsls	r2, r2, #1
 8003396:	5ad3      	ldrh	r3, [r2, r3]
 8003398:	0019      	movs	r1, r3
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7fc feae 	bl	80000fc <__udivsi3>
 80033a0:	0003      	movs	r3, r0
 80033a2:	001a      	movs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	18d2      	adds	r2, r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0019      	movs	r1, r3
 80033b2:	0010      	movs	r0, r2
 80033b4:	f7fc fea2 	bl	80000fc <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d90a      	bls.n	80033d8 <UART_SetConfig+0x280>
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	2380      	movs	r3, #128	@ 0x80
 80033c6:	025b      	lsls	r3, r3, #9
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d205      	bcs.n	80033d8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e003      	b.n	80033e0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80033d8:	231a      	movs	r3, #26
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	226a      	movs	r2, #106	@ 0x6a
 80033e4:	2101      	movs	r1, #1
 80033e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2268      	movs	r2, #104	@ 0x68
 80033ec:	2101      	movs	r1, #1
 80033ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80033fc:	231a      	movs	r3, #26
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	781b      	ldrb	r3, [r3, #0]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b008      	add	sp, #32
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	cfff69f3 	.word	0xcfff69f3
 8003410:	ffffcfff 	.word	0xffffcfff
 8003414:	11fff4ff 	.word	0x11fff4ff
 8003418:	40013800 	.word	0x40013800
 800341c:	40021000 	.word	0x40021000
 8003420:	40004400 	.word	0x40004400
 8003424:	00f42400 	.word	0x00f42400
 8003428:	08003964 	.word	0x08003964

0800342c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	2208      	movs	r2, #8
 800343a:	4013      	ands	r3, r2
 800343c:	d00b      	beq.n	8003456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a4a      	ldr	r2, [pc, #296]	@ (8003570 <UART_AdvFeatureConfig+0x144>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	2201      	movs	r2, #1
 800345c:	4013      	ands	r3, r2
 800345e:	d00b      	beq.n	8003478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a43      	ldr	r2, [pc, #268]	@ (8003574 <UART_AdvFeatureConfig+0x148>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347c:	2202      	movs	r2, #2
 800347e:	4013      	ands	r3, r2
 8003480:	d00b      	beq.n	800349a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a3b      	ldr	r2, [pc, #236]	@ (8003578 <UART_AdvFeatureConfig+0x14c>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00b      	beq.n	80034bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a34      	ldr	r2, [pc, #208]	@ (800357c <UART_AdvFeatureConfig+0x150>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	2210      	movs	r2, #16
 80034c2:	4013      	ands	r3, r2
 80034c4:	d00b      	beq.n	80034de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <UART_AdvFeatureConfig+0x154>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	2220      	movs	r2, #32
 80034e4:	4013      	ands	r3, r2
 80034e6:	d00b      	beq.n	8003500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <UART_AdvFeatureConfig+0x158>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	2240      	movs	r2, #64	@ 0x40
 8003506:	4013      	ands	r3, r2
 8003508:	d01d      	beq.n	8003546 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <UART_AdvFeatureConfig+0x15c>)
 8003512:	4013      	ands	r3, r2
 8003514:	0019      	movs	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	035b      	lsls	r3, r3, #13
 800352a:	429a      	cmp	r2, r3
 800352c:	d10b      	bne.n	8003546 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a15      	ldr	r2, [pc, #84]	@ (800358c <UART_AdvFeatureConfig+0x160>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	2280      	movs	r2, #128	@ 0x80
 800354c:	4013      	ands	r3, r2
 800354e:	d00b      	beq.n	8003568 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a0e      	ldr	r2, [pc, #56]	@ (8003590 <UART_AdvFeatureConfig+0x164>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }
}
 8003568:	46c0      	nop			@ (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}
 8003570:	ffff7fff 	.word	0xffff7fff
 8003574:	fffdffff 	.word	0xfffdffff
 8003578:	fffeffff 	.word	0xfffeffff
 800357c:	fffbffff 	.word	0xfffbffff
 8003580:	ffffefff 	.word	0xffffefff
 8003584:	ffffdfff 	.word	0xffffdfff
 8003588:	ffefffff 	.word	0xffefffff
 800358c:	ff9fffff 	.word	0xff9fffff
 8003590:	fff7ffff 	.word	0xfff7ffff

08003594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b092      	sub	sp, #72	@ 0x48
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2290      	movs	r2, #144	@ 0x90
 80035a0:	2100      	movs	r1, #0
 80035a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a4:	f7fd fb54 	bl	8000c50 <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2208      	movs	r2, #8
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d12d      	bne.n	8003616 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035bc:	2280      	movs	r2, #128	@ 0x80
 80035be:	0391      	lsls	r1, r2, #14
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4a47      	ldr	r2, [pc, #284]	@ (80036e0 <UART_CheckIdleState+0x14c>)
 80035c4:	9200      	str	r2, [sp, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f000 f88e 	bl	80036e8 <UART_WaitOnFlagUntilTimeout>
 80035cc:	1e03      	subs	r3, r0, #0
 80035ce:	d022      	beq.n	8003616 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d0:	f3ef 8310 	mrs	r3, PRIMASK
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035da:	2301      	movs	r3, #1
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2180      	movs	r1, #128	@ 0x80
 80035f2:	438a      	bics	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2288      	movs	r2, #136	@ 0x88
 8003606:	2120      	movs	r1, #32
 8003608:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2284      	movs	r2, #132	@ 0x84
 800360e:	2100      	movs	r1, #0
 8003610:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e060      	b.n	80036d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2204      	movs	r2, #4
 800361e:	4013      	ands	r3, r2
 8003620:	2b04      	cmp	r3, #4
 8003622:	d146      	bne.n	80036b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	03d1      	lsls	r1, r2, #15
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4a2c      	ldr	r2, [pc, #176]	@ (80036e0 <UART_CheckIdleState+0x14c>)
 800362e:	9200      	str	r2, [sp, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	f000 f859 	bl	80036e8 <UART_WaitOnFlagUntilTimeout>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d03b      	beq.n	80036b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363a:	f3ef 8310 	mrs	r3, PRIMASK
 800363e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003640:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
 8003644:	2301      	movs	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4922      	ldr	r1, [pc, #136]	@ (80036e4 <UART_CheckIdleState+0x150>)
 800365c:	400a      	ands	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366c:	f3ef 8310 	mrs	r3, PRIMASK
 8003670:	61bb      	str	r3, [r7, #24]
  return(result);
 8003672:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
 8003676:	2301      	movs	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			@ (mov r8, r8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	228c      	movs	r2, #140	@ 0x8c
 80036a2:	2120      	movs	r1, #32
 80036a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2284      	movs	r2, #132	@ 0x84
 80036aa:	2100      	movs	r1, #0
 80036ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e012      	b.n	80036d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2288      	movs	r2, #136	@ 0x88
 80036b6:	2120      	movs	r1, #32
 80036b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	228c      	movs	r2, #140	@ 0x8c
 80036be:	2120      	movs	r1, #32
 80036c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2284      	movs	r2, #132	@ 0x84
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b010      	add	sp, #64	@ 0x40
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	01ffffff 	.word	0x01ffffff
 80036e4:	fffffedf 	.word	0xfffffedf

080036e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f8:	e051      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3301      	adds	r3, #1
 80036fe:	d04e      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7fd faa6 	bl	8000c50 <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e051      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2204      	movs	r2, #4
 8003722:	4013      	ands	r3, r2
 8003724:	d03b      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b80      	cmp	r3, #128	@ 0x80
 800372a:	d038      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb6>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b40      	cmp	r3, #64	@ 0x40
 8003730:	d035      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2208      	movs	r2, #8
 800373a:	4013      	ands	r3, r2
 800373c:	2b08      	cmp	r3, #8
 800373e:	d111      	bne.n	8003764 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2208      	movs	r2, #8
 8003746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f83c 	bl	80037c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2290      	movs	r2, #144	@ 0x90
 8003754:	2108      	movs	r1, #8
 8003756:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2284      	movs	r2, #132	@ 0x84
 800375c:	2100      	movs	r1, #0
 800375e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e02c      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	401a      	ands	r2, r3
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	429a      	cmp	r2, r3
 8003776:	d112      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2280      	movs	r2, #128	@ 0x80
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	0018      	movs	r0, r3
 8003786:	f000 f81f 	bl	80037c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2290      	movs	r2, #144	@ 0x90
 800378e:	2120      	movs	r1, #32
 8003790:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2284      	movs	r2, #132	@ 0x84
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e00f      	b.n	80037be <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	425a      	negs	r2, r3
 80037ae:	4153      	adcs	r3, r2
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	001a      	movs	r2, r3
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d09e      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08e      	sub	sp, #56	@ 0x38
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d0:	f3ef 8310 	mrs	r3, PRIMASK
 80037d4:	617b      	str	r3, [r7, #20]
  return(result);
 80037d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037da:	2301      	movs	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f383 8810 	msr	PRIMASK, r3
}
 80037e4:	46c0      	nop			@ (mov r8, r8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4926      	ldr	r1, [pc, #152]	@ (800388c <UART_EndRxTransfer+0xc4>)
 80037f2:	400a      	ands	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003802:	f3ef 8310 	mrs	r3, PRIMASK
 8003806:	623b      	str	r3, [r7, #32]
  return(result);
 8003808:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
 800380c:	2301      	movs	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	491b      	ldr	r1, [pc, #108]	@ (8003890 <UART_EndRxTransfer+0xc8>)
 8003824:	400a      	ands	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	f383 8810 	msr	PRIMASK, r3
}
 8003832:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d118      	bne.n	800386e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	60bb      	str	r3, [r7, #8]
  return(result);
 8003842:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003846:	2301      	movs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2110      	movs	r1, #16
 800385e:	438a      	bics	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	228c      	movs	r2, #140	@ 0x8c
 8003872:	2120      	movs	r1, #32
 8003874:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b00e      	add	sp, #56	@ 0x38
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	fffffedf 	.word	0xfffffedf
 8003890:	effffffe 	.word	0xeffffffe

08003894 <memset>:
 8003894:	0003      	movs	r3, r0
 8003896:	1882      	adds	r2, r0, r2
 8003898:	4293      	cmp	r3, r2
 800389a:	d100      	bne.n	800389e <memset+0xa>
 800389c:	4770      	bx	lr
 800389e:	7019      	strb	r1, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	e7f9      	b.n	8003898 <memset+0x4>

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	2600      	movs	r6, #0
 80038a8:	4c0c      	ldr	r4, [pc, #48]	@ (80038dc <__libc_init_array+0x38>)
 80038aa:	4d0d      	ldr	r5, [pc, #52]	@ (80038e0 <__libc_init_array+0x3c>)
 80038ac:	1b64      	subs	r4, r4, r5
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	42a6      	cmp	r6, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	2600      	movs	r6, #0
 80038b6:	f000 f819 	bl	80038ec <_init>
 80038ba:	4c0a      	ldr	r4, [pc, #40]	@ (80038e4 <__libc_init_array+0x40>)
 80038bc:	4d0a      	ldr	r5, [pc, #40]	@ (80038e8 <__libc_init_array+0x44>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	42a6      	cmp	r6, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	00b3      	lsls	r3, r6, #2
 80038ca:	58eb      	ldr	r3, [r5, r3]
 80038cc:	4798      	blx	r3
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	00b3      	lsls	r3, r6, #2
 80038d4:	58eb      	ldr	r3, [r5, r3]
 80038d6:	4798      	blx	r3
 80038d8:	3601      	adds	r6, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	0800397c 	.word	0x0800397c
 80038e0:	0800397c 	.word	0x0800397c
 80038e4:	08003980 	.word	0x08003980
 80038e8:	0800397c 	.word	0x0800397c

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
